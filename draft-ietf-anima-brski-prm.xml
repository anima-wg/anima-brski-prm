<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.36 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-09" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 128?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 136?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of the BRSKI registrar in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer site/domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer site/domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer site/domain does not offer enough physical security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication.
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.</t>

<t>Note that the Join Proxy is not shown in the figure, having been replaced by the Registrar Agent.
The Join Proxy may still be present, and there <bcp14>MAY</bcp14> be some situations in which the Join Proxy can be used by the Registrar-Agent to connect to the Registrar.
For example, the Registrar-Agent application on a smartphone often can connect to local wifi without giving up their LTE connection <xref target="androidnsd"/>, but only can make link-local connections.</t>

<t>The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="480" width="456" viewBox="0 0 456 480" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,432" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,432" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,432 L 424,432" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">EST</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="368" y="404">Certificate</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="332" y="420">Authority)</text>
<text x="448" y="420">.</text>
<text x="128" y="436">.</text>
<text x="448" y="436">.</text>
<text x="288" y="452">.........................................</text>
<text x="236" y="468">&quot;Domain&quot;</text>
<text x="316" y="468">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  EST   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI Certificate |  .
               .           |        Authority)      |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols (including HTTPS) can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a store and forward communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges.
It can then perform a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar LDevID certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that this registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a weaker assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
"agent-proximity" is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the registrar via the TLS handshake and pins that public key as the "proximity-registrar-cert" into the voucher request.
This allows the MASA to see the proximity of the pledge and registrar, facilitating a decision to assign the pledge to that domain owner.
In BRSKI, the TLS connection is considered provisional until the pledge receives the voucher.</t>

<t>In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and must take the Registrar-Agent LDevID provisionally.
The registrar-agent has included its LDevID, a certificate signed by the domain owner, into the PVR trigger message.
The registrar-agent identity is therefore included into the Pledge Voucher Request (PVR).</t>

<t>Akin to the BRSKI case, the pledge has provided proximity evidence to the MASA.
But additionally, this allows the Registrar to be sure that the PVR collected by the Registrar-Agent was in fact collected by the Registrar-Agent to which the Registrar is connected to.</t>

<t>In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information once the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.
The URI path begins with "http://pledge.example/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.</t>

<t>The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
The details of doing TLS validation are <xref target="pledgehttps"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar - Returns enrollment-response</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its LDevID(RegAgt) when establishing a TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete LDEVID(RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar LDevID certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> section 4 with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the LDevID(RegAgt), as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the LDevID(RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA can issue the assertion "agent-proximity" as follows:
The MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided LDevID(RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
This agent-proximity is similar to the proximity assertion by the MASA when using BRSKI.
It is a stronger assertion than "logged", but it is weaker than the assertion "verified", which relies on ownership tracking.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> handle/trusts pledges IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication.
The distribution of IDevID CA certificates to the registrar-agent is out of scope of this document and may be done by a manual configuration.</t>
      <t>possesses own LDevID(RegAgt) credentials for the registrar domain (site).
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar LDevID credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to provide privacy for the interaction between the registrar-agent and the pledge, see <xref target="pledgehttps"/>.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the LDevID(RegAgt) certificate and the domain trust has not been established at this point of the communication.
Verification <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification.</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own LDevID(RegAgt) credentials of the site domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar LDevID credentials of the site domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credentials indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the LDevID(RegAgt) if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="voucher-issuance-by-masa"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar LDevID credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar LDevID certificate as well as potential intermediate CA certificates up to the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>This signature provides POP of the private key corresponding to the registrar LDevID certificate the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).
The registrar <bcp14>MUST</bcp14> use the same registrar LDevID credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This ensures that the same registrar LDevID certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".
<xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information.
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge.
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5b" in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5b": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher and LDevID certificate and optionally IDevID CA certificates.
The IDevID CA certificate is necessary, when the connection between the Registrar-agent and the pledge is established using TLS to enable the registrar-agent to validate the pledges' IDevID certificate during the TLS handshake as described in <xref target="exchanges_uc2_1"/>.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="368" width="528" viewBox="0 0 528 368" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,336" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 72,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="108" y="260">supply</text>
<text x="168" y="260">CAcerts</text>
<text x="244" y="260">(optional)</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply CAcerts (optional) ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status

]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="pledge-voucher-response-processing"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Validate the LDevID(Reg) certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert")</t>
  <t>Verify registrar signature of the voucher similar as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
</list></t>

<t>Step3 and step 4 have been introduced in BRSKI-PRM to enable verification of LDevID(Reg) certificate and also the proof-of-possession of the corresponding private key by the registrar, which is done in BRSKI based on the established TLS channel.
If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="pledge-voucher-status-telemetry"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "pvs-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate because
  it starts in the future (1/1/2023).",
  "reason-context": {
    "pvs-details": "Current date: 1/1/1970"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="pledge-wrapped-ca-certificates-processing"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully processed by pledge.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5b".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used by the pledge:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the validation of the wrapping signature or another security check fails.</t>
  <t>415 Unsupported Media Type: if the Content-Type of the request is in an unknown or unsupported format.</t>
  <t>400 Bad Request: if the pledge detects errors in the encoding of the payload.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "pes-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Enrollment response could not be verified.",
  "reason-context": {
    "pes-details": "no matching trust anchor"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), may have a list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="pledge-status-trigger-registrar-agent-to-pledge"><name>Pledge-Status - Trigger (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="pledge-status-response-pledge-registrar-agent"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished, or a single onboarding state may expire after a certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC6762">
  <front>
    <title>Multicast DNS</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6762"/>
  <seriesInfo name="DOI" value="10.17487/RFC6762"/>
</reference>

<reference anchor="RFC6763">
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries.  This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6763"/>
  <seriesInfo name="DOI" value="10.17487/RFC6763"/>
</reference>

<reference anchor="RFC7030">
  <front>
    <title>Enrollment over Secure Transport</title>
    <author fullname="M. Pritikin" initials="M." role="editor" surname="Pritikin"/>
    <author fullname="P. Yee" initials="P." role="editor" surname="Yee"/>
    <author fullname="D. Harkins" initials="D." role="editor" surname="Harkins"/>
    <date month="October" year="2013"/>
    <abstract>
      <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7030"/>
  <seriesInfo name="DOI" value="10.17487/RFC7030"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC8040">
  <front>
    <title>RESTCONF Protocol</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="January" year="2017"/>
    <abstract>
      <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8040"/>
  <seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>

<reference anchor="RFC8366">
  <front>
    <title>A Voucher Artifact for Bootstrapping Protocols</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer. This artifact is known as a "voucher".</t>
      <t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure. Other YANG-derived formats are possible. The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t>
      <t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8366"/>
  <seriesInfo name="DOI" value="10.17487/RFC8366"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8615">
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <date month="May" year="2019"/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8615"/>
  <seriesInfo name="DOI" value="10.17487/RFC8615"/>
</reference>

<reference anchor="RFC8995">
  <front>
    <title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <author fullname="M. Behringer" initials="M." surname="Behringer"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol.  Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks.  Support for deployment models with less stringent security requirements is included.  Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8995"/>
  <seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>


<reference anchor="I-D.ietf-anima-jws-voucher">
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname="Thomas Werner" initials="T." surname="Werner">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="22" month="February" year="2023"/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that is signed using a Cryptographic Message Syntax
   (CMS) structure.  This document introduces a variant of the voucher
   artifact in which CMS is replaced by the JSON Object Signing and
   Encryption (JOSE) mechanism described in [RFC7515] to support
   deployments in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-jws-voucher-06"/>
   
</reference>


<reference anchor="I-D.ietf-netconf-sztp-csr">
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Sean Turner" initials="S." surname="Turner">
         <organization>sn3rd</organization>
      </author>
      <date day="2" month="March" year="2022"/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-sztp-csr-14"/>
   
</reference>


<reference anchor="I-D.ietf-anima-rfc8366bis">
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software</organization>
      </author>
      <author fullname="Max Pritikin" initials="M." surname="Pritikin">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Qiufang Ma" initials="Q." surname="Ma">
         <organization>Huawei</organization>
      </author>
      <date day="7" month="February" year="2023"/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#x27;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#x27;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-rfc8366bis-07"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC2986">
  <front>
    <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
    <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
    <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
    <date month="November" year="2000"/>
    <abstract>
      <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2986"/>
  <seriesInfo name="DOI" value="10.17487/RFC2986"/>
</reference>

<reference anchor="RFC5272">
  <front>
    <title>Certificate Management over CMS (CMC)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="M. Myers" initials="M." surname="Myers"/>
    <date month="June" year="2008"/>
    <abstract>
      <t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t>
      <t>1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t>
      <t>2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t>
      <t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5272"/>
  <seriesInfo name="DOI" value="10.17487/RFC5272"/>
</reference>

<reference anchor="RFC6125">
  <front>
    <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="J. Hodges" initials="J." surname="Hodges"/>
    <date month="March" year="2011"/>
    <abstract>
      <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS).  This document specifies procedures for representing and verifying the identity of application services in such interactions. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6125"/>
  <seriesInfo name="DOI" value="10.17487/RFC6125"/>
</reference>

<reference anchor="RFC6241">
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
    <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
    <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
    <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
    <date month="June" year="2011"/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6241"/>
  <seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>

<reference anchor="RFC7252">
  <front>
    <title>The Constrained Application Protocol (CoAP)</title>
    <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
    <author fullname="K. Hartke" initials="K." surname="Hartke"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
      <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7252"/>
  <seriesInfo name="DOI" value="10.17487/RFC7252"/>
</reference>

<reference anchor="RFC8407">
  <front>
    <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <date month="October" year="2018"/>
    <abstract>
      <t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="216"/>
  <seriesInfo name="RFC" value="8407"/>
  <seriesInfo name="DOI" value="10.17487/RFC8407"/>
</reference>

<reference anchor="RFC8792">
  <front>
    <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
    <author fullname="A. Farrel" initials="A." surname="Farrel"/>
    <author fullname="Q. Wu" initials="Q." surname="Wu"/>
    <date month="June" year="2020"/>
    <abstract>
      <t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8792"/>
  <seriesInfo name="DOI" value="10.17487/RFC8792"/>
</reference>

<reference anchor="RFC8990">
  <front>
    <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
    <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other.  GRASP depends on an external security environment that is described elsewhere.  The technical objectives and parameters for specific application scenarios are to be described in separate documents.  Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8990"/>
  <seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9238">
  <front>
    <title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="J. Latour" initials="J." surname="Latour"/>
    <author fullname="H. Habibi Gharakheili" initials="H." surname="Habibi Gharakheili"/>
    <date month="May" year="2022"/>
    <abstract>
      <t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t>
      <t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9238"/>
  <seriesInfo name="DOI" value="10.17487/RFC9238"/>
</reference>


<reference anchor="I-D.ietf-anima-brski-ae">
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Steffen Fries" initials="S." surname="Fries">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
         <organization>Siemens AG</organization>
      </author>
      <date day="28" month="June" year="2023"/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-ae-05"/>
   
</reference>


<reference anchor="I-D.richardson-emu-eap-onboarding">
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname="Alan DeKok" initials="A." surname="DeKok">
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="2" month="April" year="2023"/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-emu-eap-onboarding-03"/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="androidnsd" target="https://developer.android.com/training/connect-devices-wirelessly">
  <front>
    <title>Android Developer: Connect devices wirelessly</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230000000000*/https://developer.android.com/training/connect-devices-wirelessly"/>
</reference>
<reference anchor="androidtrustfail" target="https://developer.android.com/training/articles/security-ssl">
  <front>
    <title>Security with Network Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230326153937/https://developer.android.com/training/articles/security-ssl"/>
</reference>


<reference anchor="RFC8971">
  <front>
    <title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
    <author fullname="S. Pallagatti" initials="S." role="editor" surname="Pallagatti"/>
    <author fullname="G. Mirsky" initials="G." role="editor" surname="Mirsky"/>
    <author fullname="S. Paragiri" initials="S." surname="Paragiri"/>
    <author fullname="V. Govindan" initials="V." surname="Govindan"/>
    <author fullname="M. Mudigonda" initials="M." surname="Mudigonda"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8971"/>
  <seriesInfo name="DOI" value="10.17487/RFC8971"/>
</reference>


<reference anchor="I-D.irtf-t2trg-taxonomy-manufacturer-anchors">
   <front>
      <title>A Taxonomy of operational security considerations for manufacturer installed keys and Trust Anchors</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="22" month="January" year="2023"/>
      <abstract>
	 <t>   This document provides a taxonomy of methods used by manufacturers of
   silicon and devices to secure private keys and public trust anchors.
   This deals with two related activities: how trust anchors and private
   keys are installed into devices during manufacturing, and how the
   related manufacturer held private keys are secured against
   disclosure.

   This document does not evaluate the different mechanisms, but rather
   just serves to name them in a consistent manner in order to aid in
   communication.

   RFCEDITOR: please remove this paragraph.  This work is occurring in
   https://github.com/mcr/idevid-security-considerations

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-t2trg-taxonomy-manufacturer-anchors-00"/>
   
</reference>




    </references>


<?line 2102?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="pledgehttps"><name>HTTPS operations between Registrar-Agent and Pledge</name>

<t>The use of HTTPS between the Registrar-Agent and the Pledge has been identified as an optional mechanism.</t>

<t>Provided that the key-agreement in the underlying TLS protocol connection can be properly authenticated, the use of TLS provides privacy for the voucher and enrollment operations between the pledge and the registrar-agent.
The authenticity of the onboarding and enrollment is not dependant upon the security of the TLS connection.</t>

<t>The use of HTTPS is not mandated by this document for a number of reasons:</t>

<t><list style="numbers">
  <t>A certificate is generally required in order to do TLS.  While there are other modes of authentication including PSK, various EAP methods and raw public key, they do no help as there is no previous relationship between the Registrar-Agent.</t>
  <t>The pledge can use it's IDevID certificate to authenticate itself, but <xref target="RFC6125"/> DNS-ID methods do not apply as the pledge does not have a FQDN.  Instead a new mechanism is required, which authenticates the X520SerialNumber DN attribute which must be present in every IDevID.</t>
</list></t>

<t>If the Registrar-Agent has a preconfigured list of which serial numbers, from which manufacturers it expects to see, then it can attempt to match this pledge against a list of potential devices.</t>

<t>In many cases only the list of manufacturers is known ahead of time, so at most the Registrar-Agent can show the X520SerialNumber to the (human) operator who may then attempt to confirm that they are standing in front of a device with that serial number.
The use of scannable QRcodes may help automate this in some cases.</t>

<t><list style="numbers">
  <t>The CA used to sign the IDevID will be a manufacturer private PKI as described in <xref section="4.1" sectionFormat="comma" target="I-D.irtf-t2trg-taxonomy-manufacturer-anchors"/>.
The anchors for this PKI will never be part of the public WebPKI anchors which are distributed with most smartphone operating systems.
A registrar-agent application will need to use different APIs in order to initiate an HTTPS connection without performing WebPKI verification.
The application will then have to do it's own certificate chain verification against a store of manufacturer trust anchors.
In the Android ecosystem this involved use of a customer TrustManager: many application developers do not create these correctly, and there is significant push to remove this option as it has repeatedly resulted in security failures. See <xref target="androidtrustfail"/></t>
  <t>The use of the Host: (or :authority in HTTP/2) is explained in <xref section="7.2" sectionFormat="comma" target="RFC9110"/>. This header is mandatory, and so a compliant HTTPS client is going to insert it.
But, the contents of this header will at best be an IP address that came from the discovery process.
The pledge <bcp14>MUST</bcp14> therefore ignore the Host: header when it processes requests, and the pledge <bcp14>MUST NOT</bcp14> do any kind of name-base virtual hosting using the IP address/port combination.
Note that there is no requirement for the pledge to operate it's BRSKI-PRM service on port 80 or port 443, so if there is no reason for name-based virtual hosting.</t>
  <t>Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.
IDevID certificates are intended to be widely useable and EKU does not support that use.</t>
</list></t>

</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>,  and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in {#exchanges_uc2_1}</t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR</t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on registrar-agent</t>
  <t>issue #96: updated <xref target="exchangesfig_uc2_3"/> to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in <xref target="exchanges_uc2_3"/> as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="exchanges_uc2_3"/></t>
  <t>issue #100: included negative example in <xref target="vstat"/></t>
  <t>issue #105: included negative example in <xref target="estat"/></t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
TkFvGPWzL4vpaF6+goer4aurfFGzteZ4elll38JvzjVUol11tmh0K4cLKaU3
pa3jAC+Ou4JDeYEGcm9F5DFKAzdRddCvcGthuNXi5xJG9KSalFMY0Rm6Kng0
h1dzPDswm1OQP0djjBU+xftLtltYEJJcj+pXFXDCH185gRphXYpipt27qhQT
6p4TaIB2E0b+qVBpFP6rw6hep8yMvFoNhfItxmTe88EowfOtOX5ZwcMnizJ7
WlJTX4KeW8BXX5U57jzCaZzDfE1IZE1IO/wnp1bXDtusljT8MQXGtEGgPvl0
D88fm7I+QzP6OK+vQOMaq6FKoxTFFRMHLQ3IeLFpcX+sk4sFkq04ea4MYneV
1dQOQSg3bTVXrWLodH43bIAuBQAFUbqCKqeOoBrD64kAQt84ZAS5ePDowaew
5iCBiM/8j+E/dGse7Wcf/s8P0TViStlgfAQsX4brl0Uv/bEXRQZz3Ghx+9Xs
H38/mTz9+z+uR98+r/7x9+NmOPnmp9G33/w8Oty9GU52Ho0mn+5+t3c1HpbH
j+D5q+H95+Ph9GR2vvfgf/bKF+VXV//Y+2bBT3/6IP92dzb68lX59PCrn//x
969m331705xPv2m+m3xze/xjVT57cnT77Oe/7T7/cfjgxelxfTx5+D971+eT
52P89ezJ869Of/xHNfzy5PhvO+OT852HD7779vPyxddXf//b2c6nx+VN+d39
r8bf/f1k/I/D/6+9929uFEnaRf/3p3DM/jNzorsXkOUez4lzb7QkQMIGWUAV
gtM3JhCoGwmQaAlbPzbe736fLEBCtrund9/33Ihz7kbsrNuWKKqyMp98MutH
ys8z9Gm0HO3M5ejzVWkOJqW5DJg5YLem6+O/6Mk6fup6C3qPtgq8rvQw7R1m
naAIdJ5W/06KmZdJc0c+BF78+aqIOvbBhxx8hR/iPtpPZcNhIylMrcGEZ0Ug
aR2HGb1AyoYTngTW0Vj4WWFNvLvhRLL2tmx9vrKsQdafMHngMpvPVX474UY/
kLreJNWeXWZtTJfbsyy49Xkkz3Tz6E4TlauaOcnjMU+Nni/Jn6/6dtrdBWqM
FuzbCes2LVguM7Ys3y9N2VAZt3sBCzrmMLNslXfxxmUsdb/Zrm1xtfh8ldir
aDdPZdWe4hu61XHzQrNUmTm5ZtkD+8aeFj2WGisXMsUorImy3Vtce+KrIuFH
vvWPNCL0gU3YvunDEn3Q3VUvtWV+Y0t2j0t1C0xGqz0nzo2pveotZmqx9ZbG
dp7bn69GTp4sw9QI8bRlS0Y3YrHrupPuxIs1W7IGp9+nseao6s5hWn+Soz/p
9jl0o+5MNj5fbZwjD6BRk+CYcCaPbh46/Gh69oR7WeiosjRTSjcYag/ofT7L
4uMkn2wibpiWHDtBHmRcKT9fdaG3i5lU5I6338ZTYxm6IzlWuuuQ3XkTKf4W
TIu+xeS+qcY9k/PUyTSbS3KfsXgw6ViYfe3zFbdTo4PR9AMlPmD2NPxu+5I9
slXtsZrNxB6r0JdlotHcTaSRhNG50CWVZ6MdJP/5SrOn8cRSs9RXZG+Wa767
7C1nLOi6WuKQfrApX5r5futnsQdL7Zpelk6OXPayxJ1IyZOT7z9fhfjGbaAm
96FuFabbCz31ZufmqTzPtSlf2SHkcetq8b2p7kvL26fo4wP6uIq8ZBOmdxNG
I1IxF2PIXZ2kQS9kxs1Mt/uhVuxNlSsWK0wz6x24ZElzbiqhagf8qHUn0u/P
LNdkf9UbWKS7icPsleMlPVez7v08Nmd5vPZzyOHYS3051jkPnh+UeOguPz3D
p9w6gGGm7A4hNNLhycZ0YNMtu7WKQOmS1aew/oTQIphm97Gc+bOhtTDTYON4
xXPIC3+mlktoXsA9ae9y2LQeDYzQzu1Hf6ntPG75LC8WPFtLXhqkXOElS23L
0+1vfmb3TEg40MuFLRUy54kTpnI5H/LPV8HM1aa+27vxNF6GeumYWrDjgxFJ
1ws7hTubJiGXgvtIjjew53TGih2T7RB2tpkNLMY7vc9X94HK9jbnPku7yWzY
87jGHZ52NybjwTwrHlnKPZPbG5YZY/QZLSRjJzc21tQKzKV29BlGdG+rss/z
0pun6IOyX+MdfDztuRgFNI5vrYxaCKzwyBRvVXhoAYjAjXAaF/7R2M5yaF1p
L3upB/v0O5kBVD9GSrZ01EIB5nhhbg/xBiPM7wpo2dZRrNLOEo63TXzOd1DA
XThEX5YmN7xAtZ2QW5qTWmw27T373j7EDG8CLfC4GoQ83699z/bcLOZAJY9L
sWVxawq5JJx01w9YJGMUJUbBZ1oxDmDZnMfTmS5zJmVHx+uOI219sLwkdbSg
62WWYaXZxu8UnqkkQyahL56pxfrEtRd2J3F5nu4sz546q4zZ+X7PlG7Isox5
QAB21Gz0UffSrkYtmt7vso+5C3Vo3WGu3rkzN9PcXHbQl2k85C5fZjp6Hc5z
7nmZHcxyU+JubwxJe5EqL4Bqa8YTb6ZoPNCAuwx/cRzvZh/ogf3oSuQTG195
DL346cEjTzpZjLPtwsV0T5awOcnqeUNtBYQwgBafr1YO9GIGPHJlu+cAY4OO
tg4V6Imm2bDfbxOntFgqd2yuBTb+x1ipTqY9yI/fm555mJHuAgm6ty5Xd7Fk
dTxme7B0QiiH6xqsYW+xPO7YeVy3YKsTNwOYJmNT4yPyA7aLviheGnuRrO6A
ViNgzNj1CgO+BlEJ0FxTd/jdmmewc6lrzdOs46a2YcLzMLdnwY5uuQK59MZM
dlzgOxMIqNkOvEekdjPO1nvSzRg27K4KC091Jp2mT4kKH8p8WORMBb44fifW
mxZs1e5Bm0Ku2Dt4K2fOM9+BlzGzQIZm9r1U7rss7s+nGvREksZMW9lkR8Dx
0186Nkt6ppr1Jml8Mxsa4yBfH0NuLKzDXZ95dyk/bGVM/bPbKdb3CkY+zPYx
hx0Z7uFuOl/GwUyOjrAwFX3Q5zrvuFqQz1PrYLGuYg/Uo5drur+M8yjXnu47
k+6sYwcWj81QXUO6YVbcTjAX0N/hxIUWqTb6NHqOZU0jfXD0GNgcCA/saJaF
EUAm8WqSGcpMnoC1wcNmZu4rrsrtUGMdR02+3XeC+wdl0nHg5QNV+OgRc20N
sw0YSnZzvNHpJNtIVZWxDimy4PMVoCLhcd41+CCw406sAWeFt5rBk+H3QSBn
hoO5mcDbccgtlrLORIkDh5XPXprdhktgnei1rVk9/HQYy1aY3a61SiBB+5mB
wzgrazVT70yTBzeOGj9Hst2NVL5neXBrappikR1pbOhL0FuDMcube6ODvcxu
+dJ6GrtsM1P2qyAN7gO5YFzit5Zuuz7zj+GwcJg3Onor3jeXGUZUW6DlsKw/
T+3BRNJ8W4mp52A96CdP/DBNdm/4REi96JmMtO4/qbf2mBBTbeutl3Hhp/GU
FkuJsB2ulx3YuzYHS4PsHm1VOnAlWbqp/C3sxI9chU3fgEKi93eq6xrTMFU3
gHcrlrhd2/cDRgLvz7mz1Ig7EFcYgwfa5jAeVPMJm7Yd9IFlduJpxhYtrGIp
WNUtqLaqdjmNatnjwNxbn7F9nBVDvrJssIEOByZxFRaw8s+oBNy6QClrQgwp
hRZwe2sfe3ksT46mcpfNs/U+zssR84wMfADRxMxbbyb5nXcvF3qkFMsg0zpm
Zj+GUjEJ1buNqwQ9f8W6fmbuI14U42GW2Ny/mYGrO8ru2cqgL76fBzeuIvfD
leFEueXPjkYQywXmwaptx0CftHys8gFkRDxu9CARImiN7YHXvbS+iWR8x/ps
0njgnpZG0uQ5XPy+CeSvz5YC1tx3Vnzp9O/8mfeG9XkjxXazxSxLpNmiLBAn
GDy9u5kPJs/RKstNBWx+SiglrE25C2HD3yB30lmVyVovlg3BsZje7ZvDaA8p
y1GegKsXnVgJvgGTVraeFXMdfJd7bA9yvu4G7KYbKndrODgeplqBcXcsLe3M
hvYNV7JJLJWSydbdWV50g9QezwbcihlXJznsqJxrI8RvCcZcDtnU4I+OEX+Z
Ss1RxPaB0v/51lFSCjpvLM88u71Fycjt+cxq3B6cXtzz9K4XrgBIcKVybybF
LbA2egiiKMy4mXSKntMELzxjE6/U4Q4dPm1AqzLUOcyupHDmiSkyTHW9c1fB
cpZqN/aq6PG0Fbzo5S7SjTKov8/h9BC8aG4Ktfl8RbCh2QZMU/Wm8RgmArHb
wVzt6jO8b55vZZjuBp9/AwmE2wMJlW0OmP82ySyLTa0OWpEbZ41eSkWfc1vj
lZOiUEMDlHZcbpVw3qE57O38XE5tfXR0VvHZ2QMaqYVAi5U7fBt9Srsqd43x
PI9kmDLCwMBumbLsKNrU8rruzAMYLHsILOxyBnpchDDify4kOyIU07OE5VYf
bmuJvjDux8f4wD2eQOmGTqrJzsDehUfbsAaG4qP1SGZ7BC6mrVoDVy+9cAgP
tBztZ9MgcSRLcT9fTb8ePKd0XS+2x3qQx9LuYHbWR65m3iRDSKbZAG95EEmn
EEwEYLYX9yfLZOpo0T7EiMyDPbURmgYIh8zvhz/67zLmzkaL/XET5E1jCEzu
+xiRptuZZoZp95Zpu2cm755hNnIIUAohYfhIuIl46XkEJ3LtsmFN0KE6GXC0
SV/gIIN+LFEyQJVsSd1zz1YB1P1p/67DmDDnUSC9Se9Wbpr00IpqaBMv68eu
1UHAaEYS3MyAH133U8dUv27whsOcdbmVxw/zdP+IedHn3HBcZb+PWFIEUrby
0IpVOumezREgxOnkEOl3D1Zu31j5bo++yHNPZggMyC3lCCgT0F7fzIxnV2J3
o0yiYGwLcnCgpAh3zSVTRivpzTPfv/h/rpOwWOXPs93y4YktonHvo/UpRyj7
cfG196VgWXrPnhwr1t/PB6ObHkzi8DQNlHB31zkGo/ima3+c7j/dv5cV/360
v/32sFw8Ls2dOHx9cYNZnQuscnN1JrBOBH5ZfBXraZdHm3+UNPzRfWXnrGO4
ma0XtFBx3jf/ujX7lII8f6tci831deqRLlygjHfdmKh/IFLBX9br+HQRV5UT
F/v4o/U6nccfqJ7Z5VpW2bR2biN8cYHNae3sVwzzt7r1JNxezarNo3U1g3r3
3KnLp7tvV+fy6BcV0S++ff3rL1Uff/ntVDlgtd7VG9G/rDe7cFMfq6DnWgcN
vpeGPTf9ahw2jeOcnr3sSOsNP5mYvay40OxdFGnZelvAlgbfHCqtLyeATH4R
24KaTREvuvmjjK9dZ3zljtL9+H9uytdXtDzIWTl2v3asAaPvfb56mindZeAA
SXJTBp19nCl3lqt2E0u1bh5ktuHqfj3pRHePlCRe9Q6hd3doJYGUWQeEcRnq
HH81smjKs6gzob5lc1Z04IS2kYJQ4TKBoUdaxmeuZnEp2JlZoQfqHUZkTnsB
kxMnzA3PW9qUKpoGnuxQkiXQiwVX1YOXRjuLyV7YAeXsJN98zjdogZJNiU0J
r1uuyzdoAUFNHIRpuvM560aaVYa6Zs209d5LuTXXJwd3ZT9yzVgjrNZBS7Vw
aCR8mqhM6X6+wlOxFg3jKc8nx0CN72MePLFMpKtkJse7WCSbMgejSPws8Ext
gnCpa5kDuMIsBoVX0Uo00KgPe9/b77hmMS9FC27vhlJGXOZDZ5o9cpdzEH9v
BrYC2jlGUH/Ds+Sey4YfDoHznKvdb64c9NGC74oWmMwV+E1JhiQTjpChQMjv
RNrkMFOLjLuaBjmiD/DTS87szKCEFw9C8BXmZr0kPKoKHxi7SdrV5kPNAY15
9NMIciJ+BUnmd12eg/fJ2q29pITXJ9n1IF2dkm5zXYOv9o+eO8JcdId2llie
amwYwkNTSw8mjxczFgRcL/qYCe5RHyjtl8bjmENfpjOtB1n3MHbNi2RDd9KY
hzL8JONhpAWqk5f2jGsdP+VjlvkHlpagyMaQy0HqcfsJ46IkE18feBp4tmJv
wRcYWvgG2TucBzql7fDZgYEHMkq6p0loq91nRqmTzNjEmrHglMSe8FyWHBke
VUMfpGLtsgBzFegg1i71AXN172mB52SJxynoUoN7SPTJzTi0oZjyNAKP9D3N
C9SA0lWhj9mc84Jz6Aj6MOVeOfaZDA6ccN6xh4G3d3jGN17a9WxqQbN13wO/
1mcDtJB2165Xhh7npTW1FviGzvM9JWrB0iySgx6wIORZsHHz0gIzMNDHcKaY
0O0EwfFM33t+lqyhM8S+LZMVhpcGOyYbW1gCRhGA8GOEuqaN0e/ZsDfx3F4K
wqR7K4PPaLliyhAQRzL64BWpCQ2HmoKQxcO5eoe5KoauqzlALg2htyfkBdZm
y6MDWwY2uCjHWyhBKhcerArjDQIvZWCr6iEe2B6COtdfaluwbR5qYIlKonlZ
LNmyubfBERGQUZJ3N5HBAPdeZtkzhkBX2Y8pnRmpJWbTmDKwR0hyS+lN9MmC
pKEN5p6tYE9awf18v4s0f8fTkvDF20suLGumGV6kQpqU5nW15xihZKAZiamt
FdInN5/swEGphTFsaBfLsY83Ls2Uwn0/DbZc17ZeegdJgpW5GkYpJOtAki5G
Cls2MLPxEqOgtOqOaeku0CwXcxn4DK2sMRfcyzLOj9qGD7QwyqyNk3FK0uqU
irZTynFx0oYxcKXvaexgunYAi5ECZoc+JbymoboPwGIffTlAoG4BUI1kngYG
55EcKVx3pgkLj/wRWn8zkSnyiV07hRz17ppJMrfYHSVIZePIPNmO5WBDsrFZ
8QApe45sYX6As3my4Zmto39P4KquyY0RV0poIF7kasz0oHVJMPi0B0qiBYv0
YY8nxpFiUEoeo+pytjQcn9ubUDUycHad5XBFQDAnvQMeGLqbMsy0g294OX7I
xg3mYmyqEpAatqwZj7SIB2zxQvUus6cTheTiZgZpKierdDNKVUO6zE27js0L
iXsFcDQGGsQOoq1vsJ++x4tprJYBeg99TlLIQeNL6Ituu+wIi8Vchhpagd5i
Nr2i78rG0J3GIeTiYTZDR+OI30o2U4EviiT7TNpFqj2FZU7ZUtOBaCVpA1cg
F2G3FtzorBOPeY6wJC+5iRZiNQaSZ7DtEhiHOU3R9w4CapoJxdYE3qSFD0SD
J5kgZrNXBuaq2CA6Xcb4HRoF7bJHpA9eFpSwoyBU7EfgUBir3Wmowe600ZHL
iEk1SqhDNzNHE8gIDbKn0RDRe1524BPTUPZhZ5xBDh34zH3EtW+QrjWDThFO
m7q9DYbQuoWtFWvfK6H13At1oKQKVNTLe0h5SJ4MbznCtnUua8DjHi0/jtEC
+SuPrwxP4Ms3INTK5Bm8SWnZ2UiBZMchD3zEtwHPE0he1q2s0MY8gTUU+Cpf
cwWtp5kdHjPuTymJPYflsxWhA37m3S10mVtuz8PsbzweODw3NPJHtqseoJXk
bWDXydJW9t9czmQno2SKNY1pmcj3l1aKXt9CZ0P04d5XZIvmItYL25RHe64l
QFG+nWTcQguUYtzNYFcOzRGeNFSXJ7tQg8daalNI0sFc7CBxWF7BTX17YHK0
58Abd8VDyMVnS2ttZfEU+OIIfIHPS/SQyZBLAplPJGj2BggEn5eg52vyTXyO
Hjkrbnv63vddbRdl8JlpkdlSdwh8gg8AJ9hEw2TKOwnUiMk20CHQNQezefQ8
6DDkgPkCh7LXfsZ3kK4HLzsFQsFquvdeDv4Cv7sPhYeSAy/WgS9eBqQGP1lq
yxj44k0zx4NesFxecznbBvrdcgbbJ1wOM2ML9gFrnOlJx4fHinVb9WgxLGU7
vjRuQkgUcqDP4XVtzdTijd9JXDPtQp/2nqerx0l+F3BKyx/hNUN4kxG0fgG7
GEIOIScrUGMX+jAlOZhyUM7RS/Th4EusC1664dOM/LYLbYBcItnawJskoVzb
sqzuI5U7s6n9jbgC+jeMh3HCJR8a2d3B82uzgR3M8UYmBeMow4g2FqWRhz1w
JEmO4fPcNA4dFZiaJf2ZHGyhkSk8SBfakHq6oVMLpg6dluJ7IDs4GKVZ7Yzt
OUYVSd0tbPsRvRyzVbGaQ3+A9Q7pdMC4w3XjidKxYVq48EcpVzSgZdczB0DM
XdUHq7ShD8A49Dy+cbUC+nCXwv9w4InOJVmFpnnmCkhOv6d3/iSzF56eHMWy
33oCDgUNS2t9gGQn+1C1PFviN74UpD73j2yVhZwXLvFhO7eG8PyOqcTwyiU8
HvRlP9Ni0od14JU74N43N79LMRdSoCY7/Nx6ZAWrxAW7viePF2lxYvKCwV/t
Ofw2dBp8F96gAIZAJ8FfdG0548GRLA8adQvbZcTC3HyfemAfbp4sbG8nA+PG
oRxwk8VOmILBw35lJ9TQwtBa2rLWBfvcuTk49UCb8mPvhi0/7YHk25km5PDg
cUQWnoVYhBO+bAW+bEkOXn7HzbSARsW6lxvEfELY1RgeD9Qn2AKpHXAsBqtw
bNk/2NNkYSrQpywgFgess1cxg5yP4CcSNIphFCSHKZ6ghTswdO6Ak0vetIBf
nOwsHtNcuqTz4F7fHFrGwTcw76BL0CgfmgasT/rBAFxc45uxl1gz1ZfgLaS4
QnLyaD5LucCjCO82aWFKFrbJjWEMX+cNwcHBPoBcT06OyKvTs3lejCcK34ad
JHSGvS1f9rZAKOasLOK7eyA8fKOTa34w7CE+sjeQLOIjTsv51myagLjIG8QI
YESZC59473vdfsitaQTbnhFb1EuJEfcG/4DPQ2QAPvscg7275D2mvQFXij6Q
egu9yRw1QFxg6zaxo2XPNr27LnjuOoRnYyt4WM9WgwHsyCNOjVEk5rB3Sx7O
pi0FiAvgb+BFA8HivZQYUAEuyiWWGzrsnZa5P189AnF0igxCYkDgCNSiqxjU
wtLOAoHUtkBq4KysEQ8khq0LHthJpi4tV9yDXehtJmhRaxk41IkJ2p4HdAD7
kMkywT6eEOVNuYooUZHxXdIXD9wE+KZCDj2T++T5gVA9MFa+m9PKUgYWdAQT
HFgCXxA/IfLmN4LNIpZ1yAKIvw5hhetQkvZ8ZXHEBQXL9/cz2d8hulnC8jzg
cjrTwUVT0lDyFQG4QvyEKIx44OeroZfa/Zky2ofEX1y+BisP5ogegJPAXa5T
XOCl0nGS3sEqbB0aGcw9bRhpHFyUHTjh7jqUbSAUsVODIoP7CBKGPozBoYBQ
+3Woq4iWexQPIT4iLmpvzwwIc0nbucBAsxCxggPZh8T7IfuKheUlsDegCAKz
iVg2Jw5l6ZwsU0nAROKdk/MhmyaEu3nySPpB8dG8io+Cy/gIvoPiI+8cH5G3
icA+GKEsLc26rtddx2QXrkAoHUwxJB6HKIiWAfecmGBGTJCTTnfRAlhtsDGn
dgp08IWfBoeKSQ42fD+xMHBYoCSiYczFBhoFTw+E0jMHOvwM7Q8divKyAJzc
3hJO2zJZY6iDFKTZDVe6hJplqCKCUjVgnKHNwaE8xInQ0Xs+LQyLZ56b0QaT
ALyTyRP4dmgkRjRT5a5LW4K0eDRZAWc54kRYgafZG9JlRJpkZ44n4qPg0VEL
uNVu3+YZGHfpiIhPBoZRtDuMOxn8je2BrYID22ySaw4sU8G/x2AjurMM4DMD
ylxs5ojxLVr3kBG70OaEkCnGFlo8na16Cc2/lWklQj/y/PeeiGYMiis5Pt9w
Yh/QZQ/IBSQzwOp3jBjZEOhHjDhB/GPEMsWJfAHPbwM/dvC6ZEchPDuniB3I
+g32TdowOmuDWFHhxYAJfFkfYZmIEwu3ijTpGwFwmTu+J68dipDTmPRF91N7
TDNB0TJiPOqLt7+PcuMWGEcIBIuzxxMZGpVmYMSGjxaciFbO0hiWGZBlhm4q
lyyFF87tb4EOPz2OEC9TdINxDgQDUtS9Q7mNtJi6jO9seDyTAZFgllyz+6Gn
3dq5FtJGHB89EPkXYL22CJW7LteLMfjKxhrCblLyuvF6Thtt1JgyFxJF7HjD
AfEQcSpEWiL3sZlrFAegD7LnGpJDcwVfHUKifPlJJqQGOtjQp04TH3mrADyu
6HBwGoqWnQzxEcdMyzyNpUjWMNuBi7lyiBmKyEK1XHNg3/osSblnENekyKLD
JERC0Axog2PquwNXiL8wRePmVIPn1lxgHHDXLsGhiIUR9+wj0txAywPoywCW
mXp8fYREXfRFo+gGfAbeni1hCxoQB/MP1ObuEtqXgs/KtuPm6OM0QWxiD2kU
tFAPJumAxcsU45neCBGZ4HW57frAjznPphYrM0R4HXjVe/A48Lwes1n3Ad5m
TLEJyywLOq3BKvo2xhB1slDgLkV5NzbkHlQR1hRyGBNKQj6Es5SH0mMgvOUV
npknEH18tKCBlAEDE4IcaeEbsQubkJ0w+Rb44lQ6GXjw00PYMqwiIK9LPnNa
ZSUpd4aZkMA1GYccA2JBaNPO76gFCbNehsOCY67ugd37yuPF2UzjFLGDUQfk
M8FWu22vS3aUErspHMym5wHb7U5vyBX5PsI3wT0T4MstZZFcBRg/LRIb3Are
JmSIlk3E2ybpCyLuEghAGT07AH+B/4EVcOuJrAI67HER3dhbaGFie4iAU2Kz
fAs9s8yMcooYEWZvdCR2CEbzzF2DMjjogzXFz3vRB/A+cKwl5mJD7GOuMfxu
EZcYwWrwFsqeT4D/8LIbRLsb8DhugX+bWkbsIwUn31gswJTAjl3jhsGuEK0C
frMueBpiXQO8D3OE2KK7YWngccWg3PEC7EPkHTj8trsyXNr6RlyS8po8LWFX
WQd9W1NUhhmZCr67YUdYuaKNXOgk7EIGOsDrxltvKbb+waOAk9P2C8I4zyY5
pZRD9NIuh74MXRE3xmDp0GKKjxLwuKPpTfaI+qvoBrZtEtbnd+TJKLfaBYdC
33rQJ/sBCAcpyOB1YOVZKEMf8r0Dj7UDKycO5ZIHA87SbMI2oT2IwBhYO3wG
/FXwgP6kjs7htwviL17CPK/E7FnwUBwxOyIoIPqc+4dYLz0zlW8gh5SykizL
PBoFWhBWEenCKj5ftewiWMDyHB+6HPN0L2JVFhyIw3GRf7GB1JyycRq46AaI
lpiSoSK+QpQFVrCN1CC1VdJqm2OWIXtrDCSCx+r24a8gSZks0/Vps7tG2TZO
Gb9HyGo51yeU3VpZxOMAiPEYCDWN9DIBnkrow9ijzaWIImzVSLguj2MVBDGD
T+RADop+UmlnugHF09PeGB6LfA8P1Lsl7AY8rLuFpfFZJyO//eiyIJhXeQcP
mPPMOsU97Arsw1pgDLQ9x9Xu4fvhb8oFIq4jorgtz+EtSA65Dd8T3GOkG8qT
CW9Dec2c7ArehsOKKQ7QJ7RqkZeEu1PKpDPZgteFl1G2MvgLSR2cvLTgf4Bx
MT5HXDCETsM/wRJ3DnEGQiiHtBpe9R6xKm0ERnSedBBXezGnmD9YAJHGlD3A
TAj+Cy8rGFCc2UBZjAh+lSJyaBTlX+ATCSUxStIHbcwRaVJWSSeMG+1nnYS2
lBY+Yv4IXhja5SDWFetHBaIs+Jsl7MlDfOztNbBEjEIjFnakzKhNm49SnoAB
AR2gf+DoYNjMljJEy2hlB049HbsWsVGKF8fEVhlJkgMdMiA7RexpQBHXN5fH
N3TtqYco0ZZkQgd4PFo/slz4ldVkB0l5sAuN/DC85pi2Gk8Q5YFbElpwSNxh
WibydfBmnGI4zOkt5gpcyiavCTkgUtCcrLCETkJOHKzeIQRb9WCJsoPIbhvq
d+DghItJ6mmWBv/uYa4w09AHeM0YmCeyJ5R3oNUf+MRiaWvGI5eSPoPWO+ld
NuMjBai5dXJDtV0ezlRAmgqsu6c9ILDSAPgr4p15mn2L9Gq10FekLrjVFF4X
Ng+SpWT3M3DH2bFHWcmxWMlTTPiAGcmhkzyQ15wptLk4ZtCPkDJ60L06K0kI
JREOTolDmbr9jLnagxc9RXr2+cqiuNEDzoaYbfgbB/E02Krdi4H9AmcRu3F9
KwOhyvjYo3W4DjBuHGUW6DQkv0JUrhK+R0BiyJryLYwy5bQeQlvTiTP5mEtC
dnAFjuiH8rtj8JsyROTB87sO/Pnnq5swlad8ZQjs912DIkuP5XfERoeM4sYX
sQlXLI3yd+aAq1xg5Aj4wijS5IVYu8F/jdcUPhP9FDlmeP6Of9S2wBfPzcsF
mGKXOJjwmbTNjdaPiEPdO3LBq7UbI/BTyqaBfUwTYqPgdTIYYhfsJKPIAnF0
tJ+nsseIa6SUOYE2wWuSHBCjEc4yeCwme07jM4G7sa5pFg+mYMS3mEsd0dCW
YtkZbU0nBu/Y5LFWMa2XdapxGgKpIdkN87Z7iqg8kaXWbhHd6DznU/DhzFb2
UzCDZ1gurQfQRkkWHJlSkL/ZQEdhiMaASZAkFzwOjNm+pVgXfqtEHxxovUfc
AYx6wylu5GDllDcIEd1MWxzqPsoo01U68BaI8Qs9VhAFDy3m6fYjtAGISetH
VsVfaC1vTXwRs3mxludUa3kTfO754JLgwxaty1ImrOIOMSzXoNVE2FEIxabc
BWTfEZkLsY5mLGbTr7TqodPeN4tBR1mRwBeEINtA+rvMpihRp71x0LrhXLWq
dTTygVzbRKTxU4p2uUN25U3jzBn2xgwWGWf8dpLfUVZbhu13Qx4gsqAN9rZa
fANSI3rh21CzLVuJu5R3ACfXo6FFeSuHu5YDfdIhSWamwcjlkQz+BYTKaIM+
+iJ8HjdKgLxnigMZdj9CC+BSLMzQ2qrQQ7AwxPxg9SOFKxIgjB3daQbuncB0
YY0d4OgGvj8xZUOhuJFJMrgD5mGarMnz+xU6LLhE6NANBX9Z8QCR6oMPnRda
t3Ep2iXLoshAplwYrQ13v0Ff7n3u7/D3hcmNISIL8LgR+WXyV1MfGoloFxys
oDgAnJKOtrjEDLlYcxj7XqnNaVMrzEbk87hNWQNo/SlrAHSwK41Mi2r9yDM1
Wj/KQkffC/5C+BGrJZ/pZeUzxWqidl5NzDXdyXpOlUuTyR/JFHsYIlYFr9/E
1doNoxxrg1CzAd7ZAY8TSF9osWZ7Qr+U0gsVWj+CTmaOFvi0uhxp2dZLSwt9
6PqwvFA3hnMNs6lADjy+hwc7gkk6c5HZAK/LSY6C18HeXcTLphzDMoXHOlI2
DXireXlS8bgfRzdABuAmfB7wHJpHK/3o5T00iqTKKb8Lu7LnuTWCN0OkDj8u
B2mYc1p54bOs2Ii8931MWaT8LiMkBjMdg0Nt7aXFEVk8450OMEnl4Ldz0g3g
T0zrR0OL1sgZegAvjL4MzWlB62Qj4nEAmC2xcp6be+iH49G6Cae8+Ncdrbxw
RDdOlrhAyYRW0Sx4/lDXPl8t4SU7/qpApGlQTsib6ckQKOlF+AYYEIdVbKCT
Y0fRhsC4wMyrI0C2HABfCsiRmAcwbhOy/cChY4OKDZhOHNOzSijIYwg08Fxt
h7jAh1ddmAyRxNK4j6Q75q3gXvR94NFR0BSsykd8zMGXiBH1Y4yBjjpyLT1w
xGSRR6tiwBO5cLylZcC70u6WMVcRP1GEQetHe7AHcCSMike0Yb2kvSdAHyCU
PHbIT+Xo9VF7CoYFrct2nWXme4NP7QOm4HUvjpiW5gD/LQ1mDqJb82jemkv2
hL/tLg+Y0h6lm+b4KHiddxCHDgZOdehgGXkXhw62YWpZ3zl00KcjA1GHtoCf
jgxIvONQLhMY4TKjJ/aTMj4IOjGx9a2tjw4mrWQeGe0BBvPlzYGfz1cm5eZc
0sWlFszS7g7xMXTAego7iTpPtXHr+Gk/PKoyItQtmBGe1yx8Vm+Npw3j0Ef4
mX11sOF8SOitI0IYrfzNcW06fHrrToueSb6xPiSkdegQkaXKqt8p8Ds8vYJx
MzHuvxo1bY3/63H/1ag/X/1g3AbGXYq9vdWore+NGvgSyZoPziBWtjH+wFFP
h2EGlMhtHY5R8TvYq7aaMKaYA+3xXrn7NqFjqQdw2o6lxAb0VrP09Gjp9iJU
LYQXUSfM7yjPvrOGiTJPA8nVI4Vr0S5Uu6kzDCa2ZuFbkIvPOtl0PLUPpqR1
Jso+nyh3KnjT3u1E3TmTfSvtPrkshpzs6rjHsjepDkIYPQYuGihopeey0U29
Y9mIZS2A7JMJC+4tKZFYJ9656h4efQ0GXfZmmjaCt8WI5NWDVFiTZe98lGLF
eNyfZMaSDxhG1LW8acB8KZBCJTjEy/iGu7EaevIopN34zUEJcGg6IuNIdMQk
6NARaq5PMkiODr6xkg7d7uFNvrlyzxa9lrrGhNl9uzrWsHPQcqR2eZxp9/YR
fnocqvvFg8IlHzbtqoin3YD47cg9xkng/b7jWXZjDpPORMp699Lv8oOcglV9
3fjp6DAejKTYA4NPXFlLwGuUQNLGoZZ2Ke9yrxSHKLe0OC0kwhFxtkGKq7MN
i7J1toH7M532EDzQ2YW3jvTl9TmBN04JgFf0J+dTAmAeDhBzptoLc6l1PLAb
i12efsAoe3M6ppTe7D1xiLIYAuGXs7y8sYdFzyUWVB/+tixx2Jqzw2yAWEgl
n63e1NZGB78MsrX60KA4AuTo1bGkCTF4K0xTiQ6gz1n3Fl5hKhBgeoEAXXdV
VKch6Njh61F+vnprnP/sKClj/Xqc3xslmKqxao3SqUdJdpTvf3T06WcOPmGm
J9y4n2TBc6TYD+jxeK5nk7maKCEL9k6nUGeDLI/JljytjNTA9uWkY7qjjs+6
z2CKR6d/R5Hw1CjnqdVzBmbHOppH/2g8+1lvORsGbpRl/Rg4A4nYsa4qvlMu
3zj4hDn6i6NPP3PwiQ6Ji6NP2u18WHTA3nfuMH2mWMCbFkk4MI6ma2XczVZ0
uub1wafuMSBkMIF4x9idyLOV3aXjfRPPZgHTenM2uQmbY4YvDz5J4uCTTQef
nCnlMRGrh07H+man3UEkFQ8B721tSe65Ot/xnHVttuu4+Z1kuaocd5KSr/g9
pFBMaB0fYXlIx+ncSNpP2YDfMFnjppbs51mwH2sZ5sjf+5i7eRrfzgf81s3j
ZSR2Jp8PPr117OnHh56WSXXWN9cuDz2pCMFZCVcB8vz2oadV/N1DTw4MYtI6
nTijhFvGWVcBce6DKJPL07mqscbhRZKswnbg8CwvpNPCepkgROkGZIKq3Kvv
PqCznKu4gwDBn2mns4IwV7tzPmCkrYWTFXdCBC/updC6cPMYEd1MMZlmAIru
6V6K6neN7qXAxMsIaTXL0cvvjRIU/I1x/rOjBIi/Mc43RmlKsbTvnUdpeUwu
psGwR7dviDRvYgRyUI5dDcQ42fpK1sc3fHupiXOdDkI1cW592lvMPGvFjoYH
8NLD6lTtCOr9+apWcKsHwtNSeLvHPEtlIIw2M/D63XMkG7k7yLbOiuszvnv2
lRtKLgwjku5k2r/bx6vexjqUa8cd7cZqd81T+xlhSPRwjB9Yv1QAx/4cfnXi
lN/YMthYKyNx3dFNkO2exVlx7V5O5HDIdxbC7TkCbmigNUvlwRluv38OeD6E
/HQABEG6Y2o9kAm8+0wqoMPa88WxMnEnhrqDK7VszgcOS8b3Hd6b0WJUFvMk
i+Td89yb7GPZlMxsLdlacm+pRWl66iY4Wn4oF6tgmbBQ3z9NEI1Opj0eu8Ex
WGVLm5IWz/MBwqAsKYNF+TAeRlI0CI4siw9hru4ZN3ae++lgLSd7R0vvTq77
ZKF8JZzbKxudpN85lvh9C/3/WHd/aKHiHPIrG/1pC61HCZv+SST60SjRyk8i
0Y9GCQr+HST63g0Ab53/J3edZk+TDqeFrmOgWGPrqD1DD44mC4ZkYwiKVy7v
PYeSvAsy84DPI5DKruNZ+AmiTbdrWHaaDPycK84SLNP9uh+7fOzz4sHNrGdH
+3SE3ZjzKe+Hg0QxIekxL+QwM9gkteGksxN55uiZET10YhteAUgk7pKhgEJ7
Sd7RN8wChY4ILc831yCshk3aXDL6bFrczFfxjq165hz48T2X/QYtJZJIhxHr
o4iBboyYIiu+d/ctHPSKwCtDBDhjfkxsU9+7M30k30s2RgvZSN0HXx51Ym+P
gDjWYyNQ7N18GSxY6h9sNSgjPbufgeCbadzluXrj8ziNlf0okoBePA58KZWY
Gt/7eURHEaubYbbBm0cRLw4i3n4sO6vfjwcEejcjU7lHrPIne1bl5Fh8vLuZ
aJb7TX8/PLqb3qRUb/68eX9wEIMdtLiTPt76/VWn6/vGx8N9pxt3tuVh/edh
vXj8cv/puwcRT2fQfuYs4l8cIPyp44jnJ+vaY9WpQzr6RsfgqmOA78QNiJd1
fv65C9FeVUl74y1//ZKfO4x3/d0zc/Vgq3Nzd/Lt//pjc2+dmPvRCbnmfNzn
q//MpWjNlWifr/4zl6I1V6J9vjpfirb8+mQdR4rIWa16xSyvLlWaKXISejcv
rj0zdnRWe8J5CfdMsebp4rNoF7C97PTL9sVnP3Pt2eerv7r47GeuPbtwXskj
V1XZhaOgONN1LWueFpXzYnds4tIxCE55JsuU5Ftx7ZnG6dozQP1fXHz242vP
LqNnOved76vrulLb/ifP1CPudZVSCWV7FLuJPdMmRziQe5PuoHKjDe9YI1cZ
7ThH65JmxmqEWIY/gFZ9Cz1+Yw78Z0ZXTgQW792HnqEEUsImi1J/kDUW5nE2
U5PhHCTV6fQ6lHvzO5Y797RvLLP7tir3nSraTsVanDZZ0Nn0zIITh2z8m4kE
JzCN1aAmgEyFY3/b3TTOhiJ5HVSWybfMs492/+7bw6Fcef3f8X7jHrY0epCT
EsTijdxnPHZSuoIMfemFFJUP4VYOpeGqcZ+pmcSUr5K/zKaenvjuiq8jbk2s
9OvGX9yZk8NdzrNMDTNVmYmLY2zKla+4M5EQ16/U49xL+pabMA98w18Vo3G/
fJzpyZRPg8eZZqimHGgRs1Nf1jp0ccy/Hufl5S2xSK5nF3EemE0/TK2N9/04
75+53EIVnPA/e7kFXeNAl1vQ7YB0W+CjMJvMNkxV1mcyGapI72hkVlCGMX7f
uWILtX1rsz2goDyliIkjg9CnMJPMblJ6wsxslV/0gbmj7hxxjj3twQStJtkK
uImVuLmson7CXphSARgKwji3pwjqEWNlK0rXznJDXJcxZ4YJrk9HV9iEY0R9
MLhTktCpbuo7/U4394HxDiZMcyfHYAFQ6808vjd50LHyzI4y4zimI0w7L4s2
lj4CzMXdQJen0dEYQqI678SLEO7BzLuGp349uh1t5MiBPB6aB7YKCqjwOIRa
OXQ/Wd9RE2mS24Wd8tBbBQtLubshrvwXtwW2EyGfr968A8Zx7YnnGTfx0DqC
XR7Q0g34oDTP+DMD02MdqxuouyOiSkihCxOPdWs89hDXacmkipsCw19az/dS
8GhKBoMLMu2VlThZ4WBmU6tTPMZT6wmtRg8yeKyCOdIcxTjC5AsOM5k6cEXe
fkVOzebgxa6/+DJ5i5ZJbq+bbd5HW3n5LQ2VZ2s2yTuznu99eTDi348xvx+t
ebczXyv+V2fkru7v/c9X7vPQZDtpt7/bxYcniy+t9aevD4etNfqqPmdRVva+
fz/EiY1V7OVtOvaKSp04zr/ExN5V9Gix3T7N4xN1qeqknIuJnfnSuRDB//4U
7vvXHrQpXEeS/v9A4RgzFs7U3FuucQQqP/Nj7My5Znqq9Rwc/4rCpaW4wQwU
zrw1jxEonP9kHr8e/k3h/k3h/k3h/k3h/k3h/k3h/kspXDzMduTUzi5S/hZ3
zE24ssg1vZV6+3z1Fstzkm/e70+anT59mo6Oy09J72a2zkxzFUf+R93/1rmf
re9uDs96ueyHe3XaGUI0txgEc1Xjz/Qpm8j6x8EqZDeLr4PHmOllxO8e0t0v
//Hup9bY7G8ig+9dGq6npR0zNxZe+l3DrXzLz3oWUtDv+5bveBYtq7zb6V52
GEvrZnY9PvZuK0OlrTFQwJRJ8I/3dKGLNUy0eao5jcedSfKAtq0wWvj2aKuz
5cHHSvINoKDnqq2F7zQYR7o95NNkCIWdNi24aNXUDMXPYh1m+vlq6+T79n3i
tKG/uuZulTU8ATyCt3kDFJqPJm7PmMAk0Z/PV4pDl+ZV97a/urWdrpyLjlrK
NF54aWLF+t2GKfbekSM5yLvTSDLS+45Gt64O4inLgzzg8WbuxZmf390HabYF
WBx8JT1Y0/gp1AF2qTUMc3CWJW+2n1RX8tEt4NYk06pL+c5X8vWF18Ic2fid
1troNlRXaparE+E37Uor+hblwDvw3PXaltFHwx02sI1At0qedxNa7/MVWZ+z
vV+xHE0Wt23rxpSv+BK+uwhU8/OVTHfFMskazdLT7fjV3fiuuhP3LqvdwppC
0+RAAmzJ83Q/dZY9c+bybdDaEvPyssCM8vM65efn+j6d5EkY0b2yS37vDoxJ
lMUDGLdr5Ynq8Wg/Z9C6R8yD40/5IlJNMCzNgO83QvA5JhWLQNo/BUqy8GE7
pm4v4fQ4zwEe4ub2Hn4WnTltFw1Nzdqa+VdprmY+5v5fARLoy3ey+NbNespv
fue3T/l2aN6nSew4ueFrJZ/dhl+Xg47yNC1Gmb6//cbVj4NEej8Dxia2fViu
9sXv0oj/qR1k+9N4Ohodt53J7/2V+bX39evPhoseYjaEQQ669M9Gju9+JuD7
bnj5t+uh6z46TSktquXSFHx+WcpTVNWtYrh//K2qjJaUZVGXX2kqFFXNtauz
v9VOq8796dq/qsq8qDkV1hXi6wHl8ygJV4tt/uHq6rEpG3O6Si+dHxA4buZV
saP6/rynVTzfZAcK5ajYX1MCiSporerCQ/Wte1Tkhr56WcOyuvOwHlPdAr2X
6tYsnsPocKqiUwe9rVqvoh9vCPSvS9VXUe2pI1QQqa5f1aq4/OJFi6rIWjwv
qB4R/vBU1LVlT2XD6jZoGOfxf3hj2uq2crwiPNU6XlB9p+hJvKwqkXou+1dV
hNr+cXUlf7j+9LJ+Z11zva7PLCp/YnrWm3guLlCM19SlD9fXniidXFaV6qiK
nKiKRNW6RFnY1sRUtd+i7ElI4tG5f3cq9KR+eoSilMk6rkvrhbvr4mmWLSLS
EDGfh6pQ1XUyzwrSseqNYtDnCxmr0lwYVLIofqTHkJ9SLSQ11dfDqtbTgmo+
vlHO+GVN2UW5nWdfqkJxVdmwW1mh0m1UwJCKs9aDqYtrVcXoq16/qvedhM9U
41GbDCxxfee2nNPlkaIU+sl62iVY39U3dLZ7VDU97SpSlWuxqmkeWFQ2e7NA
P+f1UzlVYBa2M9/WRjcX9RWrYZ+LNL60/UQUIsRj0MMK6OJTacuq6aoMY61i
23cVztVvbRUjFLXL5/uiqcu6nc/fVdeIUk1zqs56rvQtKmVXityYX13uLTzX
1VyXVZnic/VDqs2KVx7q4l2itCGNqXnkRXe211ScDC9OSPRkcoscfdquqZhh
vq6rbL4UCHV1m9RF016Jvr5l9NfkCS/7rcaUNdUaX4tqjGLArZEKqW7yEzYe
hDlty7AqFb0QlXxXZVWwsy56Xtf2DMtL0X9oo8MW3VyJGpQTOxJmSW+vzOip
XOdVMdeFKJS5Xed1vTOIsFNZSP/TqfQruaR2we/dIstEDeLLWpMCZdEqVRp+
Xf/v/xYFADfll/elUm6+vi/D/Xq1zg/v2228D1dRsiYdakrN3XyQm5KK9Wc1
ilN5LLxI9GVFmiyUu1WFtAYSbz4THaofrk0IIqbifZWFxJVAxYRvczRRJOvV
vHEHVIta1E0W1TVfVZSGiTcoV/elEhpNw7mI5KfH0fYCSBcruH5RxnhVA3nL
zTUlT+v6qNSFehhVEdum2KGQyssO1BfzPs9rvBbYRlreBraq7nq7tZaBbUuq
2/vCXKrSw40c6yrI8+tPq3hDxT6BDnV16VqpntcZXR5ca2N4HeFpqNnm2qV2
TFHqcPNHZa3tMUDF5xmJ/oSi58rDVJVvvQESlVS5t3bIlTsgHRVjoeKJT9uE
Br+Z5+vnWssrYkJ6uaggbQPnSw5TeDoqflcp6skBfwkXGSWEPkAVqUZkWA1U
SIE++w9wqJvKVOoxkjiG0KE/rn+Fhv5R15qmCrPVFP9d+Y16CgTMTuXhKydy
J8vSWeU/flCg8teiEi0BU1Vgt3Lw6009cMKoqrz2goZcq1C2qOnF13VdPg9T
OqcagPB9vafyXV09VlTq3J7S7/VbhPqE5CUqV0H1yh9bpaNDwr583iotfirS
W9//fFFB2GSOW03QF9InTFBTDrqSUvPW2gM0V0hvmzp729MUX7RojV3SDNKb
dLESsE31j0X94OtnIMwTADFZb4XlPlVVswm7TiP5u6iK2KqV/OKi5xO/qB3v
iUW1ekJVngU81NxBFIB//2ibp5rMmEjxnt8lKpwr/nlz0xHOpSpD3HoNETLx
htNA4pcjATB3P1yf+0l1MPeYRaLV93AaTCyq/Kres99ES0QcPc8T9ZSJ6V7y
MfINazHHlT8+l9muxvcmG4LNv/pbVbdxsap7ArHMyD3Fc5gVzEL4H5pE9OvM
fM7lg0NRb/eDiGkWBDuC+PbBfaiE8/+k1RwVMdIaQIGO0QRTNdhy/v8gnAFo
/JlUD/2HiDHwJD28XkVzuNY+fN65EPPVlUZKO1Jd7TrehF/Ka+n36/f/18Uf
7kCJ/1u1Mnf9t99hkKdaw//4x0nT/3yKlD+LIgTnE04jysIWhp5YfMsrn4t0
Egne1qWidfuT89h6ndx6HcRZFbg+1fHO1yX51kWtJsL1/FndLv4nlbVtNaS8
q9k21SpuorEmnqoRpgYrqv75tGr6ni1W6Yk8v3JzGEOt+rWiXHTyH/+Arbzf
rjO6eV58+R//mO+jah6FyODFW53sXAj3UbVP6491VduXj0PmVCi4ksZqXVHz
zfz9Oahqtf7xXTMtFJe2anG3Cm+XbxYkJ0T+28uOt1r+vdXyu3M4K+p0khSK
582mHgEGVf3txeiIhREAh7UcX3llUcJe+L3qW6QQZQV9s5ZGvxrCh3M/7+S2
BCq8gFKCHdFbyFe02Qb1KMy2wnQbyleHztXompG8OSV4K0ZXOXtgJTpMiDsX
VktGILq0PbkKmpEvJazC0x/6179Wgqmho7YetJFRG4K0LyipQVGUXK8707/h
SM8Fa/GNnByLKLS9JcdWU8+iKht+loryB8LKojxLAqBVwFFW6C7WkdGRvmO3
nrn5oy3JOZGxdbb+erj+tS6Rfv0MirCeVTP1W+vJbvvJkyXWENr/dImi61cm
12rp9o/rp6KK7luTgFhMzEMHSiXiCEGM6J9LImrEYC/fUk1qXTS+1fzHP2pU
ja8rA6koyupUtv3lzNMbKyJFqgOtyRdboHN82ezdHw1skTdrM02KTiiajFu7
G/DnJivz9hvPLcuS9McZ41bzr1U9+WZHg3j8mWp3Xz7U/cuH5vVDeKqRtyie
MQdOba/ecCEfX7qQ34ULOdnDz1oBPDyVPS+ICFVfPFnSb+32EChuy3PR5hMP
c5J5AcnFp7LQ26aedeXYH21gV7exr0/WyPx0/RVI+jR7Y1C3Lwf1UQxK9LTN
lMOKX4eneu3N/NXIXvVRUFToFqy27m47N0UlmGnHRlWY/l0DeSJlBolctETm
Hz59bVWwvnxv4/cawveyOAiEspsTwd3WldrnRGDDr5swJ5BA4Jdl1PvTnNUW
JUDktZi6L8V0K8TEhOJQ15qcw6maOT4dVcp4Cw+1RXAAsJpfENwGkLYVBhNO
zQU4EbgBGxYC3IpsfaiqqaPFRqVL4RQEiYQGnBuqJ/2ELo3/JjUUylJL8TX8
1HR5flKrS8Vz1P5gZF/Pw40IocQ3fm0j5AU1wuS2rEGUK6/m9be/ftNo7P7X
vOn1LN68nMWumEUbCrN5EoFvfKGtddKOcgfQNnIl0YmVCanOlgTCVCxeKCz0
N86aDPB5ytvk6V0DUR8VvPlTTJN5ikKFU4tPaWl6TRXS5APLOeUJ4Nypdjwk
QBhP7b6vKOj7ioKeX9HFK/onr1Rp3XuCPZFFrUhKxekx5qdMgOT56Y4QDQXV
ccVBRYWb9+RjauveLL4irL8mTioyRySuGcaOkIAWPFZxE5RXuLCnMZbJZv30
Nal95Pb8Ook6K7zApeslKTwIP/qrPf/628uM7VnVH17FK+9qx3WKRZp0TRXu
Vg+cenB7e5oRMqrTwnITuhKNyOeE479WSYr4/Xr1m0BccCYafx3pfIFsk5Vg
C2G2iMOLeb9ti/XkcOjx/qfetbbePOXU66a3lZtuR5z13FPW/twozbTacOz5
ZiNAhNKAVZJDaG33Q/eDfHqkc/cOz920n/ueHopwoF5Uufzo1Fr37ox3Xall
4rNDNchNnaEQizZwgIvj/GKRpFn/OTdz87HamPiSTJx14dPX8remzS2lKn6k
C1ACcrKQspA/LbW9UDS0/Ut7fUgY9y/vrn85tyK6cPp768uN2zl9OC+jDyfp
KB/b7yRf1+yLBOhXGfpa1LQEQet/VegDzVjXPKvSyzZVQ3eFfKq8BYn3NEIx
7ldTX6FS6y/KWRlI9QfzLyL+aHsUoXy1u5qt1yVJt9p/WcPIYkVvP2tip9t+
70tmJ2qVjT5Zn95SsfND1Qv/nBeC052cXk3fKmDcUhaY6IiQ+PblW6tvgrqe
aUIj84YF0p7UswZ3yC4f14/ViOvkdjo/XGLMxfpZ06/wIl9Xc7q/dRQxqr/d
tEyj8zpUqzJTJ3iu4rNIEJgqwff3bZXUoX59edqIlTdEUr9dBMONzSiv2j+v
NROcCA0TFlUtlbxyBtVStVjA3IpV7tNCRbNIQ8uf8LjXsJnry33E53prYn1w
txBrbfV74826eLnACu++TucvA+PWcDqvhtNqYZuQJVE6VjRQ540X7ZRl46Ga
qa9ycdWXkhplxdL29rCK4JhWBEvvrg/zkuJrp1axFkmsc1WVgFp0VeReqQvC
XeNnHM4AcuXhwxs0pPOShtwIGjKidPi8wIwJzgPkVLfp+nqwWKbXFHCJl9TK
pSjv/3Yrv2stcFCFPUznvKjEvirnXynqjWkcC0ocCxn6nywdb/kiFiRgKrND
w7K/R6SrAoZE2+/uyLarhUvBdKt2KCgX4noNUYIntRD2lwZWfqlSD4KctiKE
kzHKZ1d8mXITOvAyj1MlWcDnYTaUnMFbySPjxwyKKBZiEB5vns5OWP54aj8U
NlClfUXrK0opZsJ71yFOHfeGEaUaST+aVn6/FO6JRV6CEWjB+/nqmaCvefCu
xQGWEAi5v/2hikuBk9XCa51aCi/ESknTcr4/i0qRTkNpJULEimnF9/qfyLa2
Z0gvMlh8gyQnykoPiDSQ4K/n/EjlTM4Q0Tjcc37we2CPMP6/V6mm8ESqTtsM
zpB66tev32tIqSXxhuP47cTFN+3Kj01C6wfjOAtQpgxAQ0ni2gmGsxnFHrV7
qqOoU2xwzj61SJiiXDKLPaVlWqsm0J91tUGkMWQ80xHZHKHjh2t8s5hfRBKt
GKHCosvg57paPRD5pItQ6g3UUV6iTqcVwracKxFZsojrX6jx2xtBQuYxqOzT
/H/8j1+EwPfd6HodgS3W2ZKTk67yymjC4fo1AKgAPpErqzeanOLQi6irVr8T
NREVUDNaNV9dJws8t4mSQ5uotpZqKixuZcwXF/npN1G8HSb+MxKUX0pQqXC7
NupuixGc93q9mfQSoHoRpP+V7p8/D7+WfxabPcZ2LdYjX/LjnDKlFb9ptrnT
0tPFAv0PTPaqzbgu6amY+h8f+xFfaVTpoqkqKDkTDSGCBkS+EE+o9zaJzAYZ
ReXQw+ZLLx0TrYysrt/g4D8Yn1yNr4Hecw6OJqPevdVGxJMs+47deP3W+5qx
xJUOE0RckuQ6+1Qt/2fXZbj5Oqfl2brC7DlBW62aCyuBwbyOXqql5wacTpC5
vtiz9iq1T5ORi7X3KqL5coL9djr6LYoivVR1+YWqN4Tk1VLXaVtgtXa1+o4t
vEhDNSNpDORUjviCWGJgYnG5riPcCilfUoJWNP7SPh7Hj69ev71g/D9hjm8Y
zgcSUK9Bk8bTg6OFlxHVTuyWqSbyTec1rzbyxPNsIfxG3dnGk72h8Sch1Yrw
K0ZAydVNuBWiEFsQrh/v+87fZEkMbyEioKqp30TPB/Nosa1XNZsFMHqWTPLk
Tr83m9XknXt2PmBYp8jqOtHn5avrT9sXz5wZhtiZIHZztZfOfmwcAI+IGGm1
RWz2tMji6gVio0A7dmo2ttUK8VRum6WvxkzPffqeZD42kmmU7BIovocHIh91
cjg/HtRLw646dTmSSyOmXN96ewlrf+u2kO2lJSzm5Zf3x7J4Xx4KoNiTCJHQ
w+p7CB2uxVlQ2g64Xn95j/9F9XJ720JeraCKrgzXQKAU4Qxe/Mc5jZhRaHRo
5YfayyCCdpz2JlTAEy+qDUAfrl6Rq2qzXH65Ni12Glb/rPlvs+i4eU/7VakZ
bbFHG79cJE1/OSVbREKP23+3uX11ol8/qvB9rgje5AdfEHF8CFGeIeqN59/A
GTFisQWkos9vf4t85/ZpBpZfJXIJ989r1XitWNcQEqjGdl4VX2zrVGhx2rF9
UZW9dt4NsGeLfFHzgEbCvzaReIaJrvzjKclAO0PCVCjRU/Gh2UtOx5Hpz2JP
7av1+JoANIvev13/2jgcqQKpT1va34RXC5WtUmXNhr7WgiLC1dMiU7PYKXYN
i+60VO7D6Q03v12wlfP6ynltZfEiNSU+ns3LUvirdsR/waBOB6mrHWI1T0JX
o1S08FIKFXgQuXtwBBnZJiSwv/BKAFTy/Kd9FlUIiVbeWENWmq0VZb2X/dwt
SiAQNtG7M9qbJ0ZzIt4vFPufHhz6cwF/52UFmJVYRviZUaKVF+P8F0ZJinDC
iJcWeR56syJx0VORXqVULfzhZhMeqrQtrQJVycMmjK6BmqzwIm94tsFsUee/
SB/pkSZ52zCDy2z3q5bEPt4XFOI7Rxeq1azTJlU0dX7n9gW6tGX4a0NlFNjg
deVqBcs8xfJNVqzGQZFjAtY+NSvtYi8w+ZpwtcjD95svUW2dFRv/dHIG4kkw
O8GIT+/97RUUXSSCw1OW73XQ8HJir6rtShdxQ/PZaxr8vtXp2WabLt6HlCes
tyG9b+Xx2t8pNvl7SRJ02RROj/WVBn3EluWa/jUM4ZxIOXkqcbJCODd0+Ce7
IrC7lUtrpurVLFU5pbAoz7mNJrlQW972vJ0WrQhf3LL7KnHbbJSgr7K+/OFy
Ir/AC8zCGgNeGtdF4lR48CoruY4Qn5Ntt1d+q/0dly0IER8wmmpnSrPOX6kf
GvjeOtavZHfiJBHtvIwr/lPJ8cUbfqvpxl99j0ZPCvDy79RDfEbSa5ChdhTZ
otqqCi0+xzpZnYEp5ytS8e1/v/BswomfNgQ0T/36N0USlsGa1JXo5suOiG63
07ZvfetKeJfTjo4GBcTG9qr1mqvXoPvi8UuP1zwsZralvKt5SdT7/ZYYZ7Td
vJduW9y0mrmX6Wn0l75Z8VOMfv06Zqh1qu7zW7HsdxJfbYZ6pglvpgREt96U
2RsJBsGgX6gJYr6203p5HhDB9JdLIbZpMV7TQOo8q15KGbEFrU5XaeJzT8OG
IBF3p4xd7bgov0z87SDMFzIluhsW26fqKFW9zcAJ3EdikzV6//aWNL+TBGsW
D2ld+rwholmcIxigJYlNGJ1AB7D44Xpc76AQDrHNDqrG6Tlj7KjXleM9H+Uj
HxhGzT6h2lgant1sS2zeXrMA8lsFBBFGyRtTVxNut73RRHz6xylX2ziVyp1C
DK+zDjSEytCr8410ZU31WXNq7a/e0rl+ZA8Pf39kzpBeUb+yPkCyroOY69YW
3RcBTsW9RRfOe/lPXuZ06LEiNxdbgk/CabYFX6zUveRxUU2MxAI/XEV9kPP9
o3PfAO2JyRGbpO12M6BfkotrimpHvN2uo8WLvXdic6gIcIUSCGX5Ej6v6/OM
1ZlRoeHJ4it9LQsPLdgSqeRKIQSjrLVAZNBoS3nrb9SLTXshl2jNxdb4V4BP
vW5yXyH14YTaTZ6mTX9eHEE9tXLBqYT1lIh5qu1b4uDNm2cc39im3Y4rT63e
vEPcj//ufjsP7Q3YqH1clfCudqm0kERsX3qfiSTcxebVL8JJv+rL5ZGDck0J
uu0bnftInappxXccdQ2FraheTHxrq0z1TnEKCF1tU+IayO5Hgwqgz99s9KHp
SOfjb5fBTWsnwdkF/pQtnJz8q1xevdT+EoQv1tDQwJnrfh+Z/jM6csoL1kmh
n1AMp0AwS4KnBXYRZSgtcBe+mDzFiTJ+p98/m1k+76SsFsEWFyun9fq6WGES
2lOte7e3EwhnsBU732m7RJ0TpLNgK7HJfNVaJEID1d66ZmSt7NKLIb/lbqtz
nEJha58Dga+2IhH4g6Pkbe/xoUWWF9vaHMTxb8hvBTd/AZdvtNo6qVF1oXnZ
5b7XU9a5Tara7XyoEmK00/hFcN/MZWMY1xUL+7XK8IhN+CSv367OmwxP579b
q571Pr86l3Iibue0ivD71eqqmKaz/ZzIAI3ofXV49/xcdV5QQBFtUxbGfqZU
f//QeojZI+D/WcVEwJ0hniw3FxvDKb69OBxWezma8b+LsOvVpQIn8t70i9xS
c2FCGab4f5JD41XEPr5KHZtA7UN7FfbsBS/5oJtAONtrb75ZkWPftoda5TZO
PWu1q1Xp0XjxvIjpdBk6IjzV6x0o0h+vguzXU0hK8V85g8KSaW2k4QnVQc0s
jE7rVeftavKHToXoVab+NCYxgLO1tw+nNcl5sQsENk2sRZwUf7GcD2NcvakP
1GCTHBXzYQJAxU67GotPmdOT8F8Eym3EPBlpbbsnlHkJMO+u5x++fqjYJG0a
yMEmxA7G5gxzPUMvjpVcKFLffGwfd6iPKIMoJ0AS+n/xjVZciF/fNahRKUWT
rG8u1qgneTWng5sh9OLCxk7TWmNpa4W+Pp0gTh+JjIhI0tencpoZFvJprdx/
uHZOG6hfbmyh5QjK332prySBR50tVqe7N/J69ZXW0vZ1vN3sL226dzrLAG+z
aMct23bO4kwqLxw/ZWVO1iFmVwS7//gHJZ7v7rpi2yGlRQQzeKYT0/GaDqgT
cd3UW0M2Qp1PO0mixXzbckNiCwq9LKpA/uUiB53DEeegNottcaZt9RxVC820
bWSdCXX5cNoG0Wy6aO1me2EOFaGp977XoUSzBV7sGTtRjfMcvztpM8nmPF3N
8eWqF5fmsX2lBFsC4OZo6ElVaNkTk7v/EaCJGP9iR4vA+fY2cnqU7vN4fz5p
9+LCj1jkji6+0bg+IfDWmbNaZLv1+cYXYa7nqK9e4X9xCLNur95leVJPQqbT
6uWHFz5oFeZ1xqg62141UW9KO538IdEBxsIMg15VKEbZq9PmNUzjtmzvYK5Y
Xr177bwoKLLlLTg6h4UNxjXLpGdEJWWpxIAWvmwX1bUQb9L4ajH8BH1Vekk8
+4OJOFFzcWxQ3LNz3hdSMX5xPD5fbJsDb6TD1W1CpyNGLwhYOzt64U9rszh7
m8ppn6F8S1EcRSJVMCj06NKWxLPtQx/li7sbamh+V6UvTlGnYDMVoTjv+D+9
+EcGINIydS7mbACXqEGwI3abNRnWrD5DITbli9Vfgav1qUXq20NzXUy71Rdw
fKEt8+y8LeuUJRATV0nxe+HGKQq7CAUrHlpD+BunBVryFtcc7Ot7X2r8F9FY
yxG1HUKDSdvXnucHYhbRy6uQpVmPeHdxOqNaH6SdCLV+r5vjyKRbJ5a+WwuT
aGtHYx7bF2FQHQdm85Pom33L66dtO8FWAUxzr3NFk6vrI05bC5p3vESbV54v
EmmOhgzM5tUGqSpypAWwdhdyCl6qFahFfXsTbdghmrcuT1NLfKlaGTtZ4fmg
4eUxQ/HmM6IVYb2eV12rvULkIpb/5FOQdc4oXTqiv1K8hnD+r9Dt/r+i0o1C
Vzznn1bpFwr9366tFs+GI9iIJ5r1UbzkLdL0Zvdmp83WFc7O1nB6RAfpjO+i
duP/L0hn3eZgkAIA

-->

</rfc>

