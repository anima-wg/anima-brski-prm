<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. 
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx status code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error status code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx status code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is only a necessary precondition if the MASA needs to verify that the domain of the Registrar is a-priori authorized to enroll a particular pledge, or a particular type of pledge. 
In such case, how the MASA will obtain the domain CA certificate is out of scope of this document. 
In other cases, a MASA may allow the pledge to enroll into an anonymous and/or yet-unknown domain and then the a-priori possession of the domain CA certificate is not needed.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 Not Found status code to the registrar-agent.
HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used if the Content-Type indicated by the Accept header is unknown or unsupported.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code 406 Not Acceptable as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.</t>

<t>To perform the validation of multiple signatures in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg).</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature or another security check fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is in an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the pledge detects errors in the encoding of the payload.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "voucher-success" / 
      "voucher-error" / 
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error", 
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
This document specifies the status values in the context of the bootstrapping process and credential application. 
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize the bootstrapped credential information in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format. 
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y9+1obR9Yv/L+uojfZzxNIkAw+JebNHDDICR6DscA48WR2
3kZqoIOk1nS3wMTxey3ftXxXttepqlZVVwvhOO9k9t48MzFI3XWudV6/1e12
O3Vej7Ot5Ong6G97yXVeXySH42x0niX5NBlk1ayYjrIy2S9GWbJKD3UPB/tr
nfT0tMyu5D38qDMqhtN0Ak2NyvSs7uZZfdZNp/kk7Z6W1WXenZWT7sajTlpm
6VbycpaVaZ0X0ypJp6NkP52m59kkm9ad6/OtZPtgb387efNtZ5TW0OD9jfv3
O1UND/6UjospfFKX86yTz0r6rarvb2w82bjfGab1VlLVo84s3+okSV0Mt5LP
b7Lqc/hjWExm6bB2H1Q3kzI7q9QHRVn7n0AH06LOz/JsBB9OC3qqLnPXTDqv
L4pyq9OF1YIXj3rJszLPKniOl+Kozs7Osqn9tChhdkc5zrRKtr+FT8w6yofc
Q5ZBDy/ruuh+l15Mu4N8ep48xknk9c1Wsj+f5sMLmtMI+vj8682vHjzhOc6n
dQlPfJuVk3R6Ax9lkzQf46LQOHpnOI6/VtxXD9YEHpmX+VZyUdezauvevevr
6576+p6Z2XEveZOV06y0Uzu+KCZp5T79V02tpnF0r2kcHzO1fi95kaVuYv1x
XtTmI5rVTl4Ni+ToBlZxoqcxgLHWOfyVVlWWfGVn8SYdj/MqG4+zqZ3Kznfd
rx9sPNRTOYLb9ktWjuFcw8ezCzrZK18+3EwePky+/urr5Amc6xU30zEM6a9D
HAtNT4a/36NxpOWoKqZ2Evv4UTZOdoJveZegx2wMy5gcFWf1NdzI5E1RXlau
q8mw/BIv8F8r82hvmOoFNeupvr7XGRYwsfx0XuOVsMtZXRbJbv7zpWs9g496
I/jor7DS8FI1H8PlHt70puPOVTadw1vw8HlZzGf0G1GRhN99T3/8FQfXg8l8
wAeBaM1Pt/ix7vX5vYDqdKYFnJk6v8pwVINnO/effP1Yfn10/+sN+fXxV4/v
u18fyK9fbTwwD3z1aPOR/Pr1xkPz6dcPHpvGvn68aT/96olp7OsnT+i1ve5u
TxHFn6+r7lUxH15kpfftNMMlOetWv9Sz7rAqI6+WZ0Ps9TSvtjr59CyY3eP7
DzfNiO8/sqPYdL8+cIN/uPGV/Ppk0w7+yf0HX0e65QVNqZ+9fr/f/Xrjfm9z
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
hTLfxtmIh8bR5iK9G2avQyB5EeTi0lqgrYsmyy1YNxRDr5KYbiPlVlwM3Toz
x7Gw6A4qdARbSs4yna4B98lq0/GOgdZsH+5JmgAvn9gVEBUZrqJX95QXAhfw
oM8JAHQiHt9/uClVAWxmAB+VDc6Je2Zw9QQkoEbA4uR8DgdlTHs9KlhZIxsc
D90E+nnZctzqw42v1AF8sOD8Gf/+miRmDtFThdeeQzk7bzDiDtnnOL8UxPF0
eincE8QrSli+yrNrgp6As4JhmvmQguKelijr9HvJTlrOMMAHyMzL6hK+2QHi
OAVJUtBiv8umozK/hBdAeb5I59Z7l2P472xem90bzqtKNGXcLU6P5qxlOHln
aLQDakQOVzJGwVBJ0uhXlwVQxZ8vrfCDmmWWzWTwriTthPyEnNcwKyoqqtnp
IKrxKej/sELWwYjQ5vwrpxdVtsJDJbipY6oY3YTV/+rJfdidI/gM7vlTaLYa
p9UFuYtZ/jeJ8GJIDTORuqS2rdIhPrSaYIANvpY00NFyDxDCUF1KhJEq4a41
5YNUYjLIFt8qzAdCEjjSwA8rJhfpT/4PBqH3t5LPf/wcjZaqEPUM54UBOLAo
SfDSnzoBgAR5hVeym+ezt98PJi++f3s1enNQvP1+rx5OTt6N3pz8MtrZvB5O
Nh6PJk82f7h/MR7me4/h+Yvhg4PxcDqYnd5/+GMnf5k/v3h7/2TOTz95mL7Z
nI2+u8xf7Dz/5e33z2c/vLmuT6cn9Q+Tk5u9n4t8f7d/s//Lq82Dn4cPXx7t
VXuTRz92rk4nB2P89uDNk53TB6+vXk9H/zzYqS+PXxcPXo375cmb2cbbXzae
7OXX+Q8Pno9/+H4wfruzeXUKY9r7ee96/+e9Hzv1/u6w3j9+/np/99Xjg93z
xwfHP8zh/7+8ybGfZ9O3bx5tvPj+6c3pg7ezt9+eXPLvF7PTN+ON7Gjz5u2b
0Y+d2fDB4OYHWIcf7p/cjHag/cvN50ev9zbSy4PdVyfj2duNZw+OXj9/+nZj
/N2rk4u3B788z38Yzw5evXny3auNg3eDzYMfOwcHu+OdV683d49fD06y/snj
VyfPd95uPHrz6vLZ1fHrg3L/+GRwOn77+IeT4ebpt/u/HH9/0T/pP9t/NRm9
PLl8/vSHjc0fOzuDy0fXb/sjaGHw+NXrR6aFg+PXz6vXk3c/728+778+GTx9
+/rtg/3vxgeD/skj6PHn0cajfw6OBwcn/dmPnYvBdHidXW72B9/DE98ePDie
zJ4d9DdfH02eHQx2Bw8H38+evr58Pj2GNYVZHLy6X707OHk2P5nOLk5+Oal+
+AVnBGN4/er1OzOGn2EM3x5Pn14ONk8eDjYGT082pIXXm9Dq06PR5Pn3g+nT
/LQ/q978/LzKJoMfO3tHk4uf08vnKbx9MNh4/mj4enR8fPzq0as3o2eDjYNd
+/f3o2dH/f710etnO68mMJ7L6io9Hj463Xz+Y6c8+uXkLZyoV29/uTh5vbn3
8MWDk1/23wxenbwZp0f9zY3T+/Xx2++evYDRT07Ho19eTV6Vw5Pn+webo6O3
k7fjk/v1j51HcG7z043Z5OjNu2r0/fOf0+O9zdH9R0X6+smbVxujf779frZz
8HpzZ78/erp/cnJ5NH42ONnY3Hn9erT76sEB7P6zHzsng8vnD2A2O2/vj25g
957B34MfNgZ7g/6zQ97Ni8HLPpyXny+e4d692tjbgNkdw1nqn4z3rmHlf+w8
G3w/enXQH1/+cH/zzenk2Q/HPz/9+fT120fHzy6O8Hy8/v7k5/3Ju+qH8egN
3NRH+2/Gl69+Odl8M744frVxMT+avPuxk8ITj9/2L/6Wfnsw2z9+mr7pP7w+
nlxuZpNn359MBymsx+PjZ6O/7fff1Qdv3l3CGF/AGKfDNxdlevnk1WucUR/2
4iWse//V5dun6evnD0+/Heykz2bv9vsn9w9ez/b3x09vTjYONrKT/ftpf/D2
5Jdnj1797+K+tblRLNvye/6KjKovVROV2YAkV/lOzESUZEDGBlkHzjmCWzc6
QCgTCZBISbYeN/q/z9oH0MPpzK7qnomJ6O5s2xKcx95rr7XPY2u/vfDS0sNl
/84j2818zpa+zPqB5T2EZeomZboKS4zDsZ+HemoLEb08GukwWPz+gphx4wNa
ubE7xLBIX2Rr14dPX/itV0VGj7w+h/dnhBbRpHhI9SJMht7czaO1L6uXWFRh
Ym4XsLxISG0fCPi0Pb1zYlayp3Bh7aTwQl5Wc1GsNJlHuTDElufMkzb7Ehas
72KEI3s7Z1qlC5H5ca5vZ0Pxx7soCaxJGPS70hLb2N76rhXtxN09ja6MO1WQ
TLJYaNHDVE/X8Oc84dWO6yyGn62TO4+LTv+Pdw+RyfdMiJDnvSwZ9qWwhC/y
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
jGDy+SD9bRDgKSkb2VGZaruD21kdhVnIcQFpZjGAuH431U5STAkxJtPBeJFN
fGu6j233wCYMAhXcHbLI/bYMsn/TMXcMTxyMWrE3STFg+iDkls0Ky41zKMYb
bu1euL57gfvoMcApxggjViJcpAspCVb0JnTDq2BDTVLgyDRIRx4NUg32chdw
U2OauReSmQDswWRw2+FcufV9pL1J85ZBnvWZ6VhjWQzSAHq8A+HoTjWEmztx
DILfO675eY13HGa8J7wyfZzl+yfMiz0Tjh8Y+/2UZ1WkFUtpels/3/MZeiQ2
aT4+TO3bR69kXa/c7dEWfSZ1DoFA4amEsMxAf0O3cF4Cjd/eF9rmfokwTamR
JaWN0BaVOIKIO4IWHROjq6huYk8pPWTx473uzZ3bN+8QPeHBD0t9/fDcWaXb
5MuH9f3TsDC13/r8w2f/k/byYN1t5/yxNzYWvx30fnk3eVl0/ScebqaLdP4M
TrkPrV/94yY1B4NP1dP88e+Lx2Q3ntv6uLmP9L8ur8tssoJ1jq7JCTYpwU/z
z6pI4/U9mt9LH37zKs3L9GO8TlZzyt+fd79+/TB2ykWyy600tEX2lIOkGwoo
M9w8Tp23UYnZT6tVenEZDeWOY7oBbrpa5Wo/6f3y/X+qBfz/akqQ0ZPO349f
XU1+Wkv6CX38uXlyFm/eJfXOtKag6+vjyqdTYUu1/0Z9+Hwv+OtPv//ph7p9
P/xcf1HtpNo1m0k/rda7eN3sf24Pmn38fi72/Oiv+sGoH+cc7XVDLt7wJ7Oz
10VnaVucyuFTQrlZVt1Q59urDJvbbzEmP3zvtrL/t2nffzXlCx9vk77/Rsr3
j3dt0rfIo0lURQO9mnY8HW2gpw7GSoTe9oWI+inXjoH/Wy8YbIM4iBBfvSdE
ZJ4M/ni3eRkvs9X0qAj9c2L0FpFPiWDxAvKoP+pOJ16M15GpP3iawx508SW1
p7dP9OZl/xDL28PjBD1qE0pG0hGL2Bb4rVNMJ6KYdsbUnmLGq44UkEYGRMd1
KsSeWoVIgMOWJ7Ro5xaVHZm3c3fSj7ie+XHpSLlglHSaRFL3KV0T2dVcmOZB
5tMduIyMOyCvnexLCOYr1ngCJa4ypkEm23oXT4A8SqM4z3eh4L2p5W1j2/IS
a7WXufBm9vgQLNmTsJwVBLqdIspVVjx0MjHJTG708K3Umg7TiSjHx8hMH1IR
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
htaXSi7EQ7j8+9R/LGbBKjv6h8/D5OXvabg/3qyqfOk89HZ/j+JHe72yD6Da
x/7GGH3Kf7tbT26P4VxGa8F+DW+Gd9N9+CE212Yy//07jOxExGra8jYTe82i
vkG9iCOpGzWH4DSrtSo8M6hLzqn6zO/NdL6lWh94JtWcpntSt7P/ev/fP4Kp
/D2rvwQC97Re4Zv0ZbrYvdri33R2vp/83TuLuJUqwJ6u40/b91r3/Yf/ffWL
3n9QOZHfUzqSPNtXRbw81RJQnKy+RVyV+K4v+G1Kdl3ewtv72Puo13XoL35j
/KJKM87e/9i5wSvYrFy9tMe7VVVg0L3B7/331mr9XNIhYrrClOqeNIUbz8VS
2tuJY3X/c/PQmx4eara3Bc/W6xXdv5vWFxJftezcjttf8L3u5fe+dQl/XTa4
LvR1/afT03q3qlc0u3Sce7Yu503hR4zdDxeV4OpLzX/45f0P5yuu1RCffn9V
Nq5m7qc/zrbTj6d3Gr9evpOuNW2rIq1nTaHkpgOqWjpV8lLXSp9KUP6P9/dU
lLOe7YtiiBuqBUMFVpoL2K/uWD5dZfoPfP+uKfdJ1+a2lQTVI9qqCFc3tDdl
5+ZLsqLz5HV6r99wWXFRXdKsiiC+MSvnL9Uv/PusUu16Wj3VzaBZ287e57PD
dbW665rWzSDA7Eo8lco1ta3boHmGetWPXZri+2a6tet6B8qO183VrXQcvi6A
MEsviwC2N/+eH9P9tfar+nLzc9nPV5eqN8/c0D3hlwVDTk54fmIHBj4t4uau
dHV6v75WfHaqrEPXkFMZDfR2WszRsL/VBb/UgDWFWd//tJ79fG76RYuNr55/
lmbkr69LkjRzfi7IVdeSUNU5VFmy9oaBQ10bpa5j8gzIew/3eSUMzzcYqKpA
uzn+MN8276WaVa8LZa1nL6t89tW1+HSv/rlLna+6dFXjjhyLrhDeZrPTPfpU
BODiZujrmmRNQRP1oayBMnVPxOawnGbr1ZIM45f3h9n24xug3HkNyl0FyvfN
LcSsvoUYNne+qbigEnhUIaWxWMP48OMNDKG+04JuGKb7JjAVs6oesuV29nlN
V3xTha053Lnuu7rPWl1mXZeOoPu/n9X1zm0BpVcViesxUCr59rZ3WY2Pio/Q
c0jxb1Ulr6+jirpg+QIpf2gR5IeL0gEXt5mfAEO/OT2vmbjGddTkvXXtPryu
oIp4dHkF3krVg6j8E1UamNMd0TMq+nF+/q+n58fnq8Lrpy8puKpSaO1YnCp5
UNBVNdOap/x2PbqnK8mv0W7zXH2YLV8I5dov3l5ESDAkdcHI/lBfrw5IrNlG
c0l4fDWsRB+2s/15qAzt1JWLCuDnG/s/DH6vC3Oe0Lsq6FLtBgaoZEPRFNeo
y+LSD/Hrkp1n/26xqvGe7+B65x//+J91PYm6CxRCTlVKzkB9atdP33qQ0YzE
GzHi56/ruKhqInWB3+/14zyAOgbwhOan8tZJQvehNJHoVPSguXVfNYKqp24v
KIphXDOE/fa9qqjW1l+4uv27/U5HFe9QNn54j09WNay103Ka2zZiX7nD5ly9
oLm7vC64iW6+gTvGa9zpKNzhVV0K5UQQTsXIfqCn33SbUu8vcfE8+1//6wc1
4vve9P1qWpffm842Z6Kh6hDSI3xhvwcEVUAoCkRNJT1VtJBaqoaqdZjG/k40
Tt0GVMTbLd3BM8f31tPscMnjGjOqu0rjVa5OdQaVE+EDHzarQlEFvxm6mWLZ
dBl8fbN78/VvDeE7iIOvB1F/PYhGDd6NY/cuuMa5Nt9VRZYWVRSyXpSQ+rYj
tfZ//nv8efv3ar3/xz9UrcvZV/SifC62c1Io5zxFXbv9zaIaX7ntuzp6tj25
Jptq/r+filUfae3p3RULVcT9VfHOFko+NaWMVM1JKrh0UUfodV3nE3Feq2zz
14z6Oz3U0cMLAIbPLRt/xHTEtYte4uJpNAc+u6w7dlX4GaNbG/LXxfXipu4o
BV0qRRCvP8+21Nem/MvLnAoZnCocKVeB13xd7PajmuwWok7AeV0rULE/Qt2k
KdBDk3FRngLvaMH/sgbPx3dvYYb22tz1V+beMpO6g5jlTWOCqjLqyRji5Tf8
4VU9m7Yv52lubum6YofomirE0lyvdcHK3ypw/FypCpWvfeRp9PTV6zdXeuJP
uOQbzvORBqjfgkob8UHW4msRtVOVVeqpfDOIzZbKCajqh4ofTWPbiPaGzb8q
hfv+J1VzaIkHbrZ1SfG6wNjA/1HXVPfmKo9RP+pn1fI7iO+2rkbT+N/ou+SU
p7D6rdmsJ++qRnvDGmql+VUd6o9tVdy3Sqmr4kKq8mVbfJo++X33oEp859rX
yfO8SOsXEMxfCSA8U/GsxiCet0Qrrhz13KaP778xNL+2Q9Na2TVWfAsSfiFM
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

-->

</rfc>

