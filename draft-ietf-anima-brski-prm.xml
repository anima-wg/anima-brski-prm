<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.21 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-15" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2024"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 131?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces new endpoints for the Domain Registrar and pledge, and a new component, the Registrar-Agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the Key Infrastructure (e.g., domain CA).</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 139?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a customer domain, which may be associated with a specific installation location.
This includes the discovery of the BRSKI registrar in the customer domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer domain, specifically the customer domain certificate, are exchanged and authenticated utilizing signed data objects, the voucher artifacts as defined in <xref target="RFC8995"/>.
In response to a voucher-request, the Manufacturer Authorized Signing Authority (MASA) issues the voucher and provides it via the domain registrar to the pledge.
<xref target="I-D.ietf-anima-rfc8366bis"/> specifies the format of the voucher artifacts, including the voucher-request artifact.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with Pledge in Responder Mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered externally and at a specific time to generate bootstrapping requests in the customer domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>defines additional endpoints for the domain registrar and new endpoints for the pledge to enable responder mode.</t>
  <t>introduces the Registrar-Agent as new component to facilitate the communication between the pledge and the domain registrar.
The Registrar-Agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the domain registrar itself.
BRSKI-PRM supports the identification of the Registrar-Agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the Registrar-Agent is a component used by an installer and not co-located with the domain registrar.</t>
  <t>specifies additional artifacts for the exchanges between a pledge acting as server, the Registrar-Agent acting as client, and the domain registrar acting as server toward the Registrar-Agent.</t>
  <t>allows the application of Registrar-Agent credentials to establish TLS connections to the domain registrar; these are different from the pledge IDevID credentials.</t>
  <t>also enables the usage of alternative transports, both IP-based and non-IP, between the pledge and the domain registrar via the Registrar-Agent;
security is addressed at the application layer through object security with an additional signature wrapping the exchanged artifacts.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar performs pre-processing of the wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges that can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref section="1.2" sectionFormat="of" target="RFC8995"/>.
The following terms are defined in addition:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes a data object, which is cryptographically bound to the end entity (EE) certificate.
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End entity, as defined in <xref target="RFC9483"/>.
Typically a device or service that owns a public-private key pair for which it manages a public key certificate.</t>
  </dd>
  <dt>EE certificate:</dt>
  <dd>
    <t>the certificate of the EE signed by its owner (e.g., CA).
For domain components, the EE certificate is signed by the domain owner.
For the pledge, the EE certificate is either the IDevID certificate signed by the manufacturer or the LDevID certificate signed by the domain owner or an application-specific EE certificate signed by the domain owner.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>Term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.</t>
  </dd>
  <dt>IDevID:</dt>
  <dd>
    <t>An Initial Device Identifier X.509 certificate installed by the vendor on new equipment.
This is a term from 802.1AR <xref target="IEEE-802.1AR"/>.</t>
  </dd>
  <dt>LDevID:</dt>
  <dd>
    <t>A Local Device Identifier X.509 certificate installed by the owner of the equipment.
This is a term from 802.1AR <xref target="IEEE-802.1AR"/>.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enroll-Request is a signature-wrapped CSR, signed by the pledge that requests enrollment to a domain via the Registrar-Agent.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a signature-wrapped voucher-request, signed by the pledge that sends it to the domain registrar via the Registrar-Agent.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM, this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a signature-wrapped voucher-request, signed by the domain registrar that sends it to the MASA.
For BRSKI-PRM, it contains a copy of the original PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document uses the following encoding notations in the given JWS-signed artifact examples:</t>

<dl>
  <dt>BASE64(OCTETS):</dt>
  <dd>
    <t>Denotes the base64 encoding of an octet sequence using the character set defined in <xref section="4" sectionFormat="of" target="RFC4648"/> and without the inclusion of any line breaks, whitespace, or other additional characters.
Note that the base64 encoding of the empty octet sequence is the empty string.</t>
  </dd>
  <dt>BASE64URL(OCTETS):</dt>
  <dd>
    <t>Denotes the base64url encoding of an octet sequence, per <xref section="2" sectionFormat="of" target="RFC7515"/>.</t>
  </dd>
  <dt>UTF8(STRING):</dt>
  <dd>
    <t>Denotes the octet sequence of the UTF-8 <xref target="RFC3629"/> representation of STRING, per <xref section="1" sectionFormat="of" target="RFC7515"/>.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64-encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token <spanx style="verb">base64encodedvalue==</spanx> as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The Registrar-Agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer domain does not offer enough physical security to operate an RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the ability of the pledge and the Registrar-Agent to communicate with one another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the Registrar-Agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as Registrar-Agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the Registrar-Agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the Registrar-Agent.</t>
  <t>The security of communication between the Registrar-Agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the Registrar-Agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication.
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC9525"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the Registrar-Agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which Registrar-Agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use the assertion type <spanx style="verb">proximity</spanx> in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new assertion type is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of an artifact, e.g., a voucher-request or an Enroll-Request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-Requests and Vouchers as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Enroll-Requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing pledge IDevID credential.
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architecture</name>

<section anchor="overview"><name>Overview</name>

<t>For BRSKI with Pledge in Responder Mode (BRSKI-PRM), the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a Registrar-Agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is usually based on JSON Web Signature (JWS) <xref target="RFC7515"/> and further specified in <xref target="exchanges"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments, it may be based on COSE <xref target="RFC9052"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer domain, this document specifies the exchange of authenticated self-contained objects with the help of the Registrar-Agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.</t>

<t>Note that the Join Proxy is not shown in the figure.
In certain situations the Join Proxy may still be present and could be used by the Registrar-Agent to connect to the Registrar.
For example, a Registrar-Agent application on a smartphone often can connect to local Wi-Fi without giving up their cellular network connection <xref target="androidnsd"/>, but only can make link-local connections.</t>

<t>The Registrar-Agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the Registrar-Agent and the domain registrar.
The addition of the Registrar-Agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, wrapped CA certificates, and new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using Registrar-Agent" anchor="uc2figure"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="456" viewBox="0 0 456 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,416" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,416" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,416 L 424,416" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<g class="text">
<text x="56" y="52">.....</text>
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="184" y="52">.....</text>
<text x="244" y="52">Vendor</text>
<text x="308" y="52">Services</text>
<text x="40" y="68">:</text>
<text x="40" y="84">:</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="40" y="100">:</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="40" y="116">:</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="40" y="132">:</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="40" y="148">:</text>
<text x="40" y="164">:</text>
<text x="40" y="180">:</text>
<text x="412" y="180">BRSKI-</text>
<text x="40" y="196">:</text>
<text x="404" y="196">MASA</text>
<text x="40" y="212">:</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="40" y="228">V</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">PRM</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="188" y="324">EE</text>
<text x="224" y="324">cert.</text>
<text x="356" y="324">EE</text>
<text x="392" y="324">cert.</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="336" y="404">CA)</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="448" y="420">.</text>
<text x="288" y="436">.........................................</text>
<text x="260" y="452">Customer</text>
<text x="324" y="452">Domain</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
                         +---------------------------+
    ..... Drop Ship .....| Vendor Services           |
    :                    +---------------+-----------+
    :                    | M anufacturer |           |
    :                    | A uthorized   | Ownership |
    :                    | S igning      | Tracker   |
    :                    | A uthority    |           |
    :                    +---------------+-----------+
    :                                         ^
    :                                         | BRSKI-
    :                                         | MASA
    :          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  PRM   | Registrar |  .
|        |<------>|            |<------>|           |  .
|        |     .  |   EE cert. |        |  EE cert. |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI CA)         |  .
               .           +------------------------+  .
               .........................................
                            Customer Domain
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: Is expected to respond with the necessary data objects for bootstrapping to the Registrar-Agent.
The protocol used between the pledge and the Registrar-Agent is assumed to be HTTP(S) in the context of this document.
Any other protocol can be used as long as it supports the exchange of the necessary artifacts.
This includes CoAP or protocols to be used over Bluetooth or NFC connections.
A pledge acting as server leads to the following differences compared to BRSKI <xref target="RFC8995"/>:  <list style="symbols">
      <t>The pledge no longer initiates bootstrapping, but is discovered and triggered by the Registrar-Agent as defined in <xref target="discovery_uc2_ppa"/>.</t>
      <t>The pledge offers additional endpoints as defined in <xref target="pledge_component"/>, so that the Registrar-Agent can request data required for bootstrapping the pledge.</t>
      <t>The pledge includes additional data in the PVR, which is provided and signed by the Registrar-Agent as defined in <xref target="tpvr"/>.
This allows the registrar to identify with which Registrar-Agent the pledge was in contact (see <xref target="agt_prx"/>).</t>
      <t>The artifacts exchanged between the pledge and the registrar via the Registrar-Agent are authenticated self-contained objects (i.e., signature-wrapped artifacts).</t>
    </list></t>
  <t>Registrar-Agent: Is a new component defined in <xref target="agent_component"/> that provides a store and forward communication path to exchange data objects between the pledge and the domain registrar.
This is for situations in which the domain registrar is not directly reachable by the pledge, which may be due to a different technology stacks or due to missing connectivity.
A Registrar-Agent acting as client leads to the following new aspects:  <list style="symbols">
      <t>The order of exchanges in the BRSKI-PRM call flow is different from that in BRSKI <xref target="RFC8995"/>, as the Registrar-Agent can trigger one or more pledges and collects the PVR and PER artifacts simultaneously as defined in <xref target="exchanges"/>.
This enables bulk bootstrapping of several devices.</t>
      <t>There is no trust assumption between the pledge and the Registrar-Agent as only authenticated self-contained objects are used, which are transported via the Registrar-Agent and provided either by the pledge or the domain registrar.</t>
      <t>The trust assumption between the Registrar-Agent and the domain registrar may be based on EE certificates that are both signed by the domain owner.</t>
      <t>The Registrar-Agent may be realized as stand-alone component supporting nomadic activities of a service technician moving between different installation sites.</t>
      <t>Alternatively, the Registrar-Agent may also be realized as co-located functionality for a registrar, to support pledges in responder mode.</t>
    </list></t>
  <t>Join Proxy (not shown): Has the same functionality as described in <xref target="RFC8995"/> if needed.
Note that a Registrar-Agent may use a join proxy to facilitate the TLS connection to the registrar in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the Registrar-Agent does not have full IP connectivity via the domain network or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain registrar: In general fulfills the same functionality regarding the bootstrapping of the pledge in a customer domain by facilitating the communication of the pledge with the MASA service and the domain key infrastructure (PKI).
However, there are also differences compared to BRSKI <xref target="RFC8995"/>:  <list style="symbols">
      <t>A BRSKI-PRM domain registrar does not interact with a pledge directly, but through the Registrar-Agent as defined in <xref target="exchanges"/>.</t>
      <t>A BRSKI-PRM domain registrar offers additional endpoints as defined in <xref target="registrar_component"/> to support the signature-wrapped artifacts used by BRSKI-PRM.</t>
    </list></t>
  <t>Vendor services: Encompass MASA and Ownership Tracker and are used as defined in <xref target="RFC8995"/>.
A MASA responsible for pledges that implement BRSKI-PRM is expected to support BRSKI-PRM extensions:  <list style="symbols">
      <t>The default format for voucher artifacts (incl. voucher-request) is JWS-signed JSON as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>
      <t>The Agent Proximity Assertion (see <xref target="agt_prx"/>) requires additional validation steps as defined in <xref target="masa_interaction"/>.</t>
    </list></t>
</list></t>

</section>
<section anchor="arch_nomadic"><name>Nomadic Connectivity</name>

<t>In one example instance of the PRM architecture as shown in <xref target="uc3figure"/>, there is no connectivity between the location in which the pledge is installed and the location of the domain registrar.
This is often the case in the aforementioned building automation use case (<xref target="building-automation"/>).</t>

<figure title="Registrar-Agent nomadic connectivity example" anchor="uc3figure"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="496" width="456" viewBox="0 0 456 496" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 24,128 L 24,176" fill="none" stroke="black"/>
<path d="M 96,128 L 96,176" fill="none" stroke="black"/>
<path d="M 208,32 L 208,64" fill="none" stroke="black"/>
<path d="M 224,400 L 224,448" fill="none" stroke="black"/>
<path d="M 328,320 L 328,368" fill="none" stroke="black"/>
<path d="M 376,72 L 376,312" fill="none" stroke="black"/>
<path d="M 376,368 L 376,400" fill="none" stroke="black"/>
<path d="M 424,320 L 424,368" fill="none" stroke="black"/>
<path d="M 424,400 L 424,448" fill="none" stroke="black"/>
<path d="M 432,32 L 432,64" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 24,128 L 96,128" fill="none" stroke="black"/>
<path d="M 104,160 L 184,160" fill="none" stroke="black"/>
<path d="M 24,176 L 96,176" fill="none" stroke="black"/>
<path d="M 328,320 L 424,320" fill="none" stroke="black"/>
<path d="M 272,352 L 320,352" fill="none" stroke="black"/>
<path d="M 328,368 L 424,368" fill="none" stroke="black"/>
<path d="M 224,400 L 424,400" fill="none" stroke="black"/>
<path d="M 224,448 L 424,448" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,312 372,306.4 372,317.6" fill="black" transform="rotate(90,376,312)"/>
<polygon class="arrowhead" points="384,72 372,66.4 372,77.6" fill="black" transform="rotate(270,376,72)"/>
<polygon class="arrowhead" points="328,352 316,346.4 316,357.6" fill="black" transform="rotate(0,320,352)"/>
<polygon class="arrowhead" points="280,352 268,346.4 268,357.6" fill="black" transform="rotate(180,272,352)"/>
<polygon class="arrowhead" points="192,160 180,154.4 180,165.6" fill="black" transform="rotate(0,184,160)"/>
<polygon class="arrowhead" points="112,160 100,154.4 100,165.6" fill="black" transform="rotate(180,104,160)"/>
<g class="text">
<text x="56" y="52">.....</text>
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="184" y="52">.....</text>
<text x="244" y="52">Vendor</text>
<text x="308" y="52">Services</text>
<text x="40" y="68">:</text>
<text x="40" y="84">:</text>
<text x="164" y="100">........................................</text>
<text x="8" y="116">.</text>
<text x="40" y="116">v</text>
<text x="320" y="116">.</text>
<text x="8" y="132">.</text>
<text x="248" y="132">.-.-.-.-.-.-.-.</text>
<text x="320" y="132">.</text>
<text x="8" y="148">.</text>
<text x="192" y="148">:</text>
<text x="244" y="148">Registrar-</text>
<text x="304" y="148">:</text>
<text x="320" y="148">.</text>
<text x="8" y="164">.</text>
<text x="60" y="164">Pledge</text>
<text x="192" y="164">:</text>
<text x="224" y="164">Agent</text>
<text x="304" y="164">:</text>
<text x="320" y="164">.</text>
<text x="8" y="180">.</text>
<text x="116" y="180">L2</text>
<text x="140" y="180">or</text>
<text x="164" y="180">L3</text>
<text x="248" y="180">:-.-.-.-.-.-.-:</text>
<text x="320" y="180">.</text>
<text x="8" y="196">.</text>
<text x="140" y="196">connectivity</text>
<text x="216" y="196">^</text>
<text x="320" y="196">.</text>
<text x="164" y="212">..........................!.............</text>
<text x="52" y="228">Pledge</text>
<text x="132" y="228">Installation</text>
<text x="216" y="228">!</text>
<text x="60" y="244">Location</text>
<text x="216" y="244">!</text>
<text x="256" y="244">Nomadic</text>
<text x="216" y="260">!</text>
<text x="276" y="260">connectivity</text>
<text x="216" y="276">!</text>
<text x="248" y="292">...........!...................</text>
<text x="416" y="292">.........</text>
<text x="128" y="308">.</text>
<text x="216" y="308">v</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="208" y="324">.-.-.-.-.-.-.-.</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="152" y="340">:</text>
<text x="204" y="340">Registrar-</text>
<text x="264" y="340">:</text>
<text x="364" y="340">Domain</text>
<text x="448" y="340">.</text>
<text x="128" y="356">.</text>
<text x="152" y="356">:</text>
<text x="184" y="356">Agent</text>
<text x="264" y="356">:</text>
<text x="376" y="356">Registrar</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="208" y="372">:-.-.-.-.-.-.-:</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="248" y="420">Key</text>
<text x="324" y="420">Infrastructure</text>
<text x="448" y="420">.</text>
<text x="128" y="436">.</text>
<text x="260" y="436">(e.g.,</text>
<text x="304" y="436">PKI</text>
<text x="336" y="436">CA)</text>
<text x="448" y="436">.</text>
<text x="128" y="452">.</text>
<text x="448" y="452">.</text>
<text x="288" y="468">.........................................</text>
<text x="260" y="484">Customer</text>
<text x="324" y="484">Domain</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
                         +---------------------------+
    ..... Drop Ship .....| Vendor Services           |
    :                    +---------------------------+
    :                                         ^
........................................      |
.   v                                  .      |
. +--------+           .-.-.-.-.-.-.-. .      |
. |        |           : Registrar-  : .      |
. | Pledge |<--------->: Agent       : .      |
. +--------+ L2 or L3  :-.-.-.-.-.-.-: .      |
.          connectivity   ^            .      |
..........................!.............      |
   Pledge Installation    !                   |
   Location               ! Nomadic           |
                          ! connectivity      |
                          !                   |
               ...........!...................|.........
               .          v                   v        .
               .  .-.-.-.-.-.-.-.       +-----------+  .
               .  : Registrar-  :       | Domain    |  .
               .  : Agent       :<----->| Registrar |  .
               .  :-.-.-.-.-.-.-:       +-----+-----+  .
               .                              |        .
               .           +------------------+-----+  .
               .           | Key Infrastructure     |  .
               .           | (e.g., PKI CA)         |  .
               .           +------------------------+  .
               .........................................
                            Customer Domain
]]></artwork></artset></figure>

<t>PRM enables support of this case through nomadic connectivity of the Registrar-Agent.
To perform enrollment in this setup, multiple round trips of the Registrar-Agent between the pledge installation location and the domain registrar are required.</t>

<t><list style="numbers" type="1">
  <t>Connectivity to domain registrar: preparation tasks for pledge bootstrapping not part of the BRSKI-PRM protocol definition, like retrieval of list of pledges to enroll.</t>
  <t>Connectivity to pledge installation location: retrieve information about available pledges (IDevID), collect request objects (i.e., Pledge Voucher-Requests and Pledge Enroll-Requests using the BRSKI-PRM approach described in <xref target="tpvr"/> and <xref target="tper"/>).</t>
  <t>Connectivity to domain registrar, submit collected request information of pledges, retrieve response objects (i.e., Voucher and Enroll-Response) using the BRSKI-PRM approach described in <xref target="pvr"/> and <xref target="per"/>.</t>
  <t>Connectivity to pledge installation location, provide retrieved objects to the pledges to enroll pledges and collect status using the BRSKI-PRM approach described in <xref target="voucher"/>, <xref target="cacerts"/>, and <xref target="enroll_response"/>.</t>
  <t>Connectivity to domain registrar, submit Voucher Status and Enrollment Status using the BRSKI-PRM approach described in <xref target="vstatus"/> and <xref target="estatus"/>.</t>
</list></t>

<t>Variations of this setup include cases where the Registrar-Agent uses for example WiFi to connect to the pledge installation network, and mobile network connectivity to connect to the domain registrar.
Both connections may also be possible in a single location at the same time, based on installation building conditions.</t>

</section>
<section anchor="co-located-registrar-agent-and-domain-registrar"><name>Co-located Registrar-Agent and Domain Registrar</name>

<t>Compared to <xref target="RFC8995"/> BRSKI, pledges supporting BRSKI-PRM can be completely passive and only need to react when being requested to react by a Registrar-Agent.
In <xref target="RFC8995"/>, pledges instead need to continuously request enrollment from a domain registrar, which may result in undesirable communications pattern and possible overload of a domain registrar.</t>

<figure title="Registrar-Agent integrated into Domain Registrar example" anchor="uc4figure"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="448" viewBox="0 0 448 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,160 L 8,208" fill="none" stroke="black"/>
<path d="M 80,160 L 80,208" fill="none" stroke="black"/>
<path d="M 200,32 L 200,64" fill="none" stroke="black"/>
<path d="M 208,144 L 208,224" fill="none" stroke="black"/>
<path d="M 216,256 L 216,288" fill="none" stroke="black"/>
<path d="M 368,72 L 368,136" fill="none" stroke="black"/>
<path d="M 368,224 L 368,256" fill="none" stroke="black"/>
<path d="M 416,144 L 416,224" fill="none" stroke="black"/>
<path d="M 416,256 L 416,288" fill="none" stroke="black"/>
<path d="M 424,32 L 424,64" fill="none" stroke="black"/>
<path d="M 200,32 L 424,32" fill="none" stroke="black"/>
<path d="M 200,64 L 424,64" fill="none" stroke="black"/>
<path d="M 208,144 L 416,144" fill="none" stroke="black"/>
<path d="M 8,160 L 80,160" fill="none" stroke="black"/>
<path d="M 88,192 L 200,192" fill="none" stroke="black"/>
<path d="M 8,208 L 80,208" fill="none" stroke="black"/>
<path d="M 208,224 L 416,224" fill="none" stroke="black"/>
<path d="M 216,256 L 416,256" fill="none" stroke="black"/>
<path d="M 216,288 L 416,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="376,136 364,130.4 364,141.6" fill="black" transform="rotate(90,368,136)"/>
<polygon class="arrowhead" points="376,72 364,66.4 364,77.6" fill="black" transform="rotate(270,368,72)"/>
<polygon class="arrowhead" points="208,192 196,186.4 196,197.6" fill="black" transform="rotate(0,200,192)"/>
<polygon class="arrowhead" points="96,192 84,186.4 84,197.6" fill="black" transform="rotate(180,88,192)"/>
<g class="text">
<text x="48" y="52">.....</text>
<text x="92" y="52">Drop</text>
<text x="132" y="52">Ship</text>
<text x="176" y="52">.....</text>
<text x="236" y="52">Vendor</text>
<text x="296" y="52">Service</text>
<text x="32" y="68">:</text>
<text x="32" y="84">:</text>
<text x="32" y="100">:</text>
<text x="32" y="116">:</text>
<text x="240" y="116">...............................</text>
<text x="408" y="116">.........</text>
<text x="32" y="132">:</text>
<text x="120" y="132">.</text>
<text x="440" y="132">.</text>
<text x="32" y="148">v</text>
<text x="120" y="148">.</text>
<text x="440" y="148">.</text>
<text x="120" y="164">.</text>
<text x="268" y="164">..............</text>
<text x="440" y="164">.</text>
<text x="120" y="180">.</text>
<text x="216" y="180">.</text>
<text x="268" y="180">Registrar-</text>
<text x="320" y="180">.</text>
<text x="356" y="180">Domain</text>
<text x="440" y="180">.</text>
<text x="44" y="196">Pledge</text>
<text x="216" y="196">.</text>
<text x="248" y="196">Agent</text>
<text x="320" y="196">.</text>
<text x="368" y="196">Registrar</text>
<text x="440" y="196">.</text>
<text x="100" y="212">L2</text>
<text x="124" y="212">or</text>
<text x="148" y="212">L3</text>
<text x="268" y="212">..............</text>
<text x="440" y="212">.</text>
<text x="140" y="228">connectivity</text>
<text x="440" y="228">.</text>
<text x="120" y="244">.</text>
<text x="440" y="244">.</text>
<text x="120" y="260">.</text>
<text x="440" y="260">.</text>
<text x="120" y="276">.</text>
<text x="240" y="276">Key</text>
<text x="316" y="276">Infrastructure</text>
<text x="440" y="276">.</text>
<text x="120" y="292">.</text>
<text x="440" y="292">.</text>
<text x="280" y="308">.........................................</text>
<text x="252" y="324">Customer</text>
<text x="316" y="324">Domain</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
                         +---------------------------+
    ..... Drop Ship .....| Vendor Service            |
    :                    +---------------------------+
    :                                         ^
    :                                         |
    :          ...............................|.........
    :          .                              v        .
    v          .          +-------------------------+  .
 +--------+    .          |..............           |  .
 |        |    .          |. Registrar- . Domain    |  .
 | Pledge |<------------->|. Agent      . Registrar |  .
 +--------+ L2 or L3      |..............           |  .
            connectivity  +-------------------+-----+  .
               .                              |        .
               .           +------------------+-----+  .
               .           | Key Infrastructure     |  .
               .           +------------------------+  .
               .........................................
                            Customer Domain
]]></artwork></artset></figure>

<t>The benefits of BRSKI-PRM can be achieved even without the operational complexity of standalone Registrar-Agents by integrating the necessary functionality of the Registrar-Agent as a module into the domain registrar as shown in <xref target="uc4figure"/> so that it can support the BRSKI-PRM communications to the pledge.</t>

</section>
<section anchor="agt_prx"><name>Agent Proximity Assertion</name>

<t>"Agent proximity" is a statement in the PVR and the voucher that the registrar communicates via the Registrar-Agent as defined in <xref target="exchanges"/> and not directly to the pledge.
It is therefore a different assertion than "network proximity", which is defined in <xref section="3" sectionFormat="of" target="RFC8995"/>.
Hence, <xref target="I-D.ietf-anima-rfc8366bis"/> defines the additional assertion type <spanx style="verb">agent-proximity</spanx>.
This assertion type can be verified by the registrar and MASA during BRSKI-PRM voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the registrar end-entity (EE) credentials via the TLS handshake and pins that public key as the <spanx style="verb">proximity-registrar-cert</spanx> into the voucher request.
This allows the MASA to verify the proximity of the pledge and registrar, facilitating a decision to assign the pledge to that domain owner.
In BRSKI, the TLS session is considered provisional until the pledge receives the voucher to verify POI.</t>

<t>In contrast, in BRSKI-PRM the pledge has no direct connection to the registrar and <bcp14>MUST</bcp14> accept the supplied registrar EE certificate provisionally until it receives the voucher as described in <xref target="voucher"/> to verify both POP and POI.
The provisional registrar EE certificate is used for the object security along the authenticated self-contained objects that in BRSKI-PRM replace the direct TLS connection to the registrar available in BRSKI <xref target="RFC8995"/>.
See also <xref section="5" sectionFormat="of" target="RFC8995"/> on "provisional state".</t>

<t>For the Agent Proximity Assertion, the Registrar-Agent EE certificate and registrar EE certificate must be signed by the same domain owner, i.e., <bcp14>MUST</bcp14> possess a common domain trust anchor in their certificate chain.
Akin to the Network Proximity Assertion in BRSKI <xref target="RFC8995"/>, the Agent Proximity Assertion provides pledge proximity evidence to the MASA.
But additionally, the Agent Proximity Assertion allows the domain registrar to be sure that the PVR supplied by the Registrar-Agent was in fact collected by the Registrar-Agent to which the registrar is connected by utilizing an agent-signed data object.</t>

</section>
</section>
<section anchor="system-components"><name>System Components</name>

<section anchor="agent_component"><name>Registrar-Agent</name>

<t>The Registrar-Agent is a new component in BRSKI-PRM that provides a store and forward communication path with secure message passing between pledges in responder mode and the domain registrar.
It uses its own end-entity (EE) certificate and corresponding credentials (i.e., private key) for TLS client authentication and for signing agent-signed data objects.</t>

<t>The Registrar-Agent EE certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier as defined in <xref section="4.2.1.2" sectionFormat="of" target="RFC5280"/>, which is used as a reference within agent-signed data objects as defined in <xref target="jws-asd"/>.
Note that this is an additional requirement for issuing the Registrar-Agent EE certificate.
<xref target="RFC8995"/> has a similar requirement for the registrar EE certificate.</t>

<t>The SubjectKeyIdentifier is used in favor of providing the complete Registrar-Agent EE certificate in agent-signed data objects to accommodate also constrained environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SubjectKeyIdentifier in favor of a certificate fingerprint to avoid additional computations.</t>

<t>The provisioning of the Registrar-Agent EE certificate is out of scope for this document, but may be done using its own BRSKI run or by other means such as configuration.
It is <bcp14>RECOMMENDED</bcp14> to use short lived Registrar-Agent EE certificates in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>Further, the Registrar-Agent requires the registrar EE certificate to provide it to the pledge.
It <bcp14>MAY</bcp14> use the certificate verified during server authentication within an initial TLS session with the registrar;
in this case, the Registrar-Agent <bcp14>MUST</bcp14> possess the domain trust anchor (i.e., CA certificate) for the registrar EE certificate to verify the certificate chain.
Alternatively, the registrar EE certificate <bcp14>MAY</bcp14> be provided via configuration or a repository.
The registrar IP address or hostname is provided either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/> (see <xref target="discovery_uc2_reg"/>).</t>

<t>In addition to the certificates, the Registrar-Agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow for the discovery of pledges by the Registrar-Agent using DNS-SD with mDNS (see <xref target="discovery_uc2_ppa"/>).
The list may be provided by prior administrative means or the Registrar-Agent may get the information via an (out-of-band) interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, where the product-serial-number would be initialized from the 12N B005 Product Serial Number data record.</t>

<t>In summary, the following information <bcp14>MUST</bcp14> be available at the Registrar-Agent before the interaction with a pledge:</t>

<t><list style="symbols">
  <t>Registrar-Agent EE certificate and corresponding private key: own operational credentials to authenticate and sign agent-signed data</t>
  <t>Registrar EE certificate: certificate of the domain registrar to be provided to the pledge</t>
  <t>Serial number(s): product-serial-number(s) of pledge(s) to be bootstrapped; used for discovery</t>
</list></t>

<t>Further, the Registrar-Agent <bcp14>SHOULD</bcp14> have synchronized time.</t>

<t>Finally, the Registrar-Agent <bcp14>MAY</bcp14> possess the IDevID (root or issuing) CA certificate of the pledge manufacturer/vendor to validate the IDevID certificate on returned PVR or in case of optional TLS usage for pledge communication (see <xref target="pledgehttps"/>).
The distribution of IDevID CA certificates to the Registrar-Agent is out of scope of this document and may be done by a manual configuration.</t>

<section anchor="discovery_uc2_reg"><name>Discovery of the Registrar</name>

<t>While the Registrar-Agent requires the IP address of the domain registrar to initiate a TLS session, a separate discovery of the registrar is likely not needed and a configuration of the domain registrar IP address or hostname is assumed.
Registrar-Agent and registrar are domain components that already have a trust relation, as a Registrar-Agent acts as representative of the domain registrar towards the pledge or may even be collocated with the domain registrar.
Further, other communication (not part of this document) between the Registrar-Agent and the registrar is assumed, e.g., to exchange information about product-serial-number(s) of pledges to be discovered as outlined in <xref target="arch_nomadic"/>.</t>

<t>Moreover, the standard discovery described in <xref section="4" sectionFormat="of" target="RFC8995"/> and the <xref section="A.2" sectionFormat="of" target="RFC8995"/> does not support identification of registrars with an enhanced feature set (like the support of BRSKI-PRM), and hence this standard discovery is not applicable.</t>

<t>As a more general solution, the BRSKI discovery mechanism can be extended to provide upfront information on the capabilities of registrars, such as the mode of operation (pledge-responder-mode or registrar-responder-mode).
Defining discovery extensions is out of scope of this document.
For further discussion, see <xref target="I-D.ietf-anima-brski-discovery"/>.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of the Pledge</name>

<t>The discovery of the pledge by the Registrar-Agent in the context of this document describes the minimum discovery approach that <bcp14>MUST</bcp14> be supported.
A more general discovery mechanism, also supporting GRASP besides DNS-SD with mDNS, is discussed in <xref target="I-D.ietf-anima-brski-discovery"/>.</t>

<t>Discovery in BRSKI-PRM uses DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
Note that <xref section="9" sectionFormat="of" target="RFC6762"/> provides support for conflict resolution in situations when a DNS-SD with mDNS responder receives an mDNS response with inconsistent data.
Note that <xref target="RFC8990"/> does not support conflict resolution of mDNS, which may be a limitation for its application.</t>

<t>The pledge constructs a Service Instance Name based on device local information (manufacturer/vendor name and serial number), which results in <spanx style="verb">&lt;product-serial-number&gt;._brski-pledge._tcp.local</spanx>.
The product-serial-number composition is manufacturer dependent and may contain information regarding the manufacturer, the product type, and further information specific to the product instance.
To allow distinction of pledges, the product-serial-number therefore needs to be sufficiently unique.</t>

<t>Note that this goes against the naming recommendation of <xref target="RFC6763"/>.
The <spanx style="verb">_brski-pledge._tcp</spanx> service, however, targets machine-to-machine discovery.</t>

<t>In the absence of a more general discovery as defined in <xref target="I-D.ietf-anima-brski-discovery"/> the Registrar-Agent <bcp14>MUST</bcp14> use</t>

<t><list style="symbols">
  <t><spanx style="verb">&lt;product-serial-number&gt;._brski-pledge._tcp.local</spanx>, to discover a specific pledge, e.g., when connected to a local network.</t>
  <t><spanx style="verb">_brski-pledge._tcp.local</spanx> to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on DNS-SD with mDNS discovery without its product-serial-number contained.
This allows a commissioning tool to discover pledges to be bootstrapped in the domain.
The manufacturer supports this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply DNS-SD with mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="pledge_component"><name>Pledge in Responder Mode</name>

<t>In BRSKI-PRM, the pledge is triggered by the Registrar-Agent to create the PVR and PER.
It is also triggered for processing of the responses and the generation of status information once the Registrar-Agent has received the responses from the registrar later in the process.</t>

<t>To enable interaction as responder with the Registrar-Agent, pledges in responder mode <bcp14>MUST</bcp14> act as servers and <bcp14>MUST</bcp14> provide the endpoints defined in <xref target="pledge_ep_table"/> within the BRSKI-defined <spanx style="verb">/.well-known/brski/</spanx> URI path, except for the <bcp14>OPTIONAL</bcp14> endpoint "qps".
The endpoints are defined with short names to also accommodate for resource-constrained devices.</t>

<texttable title="Well-Known Endpoints on a Pledge in Responder Mode" anchor="pledge_ep_table">
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Exchange and Artifacts</ttcol>
      <c>tpvr</c>
      <c>Trigger Pledge Voucher-Request</c>
      <c><xref target="tpvr"/></c>
      <c>tper</c>
      <c>Trigger Pledge Enroll-Request</c>
      <c><xref target="tper"/></c>
      <c>svr</c>
      <c>Supply Voucher to Pledge</c>
      <c><xref target="voucher"/></c>
      <c>scac</c>
      <c>Supply CA Certificates to Pledge</c>
      <c><xref target="cacerts"/></c>
      <c>ser</c>
      <c>Supply Enroll-Response to Pledge</c>
      <c><xref target="enroll_response"/></c>
      <c>qps</c>
      <c>Query Pledge Status</c>
      <c><xref target="query"/></c>
</texttable>

<t>HTTP(S) uses the Host header field (or :authority in HTTP/2) to allow for name-based virtual hosting as explained in <xref section="7.2" sectionFormat="of" target="RFC9110"/>.
This header field is mandatory, and so a compliant HTTP(S) client is going to insert it, which may be just an IP address.
The pledge <bcp14>MUST</bcp14> respond to all requests regardless of the Host header field provided by the client (i.e., ignore it).
Note that there is no requirement for the pledge to operate its BRSKI-PRM service on port 80 or port 443, so there is no reason for name-based virtual hosting.</t>

<t>For instance, when the Registrar-Agent reaches out to the "tpvr" endpoint on a pledge in responder mode with the full URI <spanx style="verb">http://pledge.example.com/.well-known/brski/tpvr</spanx>, it sets the Host header field to <spanx style="verb">pledge.example.com</spanx> and the absolute path <spanx style="verb">/.well-known/brski/tpbr</spanx>.
In practice, however, the pledge is usually known by a <spanx style="verb">.local</spanx> hostname or only its IP address as returned by a discovery protocol, which will be included in the Host header field.</t>

<t>As BRSKI-PRM uses authenticated self-contained objects between the pledge and the domain registrar, the binding of the pledge identity to the voucher-requests is provided by the wrapping signature employing the pledge IDevID credential.
Hence, pledges <bcp14>MUST</bcp14> have an Initial Device Identifier (IDevID) installed in them at the factory.</t>

<section anchor="pledge-with-combined-functionality"><name>Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator and responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a Pledge Enroll-Request (PER) or to provide an Enroll-Response can be used for further certificates.</t>

</section>
</section>
<section anchor="registrar_component"><name>Domain Registrar</name>

<t>In BRSKI-PRM, the domain registrar provides the endpoints already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
In addition, it <bcp14>MUST</bcp14> provide the endpoints defined in <xref target="registrar_ep_table"/> within the BRSKI-defined <spanx style="verb">/.well-known/brski/</spanx> Well-Known URI path.
These endpoints accommodate for the authenticated self-contained objects used by BRSKI-PRM to provide Pledge Enroll-Request (PER) artifacts and signature-wrapped CA certificates via the Registrar-Agent.</t>

<texttable title="Additional Well-Known Endpoints on a BRSKI-PRM Registrar" anchor="registrar_ep_table">
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Exchange and Artifacts</ttcol>
      <c>requestenroll</c>
      <c>Supply PER to Registrar</c>
      <c><xref target="per"/></c>
      <c>wrappedcacerts</c>
      <c>Obtain CA Certificates</c>
      <c><xref target="obtain_cacerts"/></c>
</texttable>

<t>The registrar possesses its own EE certificate and corresponding private key for authenticating and signing.
It <bcp14>MUST</bcp14> use the same certificate/credentials for authentication in the TLS session with a Registrar-Agent and for signing artifacts for that Registrar-Agent and its pledges (see <xref target="rcv_artifact"/>).
Overall, this may have operational implications when the registrar is part of a scalable framework as described in <xref section="1.3.1" sectionFormat="of" target="I-D.richardson-anima-registrar-considerations"/>.</t>

<t>According to <xref section="5.3" sectionFormat="of" target="RFC8995"/>, the domain registrar performs the pledge authorization for bootstrapping within its domain based on the Pledge Voucher-Request.
For this, it <bcp14>MUST</bcp14> possess the IDevID trust anchor(s) (i.e., root or issuing CA certificate(s)) of the pledge vendor(s)/manufacturer(s).
This behavior is retained in BRSKI-PRM.</t>

<t>In its role as EST server <xref target="RFC7030"/>, the domain registrar <bcp14>MUST</bcp14> also possess the domain CA certificates as defined in <xref section="5.9" sectionFormat="of" target="RFC8995"/>.</t>

<t>Finally, the domain registrar <bcp14>MUST</bcp14> possess the Registrar-Agent EE certificate(s) to validate agent-signed data and to provide it to the MASA.
The registrar <bcp14>MAY</bcp14> use the certificate verified during client authentication within the TLS sessions with the Registrar-Agent;
in this case, the registrar <bcp14>MUST</bcp14> possess the domain trust anchor (i.e., domain CA certificate) for the Registrar-Agent EE certificate to verify the certificate chain.
Alternatively, the Registrar-Agent EE certificate(s) <bcp14>MAY</bcp14> be provided via configuration or a repository.</t>

<section anchor="domain-registrar-with-combined-functionality"><name>Domain Registrar with Combined Functionality</name>

<t>A registrar with combined BRSKI and BRSKI-PRM functionality <bcp14>MAY</bcp14> detect if the bootstrapping is performed by the pledge directly (BRSKI case) or by a Registrar-Agent (BRSKI-PRM case) based on the utilized credentials for client authentication during the TLS session establishment and switch the operational mode from BRSKI to BRSKI-PRM.</t>

<t>This may be supported by a specific naming in the SAN (subject alternative name) component of the Registrar-Agent EE certificate, which allows the domain registrar to explicitly detect already in the TLS session establishment that the connecting client is a Registrar-Agent.</t>

<t>The registrar <bcp14>MAY</bcp14> be restricted by configuration, if it accepts every Registrar-Agent, which can authenticate with a domain issued certificate or only explicitly authorized ones.</t>

<t>Note that using an EE certificate for TLS client authentication of the Registrar-Agent is a deviation from <xref target="RFC8995"/>, in which the pledge IDevID certificate is used to perform TLS client authentication.</t>

</section>
</section>
<section anchor="masa"><name>MASA</name>

<t>The Manufacturer Authorized Signing Authority (MASA) is a vendor service that generates and signs voucher artifacts for pledges by the same vendor.
When these pledges support BRSKI-PRM, the MASA needs to implement the following functionality in addition to BRSKI <xref target="RFC8995"/>.</t>

<t>A MASA for pledges in responder mode <bcp14>MUST</bcp14> support the voucher format defined in <xref target="I-D.ietf-anima-jws-voucher"></xref> to parse and process JWS-signed voucher-request artifacts and generate JWS-signed voucher artifacts.</t>

<t>Further, a MASA for pledges in responder mode <bcp14>MUST</bcp14> support the Agent Proximity Assertion (see <xref target="agt_prx"/>) through the validation steps defined in <xref target="masa_interaction"/> based on the Pledge Voucher-Request (PVR) and Registrar Voucher-Request (RVR) artifact fields defined in <xref target="pvr_artifact"/> and <xref target="rvr_artifact"/>, respectively.</t>

</section>
</section>
<section anchor="exchanges"><name>Exchanges and Artifacts</name>

<t>The interaction of the pledge with the Registrar-Agent may be accomplished using different transports (i.e., protocols and/or network technologies).
This specification utilizes HTTP(S) as default transport.
Other specifications may define alternative transports such as CoAP, Bluetooth Low Energy (BLE), or Near Field Communication (NFC).
These transports may differ from and are independent of the ones used between the Registrar-Agent and the registrar.</t>

<t>Transport independence is realized through authenticated self-contained objects that are not bound to a specific transport security and stay the same along the communication path from the pledge via the Registrar-Agent to the registrar.
<xref target="I-D.ietf-anima-rfc8366bis"/> defines CMS-signed JSON structures as format for artifacts representing authenticated self-contained objects.
This specification utilizes JWS-signed JSON structures as default format for BRSKI-PRM.
Other specifications may define alternative formats for representing authenticated self-contained objects such as COSE-signed CBOR structures.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following subsections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1904" width="576" viewBox="0 0 576 1904" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,88 L 16,192" fill="none" stroke="black"/>
<path d="M 16,256 L 16,320" fill="none" stroke="black"/>
<path d="M 16,384 L 16,448" fill="none" stroke="black"/>
<path d="M 16,512 L 16,800" fill="none" stroke="black"/>
<path d="M 16,864 L 16,960" fill="none" stroke="black"/>
<path d="M 16,1024 L 16,1072" fill="none" stroke="black"/>
<path d="M 16,1136 L 16,1200" fill="none" stroke="black"/>
<path d="M 16,1264 L 16,1312" fill="none" stroke="black"/>
<path d="M 16,1376 L 16,1440" fill="none" stroke="black"/>
<path d="M 16,1504 L 16,1632" fill="none" stroke="black"/>
<path d="M 16,1696 L 16,1744" fill="none" stroke="black"/>
<path d="M 16,1808 L 16,1872" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,88 L 168,192" fill="none" stroke="black"/>
<path d="M 168,256 L 168,320" fill="none" stroke="black"/>
<path d="M 168,384 L 168,448" fill="none" stroke="black"/>
<path d="M 168,512 L 168,800" fill="none" stroke="black"/>
<path d="M 168,864 L 168,960" fill="none" stroke="black"/>
<path d="M 168,1024 L 168,1072" fill="none" stroke="black"/>
<path d="M 168,1136 L 168,1200" fill="none" stroke="black"/>
<path d="M 168,1264 L 168,1312" fill="none" stroke="black"/>
<path d="M 168,1376 L 168,1440" fill="none" stroke="black"/>
<path d="M 168,1504 L 168,1632" fill="none" stroke="black"/>
<path d="M 168,1696 L 168,1744" fill="none" stroke="black"/>
<path d="M 168,1808 L 168,1872" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,88 L 312,192" fill="none" stroke="black"/>
<path d="M 312,256 L 312,320" fill="none" stroke="black"/>
<path d="M 312,384 L 312,448" fill="none" stroke="black"/>
<path d="M 312,512 L 312,544" fill="none" stroke="black"/>
<path d="M 312,592 L 312,624" fill="none" stroke="black"/>
<path d="M 312,656 L 312,800" fill="none" stroke="black"/>
<path d="M 312,864 L 312,960" fill="none" stroke="black"/>
<path d="M 312,1024 L 312,1072" fill="none" stroke="black"/>
<path d="M 312,1136 L 312,1200" fill="none" stroke="black"/>
<path d="M 312,1264 L 312,1312" fill="none" stroke="black"/>
<path d="M 312,1376 L 312,1440" fill="none" stroke="black"/>
<path d="M 312,1504 L 312,1600" fill="none" stroke="black"/>
<path d="M 312,1696 L 312,1744" fill="none" stroke="black"/>
<path d="M 312,1808 L 312,1872" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,88 L 456,192" fill="none" stroke="black"/>
<path d="M 456,256 L 456,320" fill="none" stroke="black"/>
<path d="M 456,384 L 456,448" fill="none" stroke="black"/>
<path d="M 456,512 L 456,664" fill="none" stroke="black"/>
<path d="M 456,784 L 456,800" fill="none" stroke="black"/>
<path d="M 456,864 L 456,960" fill="none" stroke="black"/>
<path d="M 456,1024 L 456,1072" fill="none" stroke="black"/>
<path d="M 456,1136 L 456,1200" fill="none" stroke="black"/>
<path d="M 456,1264 L 456,1312" fill="none" stroke="black"/>
<path d="M 456,1376 L 456,1440" fill="none" stroke="black"/>
<path d="M 456,1504 L 456,1544" fill="none" stroke="black"/>
<path d="M 456,1600 L 456,1632" fill="none" stroke="black"/>
<path d="M 456,1696 L 456,1744" fill="none" stroke="black"/>
<path d="M 456,1808 L 456,1872" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,88 L 560,192" fill="none" stroke="black"/>
<path d="M 560,256 L 560,320" fill="none" stroke="black"/>
<path d="M 560,384 L 560,448" fill="none" stroke="black"/>
<path d="M 560,512 L 560,704" fill="none" stroke="black"/>
<path d="M 560,752 L 560,800" fill="none" stroke="black"/>
<path d="M 560,864 L 560,960" fill="none" stroke="black"/>
<path d="M 560,1024 L 560,1072" fill="none" stroke="black"/>
<path d="M 560,1136 L 560,1200" fill="none" stroke="black"/>
<path d="M 560,1264 L 560,1312" fill="none" stroke="black"/>
<path d="M 560,1376 L 560,1440" fill="none" stroke="black"/>
<path d="M 560,1504 L 560,1632" fill="none" stroke="black"/>
<path d="M 560,1696 L 560,1744" fill="none" stroke="black"/>
<path d="M 560,1808 L 560,1872" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,160 L 160,160" fill="none" stroke="black"/>
<path d="M 24,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,272 L 56,272" fill="none" stroke="black"/>
<path d="M 128,272 L 160,272" fill="none" stroke="black"/>
<path d="M 24,288 L 72,288" fill="none" stroke="black"/>
<path d="M 112,288 L 160,288" fill="none" stroke="black"/>
<path d="M 24,304 L 80,304" fill="none" stroke="black"/>
<path d="M 112,304 L 160,304" fill="none" stroke="black"/>
<path d="M 24,400 L 56,400" fill="none" stroke="black"/>
<path d="M 128,400 L 160,400" fill="none" stroke="black"/>
<path d="M 24,416 L 72,416" fill="none" stroke="black"/>
<path d="M 112,416 L 160,416" fill="none" stroke="black"/>
<path d="M 24,432 L 80,432" fill="none" stroke="black"/>
<path d="M 112,432 L 160,432" fill="none" stroke="black"/>
<path d="M 176,528 L 216,528" fill="none" stroke="black"/>
<path d="M 256,528 L 304,528" fill="none" stroke="black"/>
<path d="M 176,608 L 224,608" fill="none" stroke="black"/>
<path d="M 256,608 L 304,608" fill="none" stroke="black"/>
<path d="M 320,672 L 416,672" fill="none" stroke="black"/>
<path d="M 456,672 L 552,672" fill="none" stroke="black"/>
<path d="M 320,688 L 424,688" fill="none" stroke="black"/>
<path d="M 456,688 L 552,688" fill="none" stroke="black"/>
<path d="M 320,768 L 408,768" fill="none" stroke="black"/>
<path d="M 472,768 L 552,768" fill="none" stroke="black"/>
<path d="M 176,784 L 208,784" fill="none" stroke="black"/>
<path d="M 280,784 L 304,784" fill="none" stroke="black"/>
<path d="M 176,880 L 216,880" fill="none" stroke="black"/>
<path d="M 256,880 L 304,880" fill="none" stroke="black"/>
<path d="M 176,896 L 224,896" fill="none" stroke="black"/>
<path d="M 256,896 L 304,896" fill="none" stroke="black"/>
<path d="M 320,912 L 344,912" fill="none" stroke="black"/>
<path d="M 424,912 L 448,912" fill="none" stroke="black"/>
<path d="M 320,928 L 336,928" fill="none" stroke="black"/>
<path d="M 176,944 L 192,944" fill="none" stroke="black"/>
<path d="M 288,944 L 304,944" fill="none" stroke="black"/>
<path d="M 176,1040 L 216,1040" fill="none" stroke="black"/>
<path d="M 256,1040 L 304,1040" fill="none" stroke="black"/>
<path d="M 176,1056 L 208,1056" fill="none" stroke="black"/>
<path d="M 272,1056 L 304,1056" fill="none" stroke="black"/>
<path d="M 24,1152 L 56,1152" fill="none" stroke="black"/>
<path d="M 128,1152 L 160,1152" fill="none" stroke="black"/>
<path d="M 24,1168 L 64,1168" fill="none" stroke="black"/>
<path d="M 136,1168 L 160,1168" fill="none" stroke="black"/>
<path d="M 24,1184 L 64,1184" fill="none" stroke="black"/>
<path d="M 128,1184 L 160,1184" fill="none" stroke="black"/>
<path d="M 24,1280 L 56,1280" fill="none" stroke="black"/>
<path d="M 128,1280 L 160,1280" fill="none" stroke="black"/>
<path d="M 24,1296 L 64,1296" fill="none" stroke="black"/>
<path d="M 128,1296 L 160,1296" fill="none" stroke="black"/>
<path d="M 24,1392 L 56,1392" fill="none" stroke="black"/>
<path d="M 128,1392 L 160,1392" fill="none" stroke="black"/>
<path d="M 24,1408 L 48,1408" fill="none" stroke="black"/>
<path d="M 144,1408 L 160,1408" fill="none" stroke="black"/>
<path d="M 24,1424 L 56,1424" fill="none" stroke="black"/>
<path d="M 120,1424 L 160,1424" fill="none" stroke="black"/>
<path d="M 176,1520 L 216,1520" fill="none" stroke="black"/>
<path d="M 256,1520 L 304,1520" fill="none" stroke="black"/>
<path d="M 176,1536 L 208,1536" fill="none" stroke="black"/>
<path d="M 272,1536 L 304,1536" fill="none" stroke="black"/>
<path d="M 320,1552 L 416,1552" fill="none" stroke="black"/>
<path d="M 456,1552 L 552,1552" fill="none" stroke="black"/>
<path d="M 320,1568 L 352,1568" fill="none" stroke="black"/>
<path d="M 520,1568 L 552,1568" fill="none" stroke="black"/>
<path d="M 320,1584 L 368,1584" fill="none" stroke="black"/>
<path d="M 504,1584 L 552,1584" fill="none" stroke="black"/>
<path d="M 176,1712 L 216,1712" fill="none" stroke="black"/>
<path d="M 256,1712 L 304,1712" fill="none" stroke="black"/>
<path d="M 176,1728 L 208,1728" fill="none" stroke="black"/>
<path d="M 272,1728 L 304,1728" fill="none" stroke="black"/>
<path d="M 24,1824 L 56,1824" fill="none" stroke="black"/>
<path d="M 128,1824 L 160,1824" fill="none" stroke="black"/>
<path d="M 24,1840 L 64,1840" fill="none" stroke="black"/>
<path d="M 128,1840 L 160,1840" fill="none" stroke="black"/>
<path d="M 24,1856 L 64,1856" fill="none" stroke="black"/>
<path d="M 128,1856 L 160,1856" fill="none" stroke="black"/>
<polygon class="arrowhead" points="560,1568 548,1562.4 548,1573.6" fill="black" transform="rotate(0,552,1568)"/>
<polygon class="arrowhead" points="560,1552 548,1546.4 548,1557.6" fill="black" transform="rotate(0,552,1552)"/>
<polygon class="arrowhead" points="560,688 548,682.4 548,693.6" fill="black" transform="rotate(0,552,688)"/>
<polygon class="arrowhead" points="560,672 548,666.4 548,677.6" fill="black" transform="rotate(0,552,672)"/>
<polygon class="arrowhead" points="456,912 444,906.4 444,917.6" fill="black" transform="rotate(0,448,912)"/>
<polygon class="arrowhead" points="328,1584 316,1578.4 316,1589.6" fill="black" transform="rotate(180,320,1584)"/>
<polygon class="arrowhead" points="328,1552 316,1546.4 316,1557.6" fill="black" transform="rotate(180,320,1552)"/>
<polygon class="arrowhead" points="328,928 316,922.4 316,933.6" fill="black" transform="rotate(180,320,928)"/>
<polygon class="arrowhead" points="328,768 316,762.4 316,773.6" fill="black" transform="rotate(180,320,768)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="312,1728 300,1722.4 300,1733.6" fill="black" transform="rotate(0,304,1728)"/>
<polygon class="arrowhead" points="312,1712 300,1706.4 300,1717.6" fill="black" transform="rotate(0,304,1712)"/>
<polygon class="arrowhead" points="312,1536 300,1530.4 300,1541.6" fill="black" transform="rotate(0,304,1536)"/>
<polygon class="arrowhead" points="312,1520 300,1514.4 300,1525.6" fill="black" transform="rotate(0,304,1520)"/>
<polygon class="arrowhead" points="312,1040 300,1034.4 300,1045.6" fill="black" transform="rotate(0,304,1040)"/>
<polygon class="arrowhead" points="312,896 300,890.4 300,901.6" fill="black" transform="rotate(0,304,896)"/>
<polygon class="arrowhead" points="312,880 300,874.4 300,885.6" fill="black" transform="rotate(0,304,880)"/>
<polygon class="arrowhead" points="312,608 300,602.4 300,613.6" fill="black" transform="rotate(0,304,608)"/>
<polygon class="arrowhead" points="312,528 300,522.4 300,533.6" fill="black" transform="rotate(0,304,528)"/>
<polygon class="arrowhead" points="184,1712 172,1706.4 172,1717.6" fill="black" transform="rotate(180,176,1712)"/>
<polygon class="arrowhead" points="184,1520 172,1514.4 172,1525.6" fill="black" transform="rotate(180,176,1520)"/>
<polygon class="arrowhead" points="184,1056 172,1050.4 172,1061.6" fill="black" transform="rotate(180,176,1056)"/>
<polygon class="arrowhead" points="184,1040 172,1034.4 172,1045.6" fill="black" transform="rotate(180,176,1040)"/>
<polygon class="arrowhead" points="184,944 172,938.4 172,949.6" fill="black" transform="rotate(180,176,944)"/>
<polygon class="arrowhead" points="184,880 172,874.4 172,885.6" fill="black" transform="rotate(180,176,880)"/>
<polygon class="arrowhead" points="184,784 172,778.4 172,789.6" fill="black" transform="rotate(180,176,784)"/>
<polygon class="arrowhead" points="184,528 172,522.4 172,533.6" fill="black" transform="rotate(180,176,528)"/>
<polygon class="arrowhead" points="168,1856 156,1850.4 156,1861.6" fill="black" transform="rotate(0,160,1856)"/>
<polygon class="arrowhead" points="168,1824 156,1818.4 156,1829.6" fill="black" transform="rotate(0,160,1824)"/>
<polygon class="arrowhead" points="168,1424 156,1418.4 156,1429.6" fill="black" transform="rotate(0,160,1424)"/>
<polygon class="arrowhead" points="168,1392 156,1386.4 156,1397.6" fill="black" transform="rotate(0,160,1392)"/>
<polygon class="arrowhead" points="168,1280 156,1274.4 156,1285.6" fill="black" transform="rotate(0,160,1280)"/>
<polygon class="arrowhead" points="168,1184 156,1178.4 156,1189.6" fill="black" transform="rotate(0,160,1184)"/>
<polygon class="arrowhead" points="168,1152 156,1146.4 156,1157.6" fill="black" transform="rotate(0,160,1152)"/>
<polygon class="arrowhead" points="168,432 156,426.4 156,437.6" fill="black" transform="rotate(0,160,432)"/>
<polygon class="arrowhead" points="168,400 156,394.4 156,405.6" fill="black" transform="rotate(0,160,400)"/>
<polygon class="arrowhead" points="168,304 156,298.4 156,309.6" fill="black" transform="rotate(0,160,304)"/>
<polygon class="arrowhead" points="168,272 156,266.4 156,277.6" fill="black" transform="rotate(0,160,272)"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,1840 20,1834.4 20,1845.6" fill="black" transform="rotate(180,24,1840)"/>
<polygon class="arrowhead" points="32,1824 20,1818.4 20,1829.6" fill="black" transform="rotate(180,24,1824)"/>
<polygon class="arrowhead" points="32,1408 20,1402.4 20,1413.6" fill="black" transform="rotate(180,24,1408)"/>
<polygon class="arrowhead" points="32,1392 20,1386.4 20,1397.6" fill="black" transform="rotate(180,24,1392)"/>
<polygon class="arrowhead" points="32,1296 20,1290.4 20,1301.6" fill="black" transform="rotate(180,24,1296)"/>
<polygon class="arrowhead" points="32,1280 20,1274.4 20,1285.6" fill="black" transform="rotate(180,24,1280)"/>
<polygon class="arrowhead" points="32,1168 20,1162.4 20,1173.6" fill="black" transform="rotate(180,24,1168)"/>
<polygon class="arrowhead" points="32,1152 20,1146.4 20,1157.6" fill="black" transform="rotate(180,24,1152)"/>
<polygon class="arrowhead" points="32,416 20,410.4 20,421.6" fill="black" transform="rotate(180,24,416)"/>
<polygon class="arrowhead" points="32,400 20,394.4 20,405.6" fill="black" transform="rotate(180,24,400)"/>
<polygon class="arrowhead" points="32,288 20,282.4 20,293.6" fill="black" transform="rotate(180,24,288)"/>
<polygon class="arrowhead" points="32,272 20,266.4 20,277.6" fill="black" transform="rotate(180,24,272)"/>
<polygon class="arrowhead" points="32,160 20,154.4 20,165.6" fill="black" transform="rotate(180,24,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="516" y="100">Internet</text>
<text x="92" y="116">discover</text>
<text x="92" y="132">pledge</text>
<text x="68" y="148">mDNS</text>
<text x="112" y="148">query</text>
<text x="16" y="212">~</text>
<text x="168" y="212">~</text>
<text x="312" y="212">~</text>
<text x="456" y="212">~</text>
<text x="560" y="212">~</text>
<text x="16" y="228">(1)</text>
<text x="64" y="228">Trigger</text>
<text x="124" y="228">Pledge</text>
<text x="216" y="228">Voucher-Request</text>
<text x="16" y="244">~</text>
<text x="168" y="244">~</text>
<text x="312" y="244">~</text>
<text x="456" y="244">~</text>
<text x="560" y="244">~</text>
<text x="76" y="276">opt.</text>
<text x="112" y="276">TLS</text>
<text x="92" y="292">tPVR</text>
<text x="96" y="308">PVR</text>
<text x="16" y="340">~</text>
<text x="168" y="340">~</text>
<text x="312" y="340">~</text>
<text x="456" y="340">~</text>
<text x="560" y="340">~</text>
<text x="16" y="356">(2)</text>
<text x="64" y="356">Trigger</text>
<text x="124" y="356">Pledge</text>
<text x="212" y="356">Enroll-Request</text>
<text x="16" y="372">~</text>
<text x="168" y="372">~</text>
<text x="312" y="372">~</text>
<text x="456" y="372">~</text>
<text x="560" y="372">~</text>
<text x="76" y="404">opt.</text>
<text x="112" y="404">TLS</text>
<text x="92" y="420">tPER</text>
<text x="96" y="436">PER</text>
<text x="16" y="468">~</text>
<text x="168" y="468">~</text>
<text x="312" y="468">~</text>
<text x="456" y="468">~</text>
<text x="560" y="468">~</text>
<text x="16" y="484">(3)</text>
<text x="60" y="484">Supply</text>
<text x="104" y="484">PVR</text>
<text x="132" y="484">to</text>
<text x="184" y="484">Registrar</text>
<text x="268" y="484">(including</text>
<text x="332" y="484">MASA</text>
<text x="404" y="484">interaction)</text>
<text x="16" y="500">~</text>
<text x="168" y="500">~</text>
<text x="312" y="500">~</text>
<text x="456" y="500">~</text>
<text x="560" y="500">~</text>
<text x="236" y="532">mTLS</text>
<text x="308" y="564">[Registrar-Agent</text>
<text x="308" y="580">authenticated&amp;authorized?]</text>
<text x="240" y="612">PVR</text>
<text x="280" y="644">[accept</text>
<text x="348" y="644">device?]</text>
<text x="436" y="676">mTLS</text>
<text x="440" y="692">RVR</text>
<text x="456" y="708">~</text>
<text x="460" y="724">[extract</text>
<text x="536" y="724">DomainID]</text>
<text x="456" y="740">[update</text>
<text x="532" y="740">audit-log]</text>
<text x="456" y="756">~</text>
<text x="440" y="772">Voucher</text>
<text x="244" y="788">Voucher'</text>
<text x="16" y="820">~</text>
<text x="168" y="820">~</text>
<text x="312" y="820">~</text>
<text x="456" y="820">~</text>
<text x="560" y="820">~</text>
<text x="16" y="836">(4)</text>
<text x="60" y="836">Supply</text>
<text x="104" y="836">PER</text>
<text x="132" y="836">to</text>
<text x="184" y="836">Registrar</text>
<text x="268" y="836">(including</text>
<text x="328" y="836">Key</text>
<text x="404" y="836">Infrastructure</text>
<text x="516" y="836">interaction)</text>
<text x="16" y="852">~</text>
<text x="168" y="852">~</text>
<text x="312" y="852">~</text>
<text x="456" y="852">~</text>
<text x="560" y="852">~</text>
<text x="236" y="884">mTLS</text>
<text x="240" y="900">PER</text>
<text x="384" y="916">[Request]</text>
<text x="396" y="932">[Certificate]-</text>
<text x="240" y="948">Enroll-Resp</text>
<text x="16" y="980">~</text>
<text x="168" y="980">~</text>
<text x="312" y="980">~</text>
<text x="456" y="980">~</text>
<text x="560" y="980">~</text>
<text x="16" y="996">(5)</text>
<text x="60" y="996">Obtain</text>
<text x="100" y="996">CA</text>
<text x="164" y="996">Certificates</text>
<text x="16" y="1012">~</text>
<text x="168" y="1012">~</text>
<text x="312" y="1012">~</text>
<text x="456" y="1012">~</text>
<text x="560" y="1012">~</text>
<text x="236" y="1044">mTLS</text>
<text x="240" y="1060">caCerts</text>
<text x="16" y="1092">~</text>
<text x="168" y="1092">~</text>
<text x="312" y="1092">~</text>
<text x="456" y="1092">~</text>
<text x="560" y="1092">~</text>
<text x="16" y="1108">(6)</text>
<text x="60" y="1108">Supply</text>
<text x="120" y="1108">Voucher</text>
<text x="164" y="1108">to</text>
<text x="204" y="1108">Pledge</text>
<text x="16" y="1124">~</text>
<text x="168" y="1124">~</text>
<text x="312" y="1124">~</text>
<text x="456" y="1124">~</text>
<text x="560" y="1124">~</text>
<text x="76" y="1156">opt.</text>
<text x="112" y="1156">TLS</text>
<text x="100" y="1172">Voucher'</text>
<text x="96" y="1188">vStatus</text>
<text x="16" y="1220">~</text>
<text x="168" y="1220">~</text>
<text x="312" y="1220">~</text>
<text x="456" y="1220">~</text>
<text x="560" y="1220">~</text>
<text x="16" y="1236">(7)</text>
<text x="60" y="1236">Supply</text>
<text x="100" y="1236">CA</text>
<text x="164" y="1236">Certificates</text>
<text x="228" y="1236">to</text>
<text x="268" y="1236">Pledge</text>
<text x="16" y="1252">~</text>
<text x="168" y="1252">~</text>
<text x="312" y="1252">~</text>
<text x="456" y="1252">~</text>
<text x="560" y="1252">~</text>
<text x="76" y="1284">opt.</text>
<text x="112" y="1284">TLS</text>
<text x="96" y="1300">caCerts</text>
<text x="16" y="1332">~</text>
<text x="168" y="1332">~</text>
<text x="312" y="1332">~</text>
<text x="456" y="1332">~</text>
<text x="560" y="1332">~</text>
<text x="16" y="1348">(8)</text>
<text x="60" y="1348">Supply</text>
<text x="152" y="1348">Enroll-Response</text>
<text x="228" y="1348">to</text>
<text x="268" y="1348">Pledge</text>
<text x="16" y="1364">~</text>
<text x="168" y="1364">~</text>
<text x="312" y="1364">~</text>
<text x="456" y="1364">~</text>
<text x="560" y="1364">~</text>
<text x="76" y="1396">opt.</text>
<text x="112" y="1396">TLS</text>
<text x="96" y="1412">Enroll-Resp</text>
<text x="88" y="1428">eStatus</text>
<text x="16" y="1460">~</text>
<text x="168" y="1460">~</text>
<text x="312" y="1460">~</text>
<text x="456" y="1460">~</text>
<text x="560" y="1460">~</text>
<text x="16" y="1476">(9)</text>
<text x="64" y="1476">Voucher</text>
<text x="124" y="1476">Status</text>
<text x="192" y="1476">Telemetry</text>
<text x="276" y="1476">(including</text>
<text x="352" y="1476">backend</text>
<text x="436" y="1476">interaction)</text>
<text x="16" y="1492">~</text>
<text x="168" y="1492">~</text>
<text x="312" y="1492">~</text>
<text x="456" y="1492">~</text>
<text x="560" y="1492">~</text>
<text x="236" y="1524">mTLS</text>
<text x="240" y="1540">vStatus</text>
<text x="436" y="1556">mTLS</text>
<text x="368" y="1572">req</text>
<text x="412" y="1572">device</text>
<text x="480" y="1572">audit-log</text>
<text x="396" y="1588">device</text>
<text x="464" y="1588">audit-log</text>
<text x="264" y="1620">[verify</text>
<text x="340" y="1620">audit-log]</text>
<text x="312" y="1636">|</text>
<text x="16" y="1652">~</text>
<text x="168" y="1652">~</text>
<text x="312" y="1652">~</text>
<text x="456" y="1652">~</text>
<text x="560" y="1652">~</text>
<text x="20" y="1668">(10)</text>
<text x="68" y="1668">Enroll</text>
<text x="124" y="1668">Status</text>
<text x="192" y="1668">Telemetry</text>
<text x="16" y="1684">~</text>
<text x="168" y="1684">~</text>
<text x="312" y="1684">~</text>
<text x="456" y="1684">~</text>
<text x="560" y="1684">~</text>
<text x="236" y="1716">mTLS</text>
<text x="240" y="1732">eStatus</text>
<text x="16" y="1764">~</text>
<text x="168" y="1764">~</text>
<text x="312" y="1764">~</text>
<text x="456" y="1764">~</text>
<text x="560" y="1764">~</text>
<text x="20" y="1780">(11)</text>
<text x="64" y="1780">Query</text>
<text x="116" y="1780">Pledge</text>
<text x="172" y="1780">Status</text>
<text x="16" y="1796">~</text>
<text x="168" y="1796">~</text>
<text x="312" y="1796">~</text>
<text x="456" y="1796">~</text>
<text x="560" y="1796">~</text>
<text x="76" y="1828">opt.</text>
<text x="112" y="1828">TLS</text>
<text x="96" y="1844">tStatus</text>
<text x="96" y="1860">pStatus</text>
<text x="16" y="1892">~</text>
<text x="168" y="1892">~</text>
<text x="312" y="1892">~</text>
<text x="456" y="1892">~</text>
<text x="560" y="1892">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 |     discover     |                 |                 |            |
 |      pledge      |                 |                 |            |
 |    mDNS query    |                 |                 |            |
 |<-----------------|                 |                 |            |
 |----------------->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(1) Trigger Pledge Voucher-Request
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<------tPVR-------|                 |                 |            |
 |--------PVR------>|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(2) Trigger Pledge Enroll-Request
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<------tPER-------|                 |                 |            |
 |--------PER------>|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(3) Supply PVR to Registrar (including MASA interaction)
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<-----mTLS------>|                 |            |
 |                  |                 |                 |            |
 |                  |         [Registrar-Agent          |            |
 |                  |    authenticated&authorized?]     |            |
 |                  |                 |                 |            |
 |                  |-------PVR------>|                 |            |
 |                  |                 |                 |            |
 |                  |          [accept device?]         |            |
 |                  |                 |                 |            |
 |                  |                 |<------------mTLS------------>|
 |                  |                 |--------------RVR------------>|
 |                  |                 |                 ~            |
 |                  |                 |              [extract DomainID]
 |                  |                 |              [update audit-log]
 |                  |                 |                 ~            |
 |                  |                 |<-----------Voucher-----------|
 |                  |<----Voucher''---|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(4) Supply PER to Registrar (including Key Infrastructure interaction)
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<---((mTLS))---->|                 |            |
 |                  |-------PER------>|                 |            |
 |                  |                 |----[Request]--->|            |
 |                  |                 |<--[Certificate]-|            |
 |                  |<--Enroll-Resp---|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(5) Obtain CA Certificates
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<----(mTLS)----->|                 |            |
 |                  |<----caCerts-----|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(6) Supply Voucher to Pledge
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<-----Voucher''---|                 |                 |            |
 |------vStatus---->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(7) Supply CA Certificates to Pledge
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<-----caCerts-----|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(8) Supply Enroll-Response to Pledge
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<---Enroll-Resp---|                 |                 |            |
 |-----eStatus----->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(9) Voucher Status Telemetry (including backend interaction)
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<----(mTLS)----->|                 |            |
 |                  |-----vStatus---->|                 |            |
 |                  |                 |<-----------(mTLS)----------->|
 |                  |                 |-----req device audit-log---->|
 |                  |                 |<------device audit-log-------|
 |                  |                 |                 |            |
 |                  |        [verify audit-log]         |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(10) Enroll Status Telemetry
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<----(mTLS)----->|                 |            |
 |                  |-----eStatus---->|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
(11) Query Pledge Status
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<-----tStatus-----|                 |                 |            |
 |------pStatus---->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers" type="1">
  <t><xref target="tpvr"/> describes the acquisition exchange for the Pledge Voucher-Request initiated by the Registrar-Agent to the pledge.</t>
  <t><xref target="tper"/> describes the acquisition exchange for the Pledge Enroll-Request initiated by the Registrar-Agent to the pledge.</t>
  <t><xref target="pvr"/> describes the issuing exchange for the Voucher initiated by the Registrar-Agent to the registrar, including the interaction of the registrar with the MASA using the RVR <xref target="rvr_artifact"/>, as well as the artifact processing by these entities.</t>
  <t><xref target="per"/> describes the enroll exchange initiated by the Registrar-Agent to the registrar including the interaction of the registrar with the CA using the PER as well as the artifact processing by these entities.</t>
  <t><xref target="obtain_cacerts"/> describes the retrieval exchange for the optional CA certificate provisioning to the pledge initiated by the Registrar-Agent to the CA.</t>
  <t><xref target="voucher"/> describes the Voucher exchange initiated by the Registrar-Agent to the pledge and the returned status information.</t>
  <t><xref target="cacerts"/> describes the CA certificate exchange initiated by the Registrar-Agent to the pledge.</t>
  <t><xref target="enroll_response"/> describes the Enroll-Response exchange initiated by the Registrar-Agent to the pledge (containing a new pledge EE certificate) and the returned status information.</t>
  <t><xref target="vstatus"/> describes the Voucher Status telemetry exchange initiated by the Registrar-Agent to the registrar, including the interaction of the registrar with the MASA.</t>
  <t><xref target="estatus"/> describes the Enroll Status telemetry exchange initiated by the Registrar-Agent to the registrar.</t>
  <t><xref target="query"/> describes the Pledge Status exchange about the general bootstrapping state initiated by the Registrar-Agent to the pledge.</t>
</list></t>

<section anchor="tpvr"><name>Trigger Pledge Voucher-Request</name>

<t>The Registrar-Agent <bcp14>MUST</bcp14> begin the sequence of exchanges by sending the Pledge Voucher-Request Trigger (tPVR).
This assumes that the Registrar-Agent has already discovered the pledge, for instance as described in <xref target="discovery_uc2_ppa"/> based on DNS-SD or similar.</t>

<t>Optionally, TLS <bcp14>MAY</bcp14> be used to provide privacy for this exchange between the Registrar-Agent and the pledge (see <xref target="pledgehttps"/>).</t>

<t><xref target="exchangesfig_uc2_1"/> shows the acquisition of the Pledge Voucher-Request (PVR) and the following subsections describe the corresponding artifacts.</t>

<figure title="PVR acquisition exchange" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="256" width="576" viewBox="0 0 576 256" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,224" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,224" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,224" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,224" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,224" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,176 L 56,176" fill="none" stroke="black"/>
<path d="M 128,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,192 L 72,192" fill="none" stroke="black"/>
<path d="M 112,192 L 160,192" fill="none" stroke="black"/>
<path d="M 24,208 L 80,208" fill="none" stroke="black"/>
<path d="M 112,208 L 160,208" fill="none" stroke="black"/>
<polygon class="arrowhead" points="168,208 156,202.4 156,213.6" fill="black" transform="rotate(0,160,208)"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,192 20,186.4 20,197.6" fill="black" transform="rotate(180,24,192)"/>
<polygon class="arrowhead" points="32,176 20,170.4 20,181.6" fill="black" transform="rotate(180,24,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(1)</text>
<text x="64" y="132">Trigger</text>
<text x="124" y="132">Pledge</text>
<text x="216" y="132">Voucher-Request</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="76" y="180">opt.</text>
<text x="112" y="180">TLS</text>
<text x="92" y="196">tPVR</text>
<text x="96" y="212">PVR</text>
<text x="16" y="244">~</text>
<text x="168" y="244">~</text>
<text x="312" y="244">~</text>
<text x="456" y="244">~</text>
<text x="560" y="244">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(1) Trigger Pledge Voucher-Request
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<------tPVR-------|                 |                 |            |
 |--------PVR------>|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> trigger the pledge to create a PVR via HTTP(S) POST to the pledge endpoint at <spanx style="verb">/.well-known/brski/tpvr</spanx>.
The request body <bcp14>MUST</bcp14> contain the JSON-based Pledge Voucher-Request Trigger (tPVR) artifact as defined in <xref target="tpvr_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/json</spanx> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon receiving a valid tPVR, the pledge <bcp14>MUST</bcp14> reply with the PVR artifact as defined in <xref target="pvr_artifact"/> in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Note that the pledge provisionally accepts the registrar EE certificate contained in the tPVR until it receives the voucher (see <xref target="agt_prx"/>).</t>

<t>If the pledge is unable to create the PVR, it <bcp14>SHOULD</bcp14> respond with an HTTP error status code to the Registrar-Agent.
The following client error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detects an error in the format of the request, e.g., missing field, wrong data types, etc. or if the request is not valid JSON even though the Content-Type request header field was set to <spanx style="verb">application/json</spanx></t>
  <t>406 Not Acceptable: if the Accept request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/voucher-jws+json</spanx></t>
  <t>415 Unsupported Media Type: if the Content-Type request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/json</spanx></t>
</list></t>

<t>The pledge <bcp14>MAY</bcp14> use the response body to signal success/failure details to the service technician operating the Registrar-Agent.</t>

<section anchor="tpvr_artifact"><name>Request Artifact: Pledge Voucher-Request Trigger (tPVR)</name>

<t>The Pledge Voucher-Request Trigger (tPVR) artifact <bcp14>SHALL</bcp14> be an unsigned data object, providing the necessary parameters for generating the Pledge Voucher-Request (PVR) artifact such that the Agent Proximity Assertion can be verified by registrar and MASA:
the registrar EE certificate and an agent-signed data object containing the product-serial-number and a timestamp.
The artifact is unsigned because at the time of receiving the tPVR, the pledge could not verify any signature.</t>

<t>For the JSON-based format used by this specification, the tPVR artifact <bcp14>SHALL</bcp14> be a UTF-8 encoded JSON document <xref target="RFC8259"/> that conforms with the CDDL <xref target="RFC8610"/> data model defined in <xref target="tpvr_CDDL_def"/>:</t>

<figure title="CDDL for Pledge Voucher-Request Trigger (pledgevoucherrequesttrigger)" anchor="tpvr_CDDL_def"><artwork type="cddl" align="left"><![CDATA[
  pledgevoucherrequesttrigger = {
    "agent-provided-proximity-registrar-cert": bytes,
    "agent-signed-data": bytes
  }
]]></artwork></figure>

<t>The <spanx style="verb">agent-provided-proximity-registrar-cert</spanx> member <bcp14>SHALL</bcp14> contain the base64-encoded registrar EE certificate in X.509 v3 (DER) format.
The <spanx style="verb">agent-signed-data</spanx> member <bcp14>SHALL</bcp14> contain the base64-encoded JWS Agent-Signed Data as defined in <xref target="jws-asd"/>.
<xref target="tpvr_example"/> summarizes the serialization the JSON tPVR artifact:</t>

<figure title="tPVR Representation in JSON" anchor="tpvr_example"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": BASE64(UTF8(JWS Agent-Signed Data))
}
]]></artwork></figure>

<section anchor="jws-asd"><name>JWS Agent-Signed Data</name>

<t>To enable alternative formats, the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the leaf <spanx style="verb">agent-signed-data</spanx> as binary.
For the JWS-signed JSON format used by this specification, the <spanx style="verb">agent-signed-data</spanx> leaf <bcp14>SHALL</bcp14> be a UTF-8 encoded JWS structure in "General JWS JSON Serialization Syntax" as defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/> signing the JSON Agent-Signed Data defined in <xref target="prm-asd"/>.
<xref target="asd_representation"/> summarizes this JWS structure for the <spanx style="verb">agent-signed-data</spanx> member of the tPVR artifact:</t>

<figure title="JWS Agent-Signed Data in General JWS JSON Serialization Syntax" anchor="asd_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON Agent-Signed Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON Agent-Signed Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="prm-asd"><name>JSON Agent-Signed Data</name>

<t>The JSON Agent-Signed Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the CDDL <xref target="RFC8610"/> data model defined in <xref target="prmasd_CDDL_def"/>:</t>

<figure title="CDDL for JSON Agent-Signed Data (prmasd)" anchor="prmasd_CDDL_def"><artwork type="cddl" align="left"><![CDATA[
  prmasd = {
    "created-on": tdate,
    "serial-number": text
  }
]]></artwork></figure>

<t>The <spanx style="verb">created-on</spanx> member <bcp14>SHALL</bcp14> contain the current date and time at tPVR creation as standard date/time string as defined in <xref section="5.6" sectionFormat="of" target="RFC3339"/>.</t>

<t>The <spanx style="verb">serial-number</spanx> member <bcp14>SHALL</bcp14> contain the product-serial-number of the pledge with which the Registrar-Agent assumes to communicate as string.
The format <bcp14>MUST</bcp14> correspond to the X520SerialNumber field of IDevID certificates.</t>

<t><xref target="prmasd_payload"/> below shows an example for the JSON Agent-Signed Data:</t>

<figure title="JSON Agent-Signed Data Example" anchor="prmasd_payload"><artwork type="json" align="left"><![CDATA[
{
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "vendor-pledge4711"
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the <spanx style="verb">agent-signed-data</spanx> member <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">kid</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded OCTET STRING value of the SubjectKeyIdentifier of the Registrar-Agent EE certificate as described in <xref target="agent_component"/></t>
</list></t>

<t><xref target="asd_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example for " anchor="asd_header"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="jws-signature"><name>JWS Signature</name>

<t>The Registrar-Agent <bcp14>MUST</bcp14> sign the <spanx style="verb">agent-signed-data</spanx> member using its EE credentials.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

</section>
</section>
</section>
<section anchor="pvr_artifact"><name>Response Artifact: Pledge Voucher-Request (PVR)</name>

<t>The Pledge Voucher-Request (PVR) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the pledge, containing an extended Voucher-Request artifact based on <xref section="5.2" sectionFormat="of" target="RFC8995"/>.
The BRSKI-PRM related enhancements of the <spanx style="verb">ietf-voucher-request</spanx> YANG module are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>For the JWS-signed JSON format used by this specification, the PVR artifact <bcp14>MUST</bcp14> be a JWS Voucher structure as defined in <xref target="I-D.ietf-anima-jws-voucher"/>, which <bcp14>MUST</bcp14> contain the JSON PVR Data defined in <xref target="pvr_data"/> in the JWS Payload.
<xref target="pvr_representation"/> summarizes the serialization of the JWS-signed JSON PVR artifact:</t>

<figure title="PVR Representation in General JWS JSON Serialization Syntax" anchor="pvr_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON PVR Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<section anchor="pvr_data"><name>JSON PVR Data</name>

<t>The JSON PVR Data <bcp14>MUST</bcp14> contain the following fields of the <spanx style="verb">ietf-voucher-request</spanx> YANG module as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>;
note that this makes optional leaves in the YANG definition mandatory for the PVR artifact:</t>

<t><list style="symbols">
  <t><spanx style="verb">created-on</spanx>: <bcp14>SHALL</bcp14> contain the current date and time at PVR creation as standard date/time string as defined in <xref section="5.6" sectionFormat="of" target="RFC3339"/>;
if the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the <spanx style="verb">created-on</spanx> value from the JSON Agent-Signed Data received with the tPVR artifact and <bcp14>SHOULD</bcp14> advance that value based on its local clock to reflect the PVR creation time</t>
  <t><spanx style="verb">nonce</spanx>: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number</t>
  <t><spanx style="verb">serial-number</spanx>: <bcp14>SHALL</bcp14> contain the product-serial-number in the X520SerialNumber field of the pledge IDevID certificate as string as defined in <xref section="2.3.1" sectionFormat="of" target="RFC8995"/></t>
  <t><spanx style="verb">assertion</spanx>: <bcp14>SHALL</bcp14> contain the assertion type <spanx style="verb">agent-proximity</spanx> to indicate the pledge request (different from BRSKI <xref target="RFC8995"/>)</t>
  <t><spanx style="verb">agent-provided-proximity-registrar-cert</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded registrar EE certificate provided in the tPVR by the Registrar-Agent;
enables the registrar and MASA to verify the Agent Proximity Assertion</t>
  <t><spanx style="verb">agent-signed-data</spanx>: <bcp14>SHALL</bcp14> contain the same value as the <spanx style="verb">agent-signed-data</spanx> member in the tPVR provided by the Registrar-Agent;
enables the registrar and MASA to verify the Agent Proximity Assertion;
also enables the registrar to log which Registrar-Agent was in contact with the pledge</t>
</list></t>

<t><xref target="pvr_data_example"/> below shows an example for the JSON PVR Data:</t>

<figure title="JSON PVR Data Example" anchor="pvr_data_example"><artwork type="json" align="left"><![CDATA[
{
  "ietf-voucher-request:voucher": {
     "created-on": "2021-04-16T00:00:02.000Z",
     "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
     "serial-number": "vendor-pledge4711",
     "assertion": "agent-proximity",
     "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
     "agent-signed-data": "base64encodedvalue=="
  }
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-1"><name>JWS Protected Header</name>

<t>The JWS Protected Header <bcp14>MUST</bcp14> follow the definitions of <xref section="3.3" sectionFormat="of" target="I-D.ietf-anima-jws-voucher"/>.
If the certificate chain is not included in the <spanx style="verb">x5c</spanx> Header Parameter, it <bcp14>MUST</bcp14> be available at the domain registrar for verification of the pledge IDevID certificate.</t>

</section>
<section anchor="jws-signature-1"><name>JWS Signature</name>

<t>The pledge <bcp14>MUST</bcp14> sign the PVR artifact using its IDevID credential following the definitions of <xref section="3.4" sectionFormat="of" target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
</section>
</section>
<section anchor="tper"><name>Trigger Pledge Enroll-Request</name>

<t>Once the Registrar-Agent has received the PVR it can trigger the pledge to generate a Pledge Enroll-Request (PER).</t>

<t>Optionally, TLS <bcp14>MAY</bcp14> be used to provide privacy for this exchange between the Registrar-Agent and the pledge (see <xref target="pledgehttps"/>).</t>

<t><xref target="exchangesfig_uc2_2"/> shows the acquisition of the PER and the following subsections describe the corresponding artifacts.</t>

<figure title="PER acquisition exchange" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="256" width="576" viewBox="0 0 576 256" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,224" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,224" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,224" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,224" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,224" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,176 L 56,176" fill="none" stroke="black"/>
<path d="M 128,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,192 L 72,192" fill="none" stroke="black"/>
<path d="M 112,192 L 160,192" fill="none" stroke="black"/>
<path d="M 24,208 L 80,208" fill="none" stroke="black"/>
<path d="M 112,208 L 160,208" fill="none" stroke="black"/>
<polygon class="arrowhead" points="168,208 156,202.4 156,213.6" fill="black" transform="rotate(0,160,208)"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,192 20,186.4 20,197.6" fill="black" transform="rotate(180,24,192)"/>
<polygon class="arrowhead" points="32,176 20,170.4 20,181.6" fill="black" transform="rotate(180,24,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(2)</text>
<text x="64" y="132">Trigger</text>
<text x="124" y="132">Pledge</text>
<text x="212" y="132">Enroll-Request</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="76" y="180">opt.</text>
<text x="112" y="180">TLS</text>
<text x="92" y="196">tPER</text>
<text x="96" y="212">PER</text>
<text x="16" y="244">~</text>
<text x="168" y="244">~</text>
<text x="312" y="244">~</text>
<text x="456" y="244">~</text>
<text x="560" y="244">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(2) Trigger Pledge Enroll-Request
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<------tPER-------|                 |                 |            |
 |--------PER------>|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> trigger the pledge to create the PER via HTTP(S) POST to the pledge endpoint at <spanx style="verb">/.well-known/brski/tper</spanx>.
The request body <bcp14>MUST</bcp14> contain the JSON-based Pledge Enroll-Request Trigger (tPER) artifact as defined in <xref target="tper_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/json</spanx> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon receiving a valid tPER, the pledge <bcp14>MUST</bcp14> reply with the PER artifact as defined in <xref target="per_artifact"/> in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>If the pledge is unable to create the PER, it <bcp14>SHOULD</bcp14> respond with an HTTP error status code to the Registrar-Agent.
The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detects an error in the format of the request</t>
  <t>406 Not Acceptable: if the Accept request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/jose+json</spanx></t>
  <t>415 Unsupported Media Type: if the Content-Type request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/json</spanx></t>
</list></t>

<t>The pledge <bcp14>MAY</bcp14> use the response body to signal success/failure details to the service technician operating the Registrar-Agent.</t>

<section anchor="tper_artifact"><name>Request Artifact: Pledge Enroll-Request Trigger (tPER)</name>

<t>The Pledge Enroll-Request Trigger (tPVR) artifact <bcp14>SHALL</bcp14> be an unsigned data object, providing enrollment parameters.
This document specifies only the basic parameter for a generic, device-related LDevID certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing Key Infrastructure.</t>

<t>The Pledge Enroll-Request Trigger (tPER) artifact <bcp14>MAY</bcp14> be used to provide additional enrollment parameters such as CSR attributes.
How to provide and use such additional data is out of scope for this specification.</t>

<t>For the JSON-based format used by this specification, the tPER artifact <bcp14>MUST</bcp14> be a UTF-8 encoded JSON document <xref target="RFC8259"/> that conforms with the CDDL <xref target="RFC8610"/> data model defined in <xref target="tper_CDDL_def"/>:</t>

<figure title="CDDL for Pledge Enroll-Request Trigger (pledgeenrollrequesttrigger)" anchor="tper_CDDL_def"><artwork type="cddl" align="left"><![CDATA[
pledgeenrollrequesttrigger = {
        "enroll-type": $enroll-type
}

$enroll-type /= "enroll-generic-cert"
]]></artwork></figure>

<t>The <spanx style="verb">enroll-type</spanx> member allows for specifying which type of certificate is to be enrolled.
As shown in <xref target="tper_CDDL_def"/>, BRSKI-PRM only defines the enumeration value <spanx style="verb">enroll-generic-cert</spanx> for the enrollment of the generic, device-related LDevID certificate.
Other specifications using this artifact may define further enum values, e.g., to bootstrap application-related EE certificates with additional CSR attributes.</t>

</section>
<section anchor="per_artifact"><name>Response Artifact: Pledge Enroll-Request (PER)</name>

<t>The Pledge Enroll-Request (PER) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the pledge, containing a PKCS#10 Certificate Signing Request (CSR) <xref target="RFC2986"/>.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID of the pledge, POI is provided.</t>

<t>For the JWS-signed JSON format used by this specification, the PER artifact <bcp14>MUST</bcp14> use the "General JWS JSON Serialization Syntax" defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/>, which <bcp14>MUST</bcp14> contain the JSON CSR Data defined in <xref target="per_data"/> in the JWS Payload.
<xref target="per_representation"/> summarizes the serialization of the JWS-signed JSON PER artifact:</t>

<figure title="PER Representation in General JWS JSON Serialization Syntax" anchor="per_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON CSR Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON CSR Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="per_data"><name>JSON CSR Data</name>

<t>The JSON CSR Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the data model described by the <spanx style="verb">csr-grouping</spanx> of the <spanx style="verb">ietf-ztp-types</spanx> YANG module defined in <xref section="3.2" sectionFormat="of" target="I-D.ietf-netconf-sztp-csr"/> and <bcp14>MUST</bcp14> be encoded using the rules defined in <xref target="RFC7951"/>.
Note that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of CSRs in different formats used by CMP and CMC.
For PKCS#10 CSRs as used in BRSKI and BRSKI-PRM, the <spanx style="verb">p10-csr</spanx> case of the <spanx style="verb">csr-grouping</spanx> <bcp14>MUST</bcp14> be used.</t>

<t><xref target="csr_example"/> below shows an example for the JSON CSR Data:</t>

<figure title="JSON CSR Data Example" anchor="csr_example"><artwork align="left"><![CDATA[
{
  "ietf-ztp-types": {
     "p10-csr": "base64encodedvalue=="
   }
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-2"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the PER artifact <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded pledge EE certificate used to sign the PER artifact;
it <bcp14>SHOULD</bcp14> also contain the certificate chain for this certificate;
if the certificate chain is not included in the <spanx style="verb">x5c</spanx> Header Parameter, it <bcp14>MUST</bcp14> be available at the domain registrar for verification</t>
  <t><spanx style="verb">crit</spanx>: <bcp14>SHALL</bcp14> indicate the extension Header Parameter <spanx style="verb">created-on</spanx> to ensure that it must be understood and validated by the receiver as defined in <xref section="4.1.11" sectionFormat="of" target="RFC7515"/></t>
</list></t>

<t>In addition, the JWS Protected Header of the PER artifact <bcp14>MUST</bcp14> contain the following extension Header Parameter:</t>

<t><list style="symbols">
  <t><spanx style="verb">created-on</spanx>: <bcp14>SHALL</bcp14> contain the current date and time at PER creation as standard date/time string as defined in <xref section="5.6" sectionFormat="of" target="RFC3339"/>;
if the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the <spanx style="verb">created-on</spanx> value from the JSON Agent-Signed Data received with the tPVR artifact and <bcp14>SHOULD</bcp14> advance that value based on its local clock to reflect the PER creation time</t>
</list></t>

<t>The new protected Header Parameter <spanx style="verb">created-on</spanx> is introduced to reflect freshness of the PER.
It allows the registrar to verify the timely correlation between the PER artifact and previous exchanges, i.e., <spanx style="verb">created-on</spanx> of PER &gt;= <spanx style="verb">created-on</spanx> of PVR &gt;= <spanx style="verb">created-on</spanx> of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER artifact from the same pledge in case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t><xref target="per_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example within PER" anchor="per_header"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit": ["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

</section>
<section anchor="jws-signature-2"><name>JWS Signature</name>

<t>The pledge <bcp14>MUST</bcp14> sign the PER artifact using its IDevID credential.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment can be supported in a similar way.
In this case, the pledge <bcp14>MAY</bcp14> use its current, potentially application-related EE credential instead of its IDevID credential to sign the PER artifact.
The issuing CA can associate the re-enrollment request with the pledge based on the previously issued and still valid EE certificate.
Note that a pledge that does not have synchronized time needs to advance the last known current date and time based on its local clock over a longer period, which also requires persisting the local clock advancements across reboots.</t>

</section>
</section>
</section>
<section anchor="pvr"><name>Supply PVR to Registrar (including MASA interaction)</name>

<t>Once the Registrar-Agent has acquired one or more PVR and PER object pairs, it starts the interaction with the domain registrar.
Collecting multiple pairs allows bulk bootstrapping of several pledges using the same session with the registrar.</t>

<t>The Registrar-Agent <bcp14>MUST</bcp14> establish a TLS session to the registrar with mutual authentication.
In contrast to BRSKI <xref target="RFC8995"/>, the TLS client authentication uses the Registrar-Agent EE certificate instead of the pledge IDevID certificate.
Consequently, the domain registrar can distinguish BRSKI (pledge-initiator-mode) from BRSKI-PRM (pledge-responder-mode).</t>

<t>The registrar <bcp14>SHOULD</bcp14> verify the TLS client authentication of the Registrar-Agent, in particular if the TLS session is used to obtain the Registrar-Agent EE certificate (see <xref target="registrar_component"/>).
Note that authentication and authorization of the pledge verified during the TLS session based on the signatures inside the PVR artifact.</t>

<t>As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the Registrar-Agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t><xref target="exchangesfig_uc2_3"/> shows the voucher-request processing and the following subsections describe the corresponding artifacts.</t>

<figure title="Voucher issuing exchange" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="480" width="576" viewBox="0 0 576 480" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,448" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,448" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,192" fill="none" stroke="black"/>
<path d="M 312,240 L 312,272" fill="none" stroke="black"/>
<path d="M 312,304 L 312,448" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,312" fill="none" stroke="black"/>
<path d="M 456,432 L 456,448" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,352" fill="none" stroke="black"/>
<path d="M 560,400 L 560,448" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 176,176 L 216,176" fill="none" stroke="black"/>
<path d="M 256,176 L 304,176" fill="none" stroke="black"/>
<path d="M 176,256 L 224,256" fill="none" stroke="black"/>
<path d="M 256,256 L 304,256" fill="none" stroke="black"/>
<path d="M 320,320 L 416,320" fill="none" stroke="black"/>
<path d="M 456,320 L 552,320" fill="none" stroke="black"/>
<path d="M 320,336 L 424,336" fill="none" stroke="black"/>
<path d="M 456,336 L 552,336" fill="none" stroke="black"/>
<path d="M 320,416 L 408,416" fill="none" stroke="black"/>
<path d="M 472,416 L 552,416" fill="none" stroke="black"/>
<path d="M 176,432 L 208,432" fill="none" stroke="black"/>
<path d="M 280,432 L 304,432" fill="none" stroke="black"/>
<polygon class="arrowhead" points="560,336 548,330.4 548,341.6" fill="black" transform="rotate(0,552,336)"/>
<polygon class="arrowhead" points="560,320 548,314.4 548,325.6" fill="black" transform="rotate(0,552,320)"/>
<polygon class="arrowhead" points="328,416 316,410.4 316,421.6" fill="black" transform="rotate(180,320,416)"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(180,320,320)"/>
<polygon class="arrowhead" points="312,256 300,250.4 300,261.6" fill="black" transform="rotate(0,304,256)"/>
<polygon class="arrowhead" points="312,176 300,170.4 300,181.6" fill="black" transform="rotate(0,304,176)"/>
<polygon class="arrowhead" points="184,432 172,426.4 172,437.6" fill="black" transform="rotate(180,176,432)"/>
<polygon class="arrowhead" points="184,176 172,170.4 172,181.6" fill="black" transform="rotate(180,176,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(3)</text>
<text x="60" y="132">Supply</text>
<text x="104" y="132">PVR</text>
<text x="132" y="132">to</text>
<text x="184" y="132">Registrar</text>
<text x="268" y="132">(including</text>
<text x="344" y="132">backend</text>
<text x="428" y="132">interaction)</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="236" y="180">mTLS</text>
<text x="308" y="212">[Registrar-Agent</text>
<text x="308" y="228">authenticated&amp;authorized?]</text>
<text x="240" y="260">PVR</text>
<text x="280" y="292">[accept</text>
<text x="348" y="292">device?]</text>
<text x="436" y="324">mTLS</text>
<text x="440" y="340">RVR</text>
<text x="456" y="356">~</text>
<text x="460" y="372">[extract</text>
<text x="536" y="372">DomainID]</text>
<text x="456" y="388">[update</text>
<text x="532" y="388">audit-log]</text>
<text x="456" y="404">~</text>
<text x="440" y="420">Voucher</text>
<text x="244" y="436">Voucher'</text>
<text x="16" y="468">~</text>
<text x="168" y="468">~</text>
<text x="312" y="468">~</text>
<text x="456" y="468">~</text>
<text x="560" y="468">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(3) Supply PVR to Registrar (including backend interaction)
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<-----mTLS------>|                 |            |
 |                  |                 |                 |            |
 |                  |         [Registrar-Agent          |            |
 |                  |    authenticated&authorized?]     |            |
 |                  |                 |                 |            |
 |                  |-------PVR------>|                 |            |
 |                  |                 |                 |            |
 |                  |          [accept device?]         |            |
 |                  |                 |                 |            |
 |                  |                 |<------------mTLS------------>|
 |                  |                 |--------------RVR------------>|
 |                  |                 |                 ~            |
 |                  |                 |              [extract DomainID]
 |                  |                 |              [update audit-log]
 |                  |                 |                 ~            |
 |                  |                 |<-----------Voucher-----------|
 |                  |<----Voucher''---|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>As a first step of the interaction with the domain registrar, the Registrar-Agent <bcp14>SHALL</bcp14> supply the PVR artifact(s) to the registrar via HTTP-over-TLS POST to the registrar endpoint at <spanx style="verb">/.well-known/brski/requestvoucher</spanx>.
Note that this is the same endpoint as for BRSKI described in <xref section="5.2" sectionFormat="of" target="RFC8995"/>.
The request body <bcp14>MUST</bcp14> contain one previously acquired PVR artifact as defined in <xref target="pvr_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Upon receiving a PVR artifact, the registrar accepts or declines the request to join the domain.
For this, it <bcp14>MUST</bcp14> perform pledge authorization as defined in <xref section="5.3" sectionFormat="of" target="RFC8995"/>.
Due to the Registrar-Agent in the middle, the registrar <bcp14>MUST</bcp14> verify in addition that</t>

<t><list style="symbols">
  <t>the <spanx style="verb">agent-provided-proximity-registrar-cert</spanx> field of the PVR contains a registrar EE certificate signed by the same domain owner as the registrar EE certificate used to sign the RVR;
note that this check allows for installations with multiple domain registrars and for registrar EE certificate renewal between exchanges with the Registrar-Agent (see <xref target="arch_nomadic"/>);
in many installations with a single registrar the contained certificate is identical to the signing certificate</t>
  <t>the <spanx style="verb">agent-signed-data</spanx> field of the PVR is signed with the private key corresponding to the Registrar-Agent EE certificate as known by the registrar (see <xref target="registrar_component"/>);
this is done via the SubjectKeyIdentifier of the certificate in the <spanx style="verb">kid</spanx> Header Parameter of the JWS Protected Header of the <spanx style="verb">agent-signed-data</spanx> field.</t>
  <t>the product-serial-number inside the <spanx style="verb">agent-signed-data</spanx> is equal to the <spanx style="verb">serial-number</spanx> field of the PVR as well as the X520SerialNumber field of the pledge IDevID certificate, which is contained in the JWS Protected Header of the PVR.</t>
  <t>the Registrar-Agent EE certificate is still valid;
this is necessary to avoid that a rogue Registrar-Agent generates <spanx style="verb">agent-signed-data</spanx> objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.</t>
</list></t>

<t>If the registrar is unable to process the request or validate the PVR, it <bcp14>MUST</bcp14> respond with an HTTP client error status code to the Registrar-Agent.
The following client error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the registrar detects an error in the format of the request</t>
  <t>403 Forbidden: if the registrar detected that one or more security related fields are not valid or if the pledge-provided information could not be used with automated allowance</t>
  <t>406 Not Acceptable: if the Accept request header field indicates a type that is unknown or unsupported</t>
  <t>415 Unsupported Media Type: if the Content-Type request header field indicates a type that is unknown or unsupported</t>
</list></t>

<t>Otherwise, the registrar converts the PVR artifact to a Registrar Voucher-Request (RVR) artifact (see <xref target="rvr_artifact"/>) and starts the backend interaction with the MASA.</t>

<t>Optionally, the domain registrar <bcp14>MAY</bcp14> respond with an HTTP 202 Accepted response status code to the Registrar-Agent at this point following <xref section="5.6" sectionFormat="of" target="RFC8995"/>, while the rules defined for the pledge also apply to the Registrar-Agent;
in this case, the registrar still continues with the MASA interaction to provide the Voucher artifact to the retry request.</t>

<t>The registrar <bcp14>MAY</bcp14> use the response body to signal success/failure details to the service technician operating the Registrar-Agent.</t>

<section anchor="masa_interaction"><name>MASA Interaction</name>

<t>The domain registrar <bcp14>MUST</bcp14> establish a TLS session with mutual authentication to the MASA of the pledge according to <xref section="5.4" sectionFormat="of" target="RFC8995"/>.
It requests the voucher from the MASA according to <xref section="5.5" sectionFormat="of" target="RFC8995"/> via HTTP-over-TLS POST to the MASA endpoint at <spanx style="verb">/.well-known/brski/requestvoucher</spanx>.
The request body <bcp14>MUST</bcp14> contain the RVR artifact as defined in <xref target="rvr_artifact"/>.
In the request header, the Content-Type field and the Accept field <bcp14>MUST</bcp14> be set to the same media type as the incoming PVR artifact.
For the default format used in this specification, this is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The assumption is that a pledge typically supports a single artifact format and creates the PVR in the supported format;
to ensure that the pledge is able to process the voucher, the registrar requests this format via the HTTP Accept header field when requesting the voucher.
Further, the RVR artifact and the PVR artifact inside should also use the same format to limit the number of required format encoders.
Note that BRSKI-PRM allows for alternative formats such as CMS-signed JSON as used in BRSKI <xref target="RFC8995"/> or COSE-signed CBOR for constrained environments, when defined by other specifications.
Overall, a MASA responsible for BRSKI-PRM capable pledges <bcp14>MUST</bcp14> support the same formats as supported by those pledges.</t>

<t>Once the MASA receives the RVR artifact, it <bcp14>MUST</bcp14> perform the verification as described in <xref section="5.5" sectionFormat="of" target="RFC8995"/>.
Depending on policy, the MASA <bcp14>MAY</bcp14> choose the type of assertion to perform.
For the Agent Proximity Assertion of BRSKI-PRM (see <xref target="agt_prx"/>), the MASA <bcp14>MUST</bcp14> skip the verification described in <xref section="5.5.5" sectionFormat="of" target="RFC8995"/> and instead <bcp14>MUST</bcp14> verify for the PVR contained in the <spanx style="verb">prior-signed-voucher-request</spanx> field of the RVR that</t>

<t><list style="symbols">
  <t>the <spanx style="verb">agent-provided-proximity-registrar-cert</spanx> field contains an EE certificate that is signed by the same domain owner as the EE certificate/credentials used to sign the RVR;
note that this check allows for installations with multiple domain registrars and for registrar EE certificate renewal while PVRs are collected by the Registrar-Agent</t>
  <t>the registrar EE certificate in the <spanx style="verb">agent-provided-proximity-registrar-cert</spanx> field and the Registrar-Agent EE certificate in the <spanx style="verb">agent-sign-cert</spanx> field of the RVR are signed by the same domain owner.</t>
  <t>the <spanx style="verb">agent-signed-data</spanx> field is signed with the credentials corresponding to the Registrar-Agent EE certificate in the <spanx style="verb">agent-sign-cert</spanx> field of the RVR;
this is done via the SubjectKeyIdentifier of the certificate in the <spanx style="verb">kid</spanx> Header Parameter of the JWS Protected Header in the <spanx style="verb">agent-signed-data</spanx> field.</t>
  <t>the product-serial-number inside the <spanx style="verb">agent-signed-data</spanx> is equal to the <spanx style="verb">serial-number</spanx> field of PVR and the <spanx style="verb">serial-number</spanx> field of the RVR as well as the X520SerialNumber field of the pledge IDevID certificate, which is contained in the JWS Protected Header of the PVR.</t>
</list></t>

<t>If the <spanx style="verb">agent-sign-cert</spanx> field in the RVR is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value instead of failing the verification, e.g., "logged" or "verified".</t>

<t>If the verification fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP client error status code to the registrar.
The client error status codes are kept the same as defined in <xref section="5.6" sectionFormat="of" target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the voucher-request is not signed correctly or is stale or if the pledge has another outstanding voucher that cannot be overridden</t>
  <t>404 Not Found: if the request is for a device that is not known to the MASA</t>
  <t>406 Not Acceptable: if a voucher of the desired type or that uses the desired algorithms (as indicated by the "Accept" header fields and algorithms used in the signature) cannot be issued as such because the MASA knows the pledge cannot process that type</t>
  <t>415 Unsupported Media Type: if the request uses an artifact format or Accept header value that is not supported by the MASA</t>
</list></t>

<t>Otherwise, the MASA creates a Voucher artifact as defined in <xref target="voucher_artifact"/> and updates the audit-log as described in <xref section="5.5" sectionFormat="of" target="RFC8995"/>.
The Voucher is then supplied to the registrar within the body of an HTTP 200 OK response according to <xref section="5.6" sectionFormat="of" target="RFC8995"/>.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to the media type of the incoming RVR artifact.
For the default format used in this specification, this is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="supply-voucher-to-registrar-agent"><name>Supply Voucher to Registrar-Agent</name>

<t>After receiving the Voucher from the MASA, the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in <xref section="5.6" sectionFormat="of" target="RFC8995"/>.
It then countersigns the Voucher for delivery to the pledge via the Registrar-Agent.</t>

<t>The registrar <bcp14>MUST</bcp14> reply to the Registrar-Agent with the Registrar-Countersigned Voucher artifact (Voucher') as defined in <xref target="rcv_artifact"/> in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to the media type of the incoming PVR artifact.
For the default format used in this specification, this is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>If the domain registrar is unable to return the Voucher, it <bcp14>MUST</bcp14> respond with an HTTP server error status code to the Registrar-Agent.
The following server error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>500 Internal Server Error: if both Registrar-Agent request and MASA response are valid, but the registrar still failed to return the Voucher, e.g., due to missing configuration or a program failure</t>
  <t>502 Bad Gateway: if the registrar received an invalid response from the MASA</t>
  <t>503 Service Unavailable: if a simple retry of the Registrar-Agent request might lead to a successful response;
this error response <bcp14>SHOULD</bcp14> include the <spanx style="verb">Retry-After</spanx> response header field with an appropriate value</t>
  <t>504 Gateway Timeout: if the backend request to the MASA timed out</t>
</list></t>

</section>
<section anchor="request-artifact-pledge-voucher-request-pvr"><name>Request Artifact: Pledge Voucher-Request (PVR)</name>

<t>Identical to the PVR artifact received from the pledge as defined in <xref target="pvr_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify PVRs.</t>

</section>
<section anchor="rvr_artifact"><name>Backend Request Artifact: Registrar Voucher-Request (RVR)</name>

<t>The Registrar Voucher-Request (RVR) artifact <bcp14>SHALL</bcp14> be an extended Voucher-Request artifact based on <xref section="5.5" sectionFormat="of" target="RFC8995"/>.
The BRSKI-PRM related enhancements of the <spanx style="verb">ietf-voucher-request</spanx> YANG module are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>For the JWS-signed JSON format used by this specification, the RVR artifact <bcp14>MUST</bcp14> be a JWS Voucher structure as defined in <xref target="I-D.ietf-anima-jws-voucher"/>, which <bcp14>MUST</bcp14> contain the JSON RVR Data defined in <xref target="rvr_data"/> in the JWS Payload.
<xref target="rvr_representation"/> summarizes the serialization of the JWS-signed JSON RVR artifact:</t>

<figure title="RVR Representation in General JWS JSON Serialization Syntax" anchor="rvr_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON RVR Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<section anchor="rvr_data"><name>JSON RVR Data</name>

<t>The JSON RVR Data <bcp14>MUST</bcp14> contain the following fields of the <spanx style="verb">ietf-voucher-request</spanx> YANG module as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>;
note that this makes optional leaves in the YANG definition mandatory for the RVR artifact:</t>

<t><list style="symbols">
  <t><spanx style="verb">created-on</spanx>: <bcp14>SHALL</bcp14> contain the current date and time at RVR creation as standard date/time string as defined in <xref section="5.6" sectionFormat="of" target="RFC3339"/></t>
  <t><spanx style="verb">nonce</spanx>: <bcp14>SHALL</bcp14> contain a copy of the <spanx style="verb">nonce</spanx> field from the JSON PVR Data
the registrar provides this information to assure successful verification of Registrar-Agent proximity based on the agent-signed-data</t>
  <t><spanx style="verb">serial-number</spanx>: <bcp14>SHALL</bcp14> contain the product-serial-number of the pledge;
note the required verification by the registrar defined in <xref target="pvr"/></t>
  <t><spanx style="verb">idevid-issuer</spanx>: <bcp14>SHALL</bcp14> contain the issuer value from the pledge IDevID certificate obtained from the PVR JWS Protected Header <spanx style="verb">x5c</spanx> field</t>
  <t><spanx style="verb">prior-signed-voucher-request</spanx>: <bcp14>SHALL</bcp14> contain the PVR artifact as received from the Registrar-Agent, see <xref target="tpvr"/></t>
</list></t>

<t>As BRSKI-PRM uses the Agent Proximity Assertion (see <xref target="agt_prx"/>), the JSON RVR Data <bcp14>MUST</bcp14> also contain the following fields:</t>

<t><list style="symbols">
  <t><spanx style="verb">assertion</spanx>: <bcp14>SHALL</bcp14> contain the value <spanx style="verb">agent-proximity</spanx> to indicate successful verification of the Agent Proximity Assertion (see <xref target="agt_prx"/>) by the registrar</t>
  <t><spanx style="verb">agent-sign-cert</spanx>: <bcp14>SHALL</bcp14> be a JSON array that contains the base64-encoded Registrar-Agent EE certificate as possessed by the registrar (see <xref target="registrar_component"/>) as the first item;
subsequent items <bcp14>MUST</bcp14> contain the corresponding certificate chain for verification at the MASA;
the field is used for verification of the <spanx style="verb">agent-signed-data</spanx> field of the contained PVR</t>
</list></t>

<t>Note that the <spanx style="verb">ietf-voucher-request</spanx> YANG module defines the leaf <spanx style="verb">agent-sign-cert</spanx> as binary;
this specification refines it as a JSON array structure similar to the <spanx style="verb">x5c</spanx> Header Parameter defined in <xref section="4.1.6" sectionFormat="of" target="RFC7515"/>.</t>

<t><xref target="rvr_data_example"/> below shows an example for the JSON RVR Data:</t>

<figure title="JSON RVR Data Example" anchor="rvr_data_example"><artwork type="json" align="left"><![CDATA[
{
  "ietf-voucher-request:voucher": {
     "created-on": "2022-01-04T02:37:39.235Z",
     "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
     "serial-number": "vendor-pledge4711",
     "idevid-issuer": "base64encodedvalue==",
     "prior-signed-voucher-request": "base64encodedvalue==",
     "assertion": "agent-proximity",
     "agent-sign-cert": [
       "base64encodedvalue==",
       "base64encodedvalue==",
       "..."
     ]
  }
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-3"><name>JWS Protected Header</name>

<t>The JWS Protected Header <bcp14>MUST</bcp14> follow the definitions of <xref section="3.3" sectionFormat="of" target="I-D.ietf-anima-jws-voucher"/>.
However, the <spanx style="verb">x5c</spanx> Header Parameter <bcp14>MUST</bcp14> also contain the certificate chain for verification at the MASA.</t>

</section>
<section anchor="jws-signature-3"><name>JWS Signature</name>

<t>The domain registrar <bcp14>MUST</bcp14> sign the RVR artifact using its EE credentials following the definitions of <xref section="3.4" sectionFormat="of" target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
</section>
<section anchor="voucher_artifact"><name>Backend Response Artifact: Voucher</name>

<t>The Voucher artifact is defined in <xref section="5.6" sectionFormat="of" target="RFC8995"/> (cf. "voucher response").
The only difference for BRSKI-PRM is that the <spanx style="verb">assertion</spanx> field <bcp14>MAY</bcp14> contain the value <spanx style="verb">agent-proximity</spanx> as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>, when the Agent-Proximity Assertion (see <xref target="agt_prx"/>) is performed by the MASA.</t>

<t>For the JWS-signed JSON format used by this specification, the Voucher artifact <bcp14>MUST</bcp14> be a JWS Voucher structure as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
It contains JSON Voucher Data in the JWS Payload, for which an example is given in <xref target="voucher_data_example"/>:</t>

<figure title="JSON RVR Data Example" anchor="voucher_data_example"><artwork type="json" align="left"><![CDATA[
{
  "ietf-voucher:voucher": {
    "created-on": "2022-01-04T00:00:02.000Z",
    "nonce": "base64encodedvalue==",
    "assertion": "agent-proximity",
    "pinned-domain-cert": "base64encodedvalue==",
    "serial-number": "vendor-pledge4711"
  }
}
]]></artwork></figure>

</section>
<section anchor="rcv_artifact"><name>Response Artifact: Registrar-Countersigned Voucher</name>

<t>The Registrar-Countersigned Voucher (Voucher') artifact <bcp14>SHALL</bcp14> be an extended Voucher artifact based on <xref section="5.6" sectionFormat="of" target="RFC8995"/> using the format defined in <xref target="voucher_artifact"/>.</t>

<t>For BRSKI-PRM, the domain registrar <bcp14>MUST</bcp14> add an additional JWS Protected Header and JWS Signature to the MASA-provided Voucher.
<xref target="rcv_representation"/> summarizes the serialization of the JWS-signed JSON Voucher' artifact:</t>

<figure title="Voucher' Representation in General JWS JSON Serialization Syntax" anchor="rcv_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(JSON Voucher Data),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header (MASA))),
      "signature": BASE64URL(JWS Signature (MASA))
    },
    {
      "protected": BASE64URL(UTF8(JWS Protected Header (Registrar))),
      "signature": BASE64URL(JWS Signature (Registrar))
    }
  ]
}
]]></artwork></figure>

<t>In BRSKI <xref target="RFC8995"/>, the registrar proves possession of its credential through the server authentication within the TLS session with the pledge.
While the pledge cannot verify the registrar certificate at the time of TLS session establishment, it can verify the TLS server certificate through the certificate in the <spanx style="verb">pinned-domain-cert</spanx> field upon receiving the Voucher artifact (see <xref section="5.6.2" sectionFormat="of" target="RFC8995"/>).</t>

<t>In BRSKI-PRM with the Registrar-Agent mediating all communication, this second signature provides verification and POP of the private key for the registrar EE certificate provided in the initial tPVR artifact from the Registrar-Agent (see <xref target="tpvr_artifact"/>).</t>

<t>Depending on the security policy of the operator, this signature can also be interpreted as explicit authorization of the registrar to install the contained trust anchor (i.e., pinned domain certificate).</t>

<section anchor="json-voucher-data"><name>JSON Voucher Data</name>

<t>As provided by the MASA inside the JWS Payload.
The domain registrar <bcp14>MUST NOT</bcp14> modify the JWS Payload.</t>

</section>
<section anchor="jws-protected-header-registrar"><name>JWS Protected Header (Registrar)</name>

<t>The registrar-added JWS Protected Header (Registrar) <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded registrar EE certificate used to sign the voucher as well as the certificate chain up to (but not including) the pinned domain certificate (the initial domain trust anchor);
the pinned domain certificate is already contained in the JSON Voucher Data</t>
</list></t>

<t>Note that for many installations with a single registrar credential, the registrar EE certificate is pinned.</t>

</section>
<section anchor="jws-signature-registrar"><name>JWS Signature (Registrar)</name>

<t>The signature is created by signing the registrar-added JWS Protected Header (Registrar) and the original JWS Payload produced by the MASA as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.
The registrar <bcp14>MUST</bcp14> use its EE credentials to sign.</t>

<t>Note that the credentials need to be the same as used for server authentication in the TLS session with the Registrar-Agent receiving this artifact (see <xref target="registrar_component"/>).</t>

</section>
</section>
</section>
<section anchor="per"><name>Supply PER to Registrar (including Key Infrastructure interaction)</name>

<t>After receiving the Voucher artifact, the Registrar-Agent sends the PER to the domain registrar within the same TLS session.</t>

<t>In case the TLS session to the registrar is already closed, the Registrar-Agent establishes a new session as described in <xref target="pvr"/>.
The registrar is able to correlate the PVR and PER artifacts based on the signatures and the contained product-serial-number.
Note that this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge.</t>

<t><xref target="exchangesfig_uc2_4"/> depicts exchanges for the PER request handling and the following subsections describe the corresponding artifacts.
Note that "Request" and "Certificate" do not denote BRSKI-PRM defined artifacts, but are data objects depending on the certificate management protocol used by the domain Key Infrastructure.</t>

<figure title="Enroll exchange" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="288" width="576" viewBox="0 0 576 288" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,256" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,256" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,256" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,256" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,256" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 176,176 L 216,176" fill="none" stroke="black"/>
<path d="M 256,176 L 304,176" fill="none" stroke="black"/>
<path d="M 176,192 L 224,192" fill="none" stroke="black"/>
<path d="M 256,192 L 304,192" fill="none" stroke="black"/>
<path d="M 320,208 L 344,208" fill="none" stroke="black"/>
<path d="M 424,208 L 448,208" fill="none" stroke="black"/>
<path d="M 320,224 L 336,224" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 288,240 L 304,240" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,208 444,202.4 444,213.6" fill="black" transform="rotate(0,448,208)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(180,320,224)"/>
<polygon class="arrowhead" points="312,192 300,186.4 300,197.6" fill="black" transform="rotate(0,304,192)"/>
<polygon class="arrowhead" points="312,176 300,170.4 300,181.6" fill="black" transform="rotate(0,304,176)"/>
<polygon class="arrowhead" points="184,240 172,234.4 172,245.6" fill="black" transform="rotate(180,176,240)"/>
<polygon class="arrowhead" points="184,176 172,170.4 172,181.6" fill="black" transform="rotate(180,176,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(4)</text>
<text x="60" y="132">Supply</text>
<text x="104" y="132">PER</text>
<text x="132" y="132">to</text>
<text x="184" y="132">Registrar</text>
<text x="268" y="132">(including</text>
<text x="328" y="132">Key</text>
<text x="404" y="132">Infrastructure</text>
<text x="516" y="132">interaction)</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="236" y="180">mTLS</text>
<text x="240" y="196">PER</text>
<text x="384" y="212">[Request]</text>
<text x="396" y="228">[Certificate]-</text>
<text x="240" y="244">Enroll-Resp</text>
<text x="16" y="276">~</text>
<text x="168" y="276">~</text>
<text x="312" y="276">~</text>
<text x="456" y="276">~</text>
<text x="560" y="276">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(4) Supply PER to Registrar (including Key Infrastructure interaction)
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<----(mTLS)----->|                 |            |
 |                  |-------PER------>|                 |            |
 |                  |                 |----[Request]--->|            |
 |                  |                 |<--[Certificate]-|            |
 |                  |<--Enroll-Resp---|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>As a second step of the interaction with the domain registrar, the Registrar-Agent <bcp14>SHALL</bcp14> supply the PER artifact(s) to the registrar via HTTP-over-TLS POST to the registrar endpoint at <spanx style="verb">/.well-known/brski/requestenroll</spanx>.
The request body <bcp14>MUST</bcp14> contain one previously acquired PER artifact as defined in <xref target="per_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Note that this is different from the EST <xref target="RFC7030"/> endpoint used in BRSKI, as the PER artifact is signature-wrapped.
Hence, upon receiving a PER artifact, the registrar <bcp14>MUST</bcp14> verify that</t>

<t><list style="symbols">
  <t>the PER was signed with the private key corresponding to the pledge EE certificate, which is contained in the JWS Protected Header of the PER.</t>
  <t>the pledge identified by its EE certificate is accepted to join the domain after successful validation of the corresponding PVR.</t>
</list></t>

<t>If the registrar is unable to process the request or validate the PER, it <bcp14>MUST</bcp14> respond with an HTTP client error status code to the Registrar-Agent.
The following client error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the registrar detects an error in the format of the request</t>
  <t>401 Unauthorized: if the signature of the PER cannot be verified</t>
  <t>404 Not Found: if the PER is for a device that is not known to the registrar</t>
  <t>406 Not Acceptable: if the Accept request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/jose+json</spanx></t>
  <t>415 Unsupported Media Type: if the PER uses an artifact format that is not supported by the registrar, e.g., a type other than <spanx style="verb">application/jose+json</spanx></t>
</list></t>

<t>Otherwise, the registrar extracts the PKCS#10 Certificate Signing Request (CSR) inside the PER (see <xref target="per_artifact"/>) and uses the CSR to request a new pledge EE certificate from the domain Key Infrastructure.
The exact interaction and exchanged data objects depends on the certificate management protocol used by the Key Infrastructure, and is out of scope for this document.</t>

<t>A successful interaction with the Key Infrastructure will result in a pledge EE certificate singed by the domain owner (e.g., LDevID certificate).
The registrar <bcp14>MUST</bcp14> reply to the Registrar-Agent with the Enroll-Response (Enroll-Resp) as defined in <xref target="er_artifact"/> in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>If the domain registrar is unable to return the Enroll-Resp, it <bcp14>MUST</bcp14> respond with an HTTP server error status code to the Registrar-Agent.
The following server error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>500 Internal Server Error: if the Key Infrastructure response is valid, but the registrar still failed to return the Enroll-Resp, e.g., due to missing configuration or a program failure</t>
  <t>502 Bad Gateway: if the registrar received an invalid response from the Key Infrastructure</t>
  <t>503 Service Unavailable: if a simple retry of the Registrar-Agent request might lead to a successful response; this error response <bcp14>SHOULD</bcp14> include the Retry-After response header field with an appropriate value</t>
  <t>504 Gateway Timeout: if the backend request to the Key Infrastructure timed out</t>
</list></t>

<t>Note that while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current, potentially application-related pledge EE certificate is used instead of the IDevID certificate to sign the PER artifact (see also <xref target="tper"/>).
Hence, there is no verification whether the pledge is accepted to join the domain, as the still valid EE certificate signed by the domain owner identifies the pledge as already accepted component of the domain.</t>

<section anchor="request-artifact-pledge-enroll-request-per"><name>Request Artifact: Pledge Enroll-Request (PER)</name>

<t>Identical to the PER artifact defined in <xref target="per_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify PERs received from pledges.</t>

</section>
<section anchor="er_artifact"><name>Response Artifact: Registrar Enroll-Response (Enroll-Resp)</name>

<t>The Enroll-Response (Enroll-Resp) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the domain owner, containing a pledge EE certificate.</t>

<t>For this specification, the Enroll-Resp artifact <bcp14>MUST</bcp14> be a certs-only CMC Simple PKI Response (PKCS#7) as defined in <xref section="4.1" sectionFormat="of" target="RFC5272"/> (following EST <xref target="RFC7030"/>).
Note that it only contains the pledge EE certificate, but not the certificate chain.
The chain is provided with the CA certificates.</t>

</section>
</section>
<section anchor="obtain_cacerts"><name>Obtain CA Certificates</name>

<t>The pinned domain certificate in the voucher is only the initial trust anchor for only the domain registrar.
To fully trust the domain and also to verify its own EE certificate, the pledge also needs the corresponding domain CA certificate(s).
A bag of CA certificates signed by the registrar will allow the pledge to verify the authorization to install the received CA certificate(s) through the pinned domain certificate in the voucher.</t>

<t>Note that this is a deviation from EST <xref target="RFC7030"/> used in BRSKI <xref target="RFC8995"/>.</t>

<t>The Registrar-Agent obtains this artifact within the same TLS session.
In case the TLS session to the registrar is already closed, the Registrar-Agent establishes a new session as described in <xref target="pvr"/>.
The CA certificates do not need to be correlated to a specific voucher or Enroll-Response; they only need to be fresh.</t>

<t><xref target="exchangesfig_uc2_5"/> shows the acquisition of the CA certificate(s) and the following subsections describe the corresponding artifact.</t>

<figure title="CA certificates retrieval exchange" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="240" width="576" viewBox="0 0 576 240" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,208" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,208" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,208" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,208" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,208" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 176,176 L 216,176" fill="none" stroke="black"/>
<path d="M 256,176 L 304,176" fill="none" stroke="black"/>
<path d="M 176,192 L 208,192" fill="none" stroke="black"/>
<path d="M 272,192 L 304,192" fill="none" stroke="black"/>
<polygon class="arrowhead" points="312,176 300,170.4 300,181.6" fill="black" transform="rotate(0,304,176)"/>
<polygon class="arrowhead" points="184,192 172,186.4 172,197.6" fill="black" transform="rotate(180,176,192)"/>
<polygon class="arrowhead" points="184,176 172,170.4 172,181.6" fill="black" transform="rotate(180,176,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(5)</text>
<text x="60" y="132">Obtain</text>
<text x="100" y="132">CA</text>
<text x="164" y="132">Certificates</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="236" y="180">mTLS</text>
<text x="240" y="196">caCerts</text>
<text x="16" y="228">~</text>
<text x="168" y="228">~</text>
<text x="312" y="228">~</text>
<text x="456" y="228">~</text>
<text x="560" y="228">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(5) Obtain CA Certificates
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<----(mTLS)----->|                 |            |
 |                  |<----caCerts-----|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>As a third step of the interaction with the domain registrar, the Registrar-Agent <bcp14>SHALL</bcp14> obtain the CA-Certificates artifact from the registrar via HTTP-over-TLS GET to the registrar endpoint at <spanx style="verb">/.well-known/brski/wrappedcacerts</spanx>.
In the request header, the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon receiving a GET request at <spanx style="verb">/.well-known/brski/wrappedcacerts</spanx>, the domain registrar <bcp14>MUST</bcp14> reply with the CA-Certificates artifact as defined in <xref target="cacerts_artifact"/> in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<section anchor="request-no-artifact"><name>Request (no artifact)</name>

<t>In this exchange, the request is a result of the HTTP(S) default transport for this specification.
There is no artifact provided to the registrar.</t>

</section>
<section anchor="cacerts_artifact"><name>Response Artifact: CA-Certificates (caCerts)</name>

<t>The CA-Certificates (caCerts) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the registrar, containing the domain trust anchors and the certificate chain for the pledge domain EE certificate, i.e., the root CA certificate(s) and possibly intermediate certificate(s) as described in <xref section="4.1.3" sectionFormat="of" target="RFC7030"/>.</t>

<t>For the JWS-signed JSON format used by this specification, the caCerts artifact <bcp14>MUST</bcp14> use the "General JWS JSON Serialization Syntax" defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/>, which <bcp14>MUST</bcp14> contain the JSON CA Data defined in <xref target="cacerts_data"/> in the JWS Payload.</t>

<t><xref target="cacerts_representation"/> summarizes the serialization of the JWS-signed JSON caCerts artifact:</t>

<figure title="Voucher' Representation in General JWS JSON Serialization Syntax" anchor="cacerts_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON CA Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON CA Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="cacerts_data"><name>JSON CA Data</name>

<t>The JSON CA Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the CDDL <xref target="RFC8610"/> data model defined in <xref target="cacerts_CDDL_def"/>:</t>

<figure title="CDDL for JSON CA Data (cacerts)" anchor="cacerts_CDDL_def"><artwork type="cddl" align="left"><![CDATA[
cacerts = {
        "x5bag": bytes / [2* bytes]
}
]]></artwork></figure>

<t>The <spanx style="verb">x5bag</spanx> member <bcp14>MUST</bcp14> follow the definition of the <spanx style="verb">x5bag</spanx> COSE Header Parameter in <xref section="2" sectionFormat="of" target="RFC9360"/>.
It is either a single X.509 v3 certificate or an array of at least two X.509 v3 certificates in DER format.
For JSON syntax, the octet-based certificates <bcp14>MUST</bcp14> be base64-encoded.
It <bcp14>SHALL</bcp14> contain one or more domain CA (root or issuing) certificates.</t>

<t>Note that as per <xref target="RFC8995"/>, the domain registrar acts as EST server, and hence is expected to possess the CA certificates applicable for the domain and can thus deliver them to the pledge (see <xref target="registrar_component"/>).</t>

<t><xref target="cacerts_data_example"/> below shows an example for the JSON CA Data:</t>

<figure title="JSON CA Data Example" anchor="cacerts_data_example"><artwork align="left"><![CDATA[
{
  "x5bag": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-4"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the caCerts artifact <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded registrar EE certificate used to sign the caCerts artifact as well as the certificate chain up to (but not including) the pinned domain certificate</t>
</list></t>

<t><xref target="cacerts_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example within PER" anchor="cacerts_header"><artwork align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="jws-signature-4"><name>JWS Signature</name>

<t>The registrar <bcp14>MUST</bcp14> sign the caCerts artifact using its EE credentials.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

</section>
</section>
</section>
<section anchor="voucher"><name>Supply Voucher to Pledge</name>

<t>Once the Registrar-Agent has acquired the following three bootstrapping artifacts, it can supply them to the pledge starting with the Voucher':</t>

<t><list style="symbols">
  <t>Voucher': voucher countersigned by the registrar (from MASA via Registrar)</t>
  <t>Enroll-Resp: pledge EE certificate signed by the domain owner (from Key Infrastructure via registrar)</t>
  <t>caCerts: domain trust anchors (from Key Infrastructure via Registrar)</t>
</list></t>

<t>Reconnecting to the pledge might require to re-discover the pledge as described in <xref target="discovery_uc2_ppa"/>.
The Registrar-Agent <bcp14>MAY</bcp14> store information from the first connection with the pledge to optimize.</t>

<t>Optionally, TLS <bcp14>MAY</bcp14> be used to provide privacy for this exchange between the Registrar-Agent and the pledge (see <xref target="pledgehttps"/>).</t>

<t><xref target="exchangesfig_uc2_6"/> shows the provisioning of the voucher to the pledge and the following subsections describe the corresponding artifacts.</t>

<figure title="Voucher exchange" anchor="exchangesfig_uc2_6"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="256" width="576" viewBox="0 0 576 256" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,224" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,224" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,224" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,224" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,224" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,176 L 56,176" fill="none" stroke="black"/>
<path d="M 128,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,192 L 64,192" fill="none" stroke="black"/>
<path d="M 136,192 L 160,192" fill="none" stroke="black"/>
<path d="M 24,208 L 64,208" fill="none" stroke="black"/>
<path d="M 128,208 L 160,208" fill="none" stroke="black"/>
<polygon class="arrowhead" points="168,208 156,202.4 156,213.6" fill="black" transform="rotate(0,160,208)"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,192 20,186.4 20,197.6" fill="black" transform="rotate(180,24,192)"/>
<polygon class="arrowhead" points="32,176 20,170.4 20,181.6" fill="black" transform="rotate(180,24,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(6)</text>
<text x="60" y="132">Supply</text>
<text x="120" y="132">Voucher</text>
<text x="164" y="132">to</text>
<text x="204" y="132">Pledge</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="76" y="180">opt.</text>
<text x="112" y="180">TLS</text>
<text x="100" y="196">Voucher'</text>
<text x="96" y="212">vStatus</text>
<text x="16" y="244">~</text>
<text x="168" y="244">~</text>
<text x="312" y="244">~</text>
<text x="456" y="244">~</text>
<text x="560" y="244">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(6) Supply Voucher to Pledge
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<-----Voucher''---|                 |                 |            |
 |------vStatus---->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> supply the voucher to the pledge via HTTP(S) POST to the pledge endpoint at <spanx style="verb">/.well-known/brski/svr</spanx>.
The request body <bcp14>MUST</bcp14> contain the Registrar-Countersigned Voucher (Voucher') artifact previously acquired from the domain registrar as defined in <xref target="rcv_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"></xref> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon receiving the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers" type="1">
  <t>Verify the MASA signature as described in <xref section="5.6.1" sectionFormat="of" target="RFC8995"/> against the pre-installed manufacturer trust anchor (e.g., IDevID).</t>
  <t>Provisionally install the initial domain trust anchor contained in the <spanx style="verb">pinned-domain-cert</spanx> field of the voucher.</t>
  <t>Validate the registrar EE certificate received in the <spanx style="verb">agent-provided-proximity-registrar-cert</spanx> field of the previously received tPVR artifact using the pinned domain certificate;
this terminates the "provisional state" for the object security within the authenticated self-contained objects that in BRSKI-PRM replace the direct TLS connection to the registrar in BRSKI <xref target="RFC8995"/> (see <xref target="agt_prx"/>).</t>
  <t>Verify registrar signature of the Voucher' artifact similar as described in <xref section="5.6.1" sectionFormat="of" target="RFC8995"/>, but using the pinned domain certificate instead of the MASA certificate for the verification.</t>
</list></t>

<t>If all steps above complete successfully, the pledge <bcp14>SHALL</bcp14> terminate the "provisional state" for the initial domain trust anchor (i.e., the pinned domain certificate).</t>

<t>A nonceless voucher <bcp14>MAY</bcp14> be accepted as in <xref target="RFC8995"/> if allowed by the pledge implementation of the manufacturer.</t>

<t>After voucher validation and verification, the pledge needs to reply with a status telemetry message as defined in <xref section="5.7" sectionFormat="of" target="RFC8995"/>.
The pledge <bcp14>MUST</bcp14> generate the Voucher Status (vStatus) artifact as defined in <xref target="vstatus_artifact"/> and <bcp14>MUST</bcp14> provide it to the Registrar-Agent in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>If the pledge is unable to validate or verify the voucher, it <bcp14>MUST</bcp14> report the reason in the corresponding field of the Voucher Status.</t>

<t>If the pledge did not provide voucher status telemetry information after processing the voucher, the Registrar-Agent <bcp14>MAY</bcp14> query the pledge status explicitly as described in <xref target="query"/>.
It <bcp14>MAY</bcp14> resend the voucher depending on the Pledge status following the same procedure.</t>

<section anchor="request-artifact-registrar-countersigned-voucher"><name>Request Artifact: Registrar-Countersigned Voucher</name>

<t>Identical to the Registrar-Countersigned Voucher (Voucher') artifact received from the registrar as defined in <xref target="rcv_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify countersigned vouchers.</t>

</section>
<section anchor="vstatus_artifact"><name>Response Artifact: Voucher Status (vStatus)</name>

<t>The Voucher Status (vStatus) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the pledge, containing status telemetry as defined in <xref section="5.7" sectionFormat="of" target="RFC8995"/>.</t>

<t>For the JWS-signed JSON format used by this specification, the vStatus artifact <bcp14>MUST</bcp14> use the "General JWS JSON Serialization Syntax" defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/>, which <bcp14>MUST</bcp14> contain the JSON Voucher Status Data defined in <xref target="vstatus_data"/> in the JWS Payload.
<xref target="vstatus_representation"/> summarizes the serialization of the JWS-signed JSON vStatus artifact:</t>

<figure title="vStatus Representation in General JWS JSON Serialization Syntax" anchor="vstatus_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON Voucher Status Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON Status Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="vstatus_data"><name>JSON Voucher Status Data</name>

<t>The JSON Status Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the <spanx style="verb">voucherstatus-post</spanx> CDDL <xref target="RFC8610"/> data model defined in <xref section="5.7" sectionFormat="of" target="RFC8995"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">version</spanx>: contains a version number for the format and semantics of the other fields;
this specification assumes version <spanx style="verb">1</spanx> just like BRSKI <xref target="RFC8995"/></t>
  <t><spanx style="verb">status</spanx>: contains the boolean value <spanx style="verb">true</spanx> in case of success and <spanx style="verb">false</spanx> in case of failure</t>
  <t><spanx style="verb">reason</spanx>: contains a human-readable message;
<bcp14>SHOULD NOT</bcp14> provide information beneficial to an attacker</t>
  <t><spanx style="verb">reason-context</spanx>: contains a JSON object that provides additional information specific to a failure;
in contrast to <xref section="5.7" sectionFormat="of" target="RFC8995"/>, <bcp14>MUST</bcp14> be provided;
<bcp14>SHOULD NOT</bcp14> provide information beneficial to an attacker</t>
</list></t>

<t>BRSKI-PRM implementations utilize the <spanx style="verb">reason-context</spanx> field to provide a distinguishable token, which enables the registrar to detect status artifacts provided to the wrong endpoint.
For vStatus artifacts, the JSON object in the <spanx style="verb">reason-context</spanx> field <bcp14>MUST</bcp14> contain the member <spanx style="verb">pvs-details</spanx>.</t>

<t><xref target="vstatus_data_example_success"/> below shows an example for the JSON Voucher Status Data in case of success and <xref target="vstatus_data_example_error"/> in case of failure:</t>

<figure title="JSON Voucher Status Data Success Example" anchor="vstatus_data_example_success"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed.",
  "reason-context": {
    "pvs-details": "Current date 5/23/2024"
  }
}
]]></artwork></figure>

<figure title="JSON Voucher Status Data Failure Example" anchor="vstatus_data_example_error"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate.",
  "reason-context": {
    "pvs-details": "Current date 1/1/1970 < valid from 1/1/2023"
  }
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-5"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the vStatus artifact <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded pledge IDevID certificate used to sign the vStatus artifact;
it <bcp14>SHOULD</bcp14> also contain the certificate chain for this certificate;
if the certificate chain is not included in the <spanx style="verb">x5c</spanx> Header Parameter, it <bcp14>MUST</bcp14> be available at the domain registrar for verification</t>
</list></t>

<t><xref target="vstatus_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example within vStatus" anchor="vstatus_header"><artwork type="json" align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="jws-signature-5"><name>JWS Signature</name>

<t>The pledge <bcp14>MUST</bcp14> sign the vStatus artifact using its IDevID credential.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

</section>
</section>
</section>
<section anchor="cacerts"><name>Supply CA Certificates to Pledge</name>

<t>Before supplying the pledge EE certificate, the Registrar-Agent supplies the domain CA certificates to the pledge, so the pledge can verify its EE certificate in the next exchange.
As the CA certificate provisioning is crucial from a security perspective, this exchange <bcp14>SHOULD</bcp14> only be done, if supplying the voucher in the previous exchange (<xref target="voucher"/>) has been successfully processed by the pledge as reflected in the vStatus artifact.</t>

<t>Optionally, TLS <bcp14>MAY</bcp14> be used to provide privacy for this exchange between the Registrar-Agent and the pledge (see <xref target="pledgehttps"/>).</t>

<t><xref target="exchangesfig_uc2_7"/> shows the provisioning of the CA certificates to the pledge and the following subsections describe the corresponding artifacts.</t>

<figure title="Certificate provisioning exchange" anchor="exchangesfig_uc2_7"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="240" width="576" viewBox="0 0 576 240" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,208" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,208" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,208" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,208" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,208" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,176 L 56,176" fill="none" stroke="black"/>
<path d="M 128,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,192 L 64,192" fill="none" stroke="black"/>
<path d="M 128,192 L 160,192" fill="none" stroke="black"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,192 20,186.4 20,197.6" fill="black" transform="rotate(180,24,192)"/>
<polygon class="arrowhead" points="32,176 20,170.4 20,181.6" fill="black" transform="rotate(180,24,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(7)</text>
<text x="60" y="132">Supply</text>
<text x="100" y="132">CA</text>
<text x="164" y="132">Certificates</text>
<text x="228" y="132">to</text>
<text x="268" y="132">Pledge</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="76" y="180">opt.</text>
<text x="112" y="180">TLS</text>
<text x="96" y="196">caCerts</text>
<text x="16" y="228">~</text>
<text x="168" y="228">~</text>
<text x="312" y="228">~</text>
<text x="456" y="228">~</text>
<text x="560" y="228">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(7) Supply CA Certificates to Pledge
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<-----caCerts-----|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> provide the bag of CA certificates requested from and signed by the registrar to the pledge by HTTP(S) POST to the pledge endpoint at <spanx style="verb">/.well-known/brski/scac</spanx>.
The request body <bcp14>MUST</bcp14> contain the caCerts artifact as defined in <xref target="cacerts_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon receiving valid caCerts artifact, the pledge <bcp14>MUST</bcp14> first verify the signature of the registrar using the initial trust anchor (pinned domain certificate).
In the case of success, the pledge <bcp14>MUST</bcp14> install the contained CA certificates as trust anchors as described in <xref section="4.1.3" sectionFormat="of" target="RFC7030"/>.
This includes the verification of all intermediate CA certificates (i.e., not self-signed CA certificates).</t>

<t>If the pledge is unable to process the caCerts, it <bcp14>SHOULD</bcp14> respond with an HTTP error status code to the Registrar-Agent.
The following client error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detects an error in the format of the request</t>
  <t>401 Unauthorized: if the signature of the registrar cannot be verified against the installed initial trust anchor (pinned domain certificate)</t>
  <t>403 Forbidden: if one of the intermediate CA certificates cannot be verified against the available trust anchors (e.g., self-signed CA certificates)</t>
  <t>415 Unsupported Media Type: if the Content-Type request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/jose+json</spanx></t>
</list></t>

<t>Otherwise, if processing completes successfully, the pledge <bcp14>SHOULD</bcp14> reply with HTTP 200 OK without a response body.
The pledge <bcp14>MAY</bcp14> use the response body to signal success/failure details to the service technician operating the Registrar-Agent.</t>

<section anchor="request-artifact-ca-certificates-cacerts"><name>Request Artifact: CA-Certificates (caCerts)</name>

<t>Identical to the CA-Certificates (caCerts) artifact received from the registrar as defined in <xref target="cacerts_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify CA-Certificates artifacts.</t>

</section>
<section anchor="response-no-artifact"><name>Response (no artifact)</name>

<t>In this exchange, the response is a result of the HTTP(S) default transport for this specification.
There is no artifact provided to the Registrar-Agent.</t>

</section>
</section>
<section anchor="enroll_response"><name>Supply Enroll-Response to Pledge</name>

<t>After supplying the CA certificates, the Registrar-Agent supplies the pledge EE certificate to the pledge.</t>

<t>Optionally, TLS <bcp14>MAY</bcp14> be used to provide privacy for this exchange between the Registrar-Agent and the pledge (see <xref target="pledgehttps"/>).</t>

<t><xref target="exchangesfig_uc2_8"/> shows the provisioning of the domain-owner signed EE certificate to the pledge and the following subsections describe the corresponding artifacts.</t>

<figure title="Enroll-Response exchange" anchor="exchangesfig_uc2_8"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="256" width="576" viewBox="0 0 576 256" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,224" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,224" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,224" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,224" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,224" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,176 L 56,176" fill="none" stroke="black"/>
<path d="M 128,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,192 L 48,192" fill="none" stroke="black"/>
<path d="M 144,192 L 160,192" fill="none" stroke="black"/>
<path d="M 24,208 L 56,208" fill="none" stroke="black"/>
<path d="M 120,208 L 160,208" fill="none" stroke="black"/>
<polygon class="arrowhead" points="168,208 156,202.4 156,213.6" fill="black" transform="rotate(0,160,208)"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,192 20,186.4 20,197.6" fill="black" transform="rotate(180,24,192)"/>
<polygon class="arrowhead" points="32,176 20,170.4 20,181.6" fill="black" transform="rotate(180,24,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(8)</text>
<text x="60" y="132">Supply</text>
<text x="152" y="132">Enroll-Response</text>
<text x="228" y="132">to</text>
<text x="268" y="132">Pledge</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="76" y="180">opt.</text>
<text x="112" y="180">TLS</text>
<text x="96" y="196">Enroll-Resp</text>
<text x="88" y="212">eStatus</text>
<text x="16" y="244">~</text>
<text x="168" y="244">~</text>
<text x="312" y="244">~</text>
<text x="456" y="244">~</text>
<text x="560" y="244">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(8) Supply Enroll-Response to Pledge
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<---Enroll-Resp---|                 |                 |            |
 |-----eStatus----->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> send the domain-owner signed EE certificate to the pledge by HTTP(S) POST to the pledge endpoint at <spanx style="verb">/.well-known/brski/ser</spanx>.
The request body <bcp14>MUST</bcp14> contain the Enroll-Response (Enroll-Resp) artifact previously acquired from the domain registrar as defined in <xref target="er_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/pkcs7-mime</spanx> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received EE certificate using the installed trust anchors.
After Enroll-Resp validation and verification, the pledge needs to reply with a status telemetry message as defined in <xref section="5.9.4" sectionFormat="of" target="RFC8995"/>.
The pledge <bcp14>MUST</bcp14> generate the Enroll Status (eStatus) artifact as defined in <xref target="estatus_artifact"/> and <bcp14>MUST</bcp14> provide it to the Registrar-Agent in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>If the pledge is unable to validate or verify the Enroll-Response, it <bcp14>MUST</bcp14> report the reason in the corresponding field of the Enroll Status.</t>

<section anchor="request-artifact-enroll-response-enroll-resp"><name>Request Artifact: Enroll-Response (Enroll-Resp)</name>

<t>Identical to the Enroll-Response (Enroll-Resp) artifact received from the registrar as defined in <xref target="er_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify Enroll-Response artifacts.</t>

</section>
<section anchor="estatus_artifact"><name>Response Artifact: Enroll Status (eStatus)</name>

<t>The Enroll Status (eStatus) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the pledge, containing status telemetry as defined in <xref section="5.9.4" sectionFormat="of" target="RFC8995"/>.</t>

<t>For the JWS-signed JSON format used by this specification, the eStatus artifact <bcp14>MUST</bcp14> use the "General JWS JSON Serialization Syntax" defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/>, which <bcp14>MUST</bcp14> contain the JSON Enroll Status Data defined in <xref target="estatus_data"/> in the JWS Payload.
<xref target="estatus_representation"/> summarizes the serialization of the JWS-signed JSON eStatus artifact:</t>

<figure title="eStatus Representation in General JWS JSON Serialization Syntax" anchor="estatus_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON Enroll Status Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON Enroll Status Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="estatus_data"><name>JSON Enroll Status Data</name>

<t>The JSON Status Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the <spanx style="verb">enrollstatus-post</spanx> CDDL <xref target="RFC8610"/> data model defined in <xref section="5.9.4" sectionFormat="of" target="RFC8995"/>.
The members are the same as for the JSON Voucher Status Data and follow the same definitions as given in <xref target="vstatus_data"/> (incl. making <spanx style="verb">reason-context</spanx> mandatory).</t>

<t>BRSKI-PRM implementations again utilize the <spanx style="verb">reason-context</spanx> field to provide a distinguishable token.
For eStatus artifacts, the JSON object in the <spanx style="verb">reason-context</spanx> field <bcp14>MUST</bcp14> contain the member <spanx style="verb">pes-details</spanx>.</t>

<t><xref target="estatus_data_example_success"/> below shows an example for the JSON Enroll Status Data in case of success and <xref target="estatus_data_example_error"/> in case of failure:</t>

<figure title="JSON Enroll Status Data Success Example" anchor="estatus_data_example_success"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "status": true,
  "reason": "Enroll-Response successfully processed.",
  "reason-context": {
    "pes-details": "Success"
  }
}
]]></artwork></figure>

<figure title="JSON Enroll Status Data Failure Example" anchor="estatus_data_example_error"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "status": false,
  "reason": "Enroll-Response could not be verified.",
  "reason-context": {
    "pes-details": "No matching trust anchor"
  }
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-6"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the eStatus artifact <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded pledge EE certificate used to sign the eStatus artifact;
it <bcp14>SHOULD</bcp14> also contain the certificate chain for this certificate;
if the certificate chain is not included in the <spanx style="verb">x5c</spanx> Header Parameter, it <bcp14>MUST</bcp14> be available at the domain registrar for verification</t>
</list></t>

<t><xref target="estatus_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example within eStatus" anchor="estatus_header"><artwork type="json" align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="jws-signature-6"><name>JWS Signature</name>

<t>If the pledge verified the received EE certificate successfully, it <bcp14>MUST</bcp14> sign the eStatus artifact using its new EE credentials.
In failure case, the pledge <bcp14>MUST</bcp14> sign it using its IDevID credentials.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

</section>
</section>
</section>
<section anchor="vstatus"><name>Voucher Status Telemetry (including MASA interaction)</name>

<t>Once the Registrar-Agent has collected both status artifacts from one or more pledges, it <bcp14>SHALL</bcp14> provide the status information to the domain registrar for further processing, beginning with the voucher status telemetry.</t>

<t>In case the TLS session to the registrar is closed, the Registrar-Agent establishes a new session as described in <xref target="pvr"/>.</t>

<t><xref target="exchangesfig_uc2_9"/> shows the provisioning of the voucher status information from the pledge(s) to the registrar and the following subsections describe the corresponding artifact and MASA interaction.</t>

<figure title="Voucher Status telemetry exchange" anchor="exchangesfig_uc2_9"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="576" viewBox="0 0 576 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,288" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,288" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,256" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,200" fill="none" stroke="black"/>
<path d="M 456,256 L 456,288" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,288" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 176,176 L 216,176" fill="none" stroke="black"/>
<path d="M 256,176 L 304,176" fill="none" stroke="black"/>
<path d="M 176,192 L 208,192" fill="none" stroke="black"/>
<path d="M 272,192 L 304,192" fill="none" stroke="black"/>
<path d="M 320,208 L 416,208" fill="none" stroke="black"/>
<path d="M 456,208 L 552,208" fill="none" stroke="black"/>
<path d="M 320,224 L 352,224" fill="none" stroke="black"/>
<path d="M 520,224 L 552,224" fill="none" stroke="black"/>
<path d="M 320,240 L 368,240" fill="none" stroke="black"/>
<path d="M 504,240 L 552,240" fill="none" stroke="black"/>
<polygon class="arrowhead" points="560,224 548,218.4 548,229.6" fill="black" transform="rotate(0,552,224)"/>
<polygon class="arrowhead" points="560,208 548,202.4 548,213.6" fill="black" transform="rotate(0,552,208)"/>
<polygon class="arrowhead" points="328,240 316,234.4 316,245.6" fill="black" transform="rotate(180,320,240)"/>
<polygon class="arrowhead" points="328,208 316,202.4 316,213.6" fill="black" transform="rotate(180,320,208)"/>
<polygon class="arrowhead" points="312,192 300,186.4 300,197.6" fill="black" transform="rotate(0,304,192)"/>
<polygon class="arrowhead" points="312,176 300,170.4 300,181.6" fill="black" transform="rotate(0,304,176)"/>
<polygon class="arrowhead" points="184,176 172,170.4 172,181.6" fill="black" transform="rotate(180,176,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="16" y="132">(9)</text>
<text x="64" y="132">Voucher</text>
<text x="124" y="132">Status</text>
<text x="192" y="132">Telemetry</text>
<text x="276" y="132">(including</text>
<text x="352" y="132">backend</text>
<text x="436" y="132">interaction)</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="236" y="180">mTLS</text>
<text x="240" y="196">vStatus</text>
<text x="436" y="212">mTLS</text>
<text x="368" y="228">req</text>
<text x="412" y="228">device</text>
<text x="480" y="228">audit-log</text>
<text x="396" y="244">device</text>
<text x="464" y="244">audit-log</text>
<text x="264" y="276">[verify</text>
<text x="340" y="276">audit-log]</text>
<text x="312" y="292">|</text>
<text x="16" y="308">~</text>
<text x="168" y="308">~</text>
<text x="312" y="308">~</text>
<text x="456" y="308">~</text>
<text x="560" y="308">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(9) Voucher Status Telemetry (including backend interaction)
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<---((mTLS))---->|                 |            |
 |                  |-----vStatus---->|                 |            |
 |                  |                 |<----------((mTLS))---------->|
 |                  |                 |-----req device audit-log---->|
 |                  |                 |<------device audit-log-------|
 |                  |                 |                 |            |
 |                  |        [verify audit-log]         |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>First, the Registrar-Agent <bcp14>SHALL</bcp14> supply the voucher status telemetry to the registrar via HTTP-over-TLS POST to the registrar endpoint at <spanx style="verb">/.well-known/brski/voucher_status</spanx>.
The request body <bcp14>MUST</bcp14> contain one previously acquired vStatus artifact as defined in <xref target="vstatus_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon receiving a vStatus artifact, the registrar <bcp14>MUST</bcp14> process it as described in <xref section="5.7" sectionFormat="of" target="RFC8995"/>.
Due to the Registrar-Agent in the middle, the registrar <bcp14>MUST</bcp14> in addition verify the signature of the vStatus and that it belongs to an accepted device of the domain based on the <spanx style="verb">serial-number</spanx> field of the IDevID certificate contained in the JWS Protected Header of the vStatus.</t>

<t>According to <xref section="5.7" sectionFormat="of" target="RFC8995"/>, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK without a response body in the success case or fail with an HTTP error status code.
The registrar <bcp14>MAY</bcp14> use the response body to signal success/failure details to the service technician operating the Registrar-Agent.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with the audit-log request to the MASA as in BRSKI described in <xref section="5.8" sectionFormat="of" target="RFC8995"/>.</t>

<section anchor="request-artifact-voucher-status-vstatus"><name>Request Artifact: Voucher Status (vStatus)</name>

<t>Identical to the Voucher Status (vStatus) artifact received from the pledge as defined in <xref target="vstatus_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify vStatus artifacts.</t>

</section>
<section anchor="response-no-artifact-1"><name>Response (no artifact)</name>

<t>In this exchange, the response is a result of the HTTP(S) default transport for this specification.
There is no artifact provided to the Registrar-Agent.</t>

</section>
</section>
<section anchor="estatus"><name>Enroll Status Telemetry</name>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> complete the sequence of exchanges for bootstrapping with providing the enroll status telemetry to the domain registrar.
This status indicates whether the pledge could process the Enroll-Response (pledge EE certificate signed by the domain owner) and holds the corresponding private key.</t>

<t>In case the TLS session to the registrar is already closed, the Registrar-Agent establishes a new session as described in <xref target="pvr"/>.</t>

<t><xref target="exchangesfig_uc2_10"/> shows the provisioning of the enroll status information from the pledge(s) to the registrar and the following subsections describe the corresponding artifact.</t>

<figure title="Enroll Status telemetry exchange" anchor="exchangesfig_uc2_10"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="240" width="576" viewBox="0 0 576 240" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,208" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,208" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,208" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,208" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,208" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 176,176 L 216,176" fill="none" stroke="black"/>
<path d="M 256,176 L 304,176" fill="none" stroke="black"/>
<path d="M 176,192 L 208,192" fill="none" stroke="black"/>
<path d="M 272,192 L 304,192" fill="none" stroke="black"/>
<polygon class="arrowhead" points="312,192 300,186.4 300,197.6" fill="black" transform="rotate(0,304,192)"/>
<polygon class="arrowhead" points="312,176 300,170.4 300,181.6" fill="black" transform="rotate(0,304,176)"/>
<polygon class="arrowhead" points="184,176 172,170.4 172,181.6" fill="black" transform="rotate(180,176,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="20" y="132">(10)</text>
<text x="68" y="132">Enroll</text>
<text x="124" y="132">Status</text>
<text x="192" y="132">Telemetry</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="236" y="180">mTLS</text>
<text x="240" y="196">eStatus</text>
<text x="16" y="228">~</text>
<text x="168" y="228">~</text>
<text x="312" y="228">~</text>
<text x="456" y="228">~</text>
<text x="560" y="228">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(10) Enroll Status Telemetry
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |                  |<---((mTLS))---->|                 |            |
 |                  |-----eStatus---->|                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> supply the enroll status telemetry to the registrar via HTTP-over-TLS POST to the registrar endpoint at <spanx style="verb">/.well-known/brski/enrollstatus</spanx>.
The request body <bcp14>MUST</bcp14> contain one previously acquired eStatus artifact as defined in <xref target="estatus_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>Upon receiving an eStatus artifact, the registrar <bcp14>MUST</bcp14> process it as described in <xref section="5.9.4" sectionFormat="of" target="RFC8995"/>.
Due to the Registrar-Agent in the middle, instead of the BRSKI TLS session with the pledge, the registrar <bcp14>MUST</bcp14> verify the signature of the eStatus artifact and that it belongs to an accepted device of the domain based on the <spanx style="verb">serial-number</spanx> field of the EE certificate contained in the JWS Protected Header of the eStatus.
Note that if the Enroll Status indicates success, the eStatus artifact is signed with the new pledge EE credentials;
if it indicates failure, the pledge was unable to process the supplied EE certificate and therefore signed with its IDevID credentials.</t>

<t>According to <xref section="5.9.4" sectionFormat="of" target="RFC8995"/>, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or <bcp14>MAY</bcp14> fail with an HTTP 404 client error status code.
The registrar <bcp14>MAY</bcp14> use the response body to signal success/failure details to the service technician operating the Registrar-Agent.</t>

<t>If the eStatus indicates failure, the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain.
In this case, the registrar <bcp14>MUST</bcp14> revoke the pledge EE certificate.
An example case for the registrar revoking the issued certificate is when the pledge was not able to verify the received EE certificate and therefore did not accept it for installation.</t>

<section anchor="request-artifact-enroll-status-estatus"><name>Request Artifact: Enroll Status (eStatus)</name>

<t>Identical to the Enroll Status (eStatus) artifact received from the pledge as defined in <xref target="estatus_artifact"/>.
The Registrar-Agent <bcp14>MUST NOT</bcp14> modify eStatus artifacts.</t>

</section>
<section anchor="response-no-artifact-2"><name>Response (no artifact)</name>

<t>In this exchange, the response is a result of the HTTP(S) default transport for this specification.
There is no artifact provided to the Registrar-Agent.</t>

</section>
</section>
<section anchor="query"><name>Query Pledge Status</name>

<t>The following assumes that a Registrar-Agent <bcp14>MAY</bcp14> need to query the overall status of a pledge.
This information can be useful to solve errors, when the pledge was not able to connect to the target domain during bootstrapping.
A pledge <bcp14>MAY</bcp14> omit the dedicated endpoint for the Query Pledge Status operation (see <xref target="pledge_component"/>).</t>

<t>Optionally, TLS <bcp14>MAY</bcp14> be used to provide privacy for this exchange between the Registrar-Agent and the pledge (see <xref target="pledgehttps"/>).</t>

<t><xref target="exchangesfig_uc2_11"/> shows the query and response for the overall pledge status and the following subsections describe the corresponding artifacts.</t>

<figure title="Pledge Status exchange" anchor="exchangesfig_uc2_11"><artset><artwork  type="svg" align="center"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="256" width="576" viewBox="0 0 576 256" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,80" fill="none" stroke="black"/>
<path d="M 16,160 L 16,224" fill="none" stroke="black"/>
<path d="M 80,32 L 80,80" fill="none" stroke="black"/>
<path d="M 120,32 L 120,80" fill="none" stroke="black"/>
<path d="M 168,160 L 168,224" fill="none" stroke="black"/>
<path d="M 224,32 L 224,80" fill="none" stroke="black"/>
<path d="M 264,32 L 264,80" fill="none" stroke="black"/>
<path d="M 312,160 L 312,224" fill="none" stroke="black"/>
<path d="M 360,32 L 360,80" fill="none" stroke="black"/>
<path d="M 400,32 L 400,80" fill="none" stroke="black"/>
<path d="M 456,160 L 456,224" fill="none" stroke="black"/>
<path d="M 472,32 L 472,80" fill="none" stroke="black"/>
<path d="M 512,32 L 512,80" fill="none" stroke="black"/>
<path d="M 560,160 L 560,224" fill="none" stroke="black"/>
<path d="M 568,32 L 568,80" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 120,32 L 224,32" fill="none" stroke="black"/>
<path d="M 264,32 L 360,32" fill="none" stroke="black"/>
<path d="M 400,32 L 472,32" fill="none" stroke="black"/>
<path d="M 512,32 L 568,32" fill="none" stroke="black"/>
<path d="M 8,80 L 80,80" fill="none" stroke="black"/>
<path d="M 120,80 L 224,80" fill="none" stroke="black"/>
<path d="M 264,80 L 360,80" fill="none" stroke="black"/>
<path d="M 400,80 L 472,80" fill="none" stroke="black"/>
<path d="M 512,80 L 568,80" fill="none" stroke="black"/>
<path d="M 24,176 L 56,176" fill="none" stroke="black"/>
<path d="M 128,176 L 160,176" fill="none" stroke="black"/>
<path d="M 24,192 L 64,192" fill="none" stroke="black"/>
<path d="M 128,192 L 160,192" fill="none" stroke="black"/>
<path d="M 24,208 L 64,208" fill="none" stroke="black"/>
<path d="M 128,208 L 160,208" fill="none" stroke="black"/>
<polygon class="arrowhead" points="168,208 156,202.4 156,213.6" fill="black" transform="rotate(0,160,208)"/>
<polygon class="arrowhead" points="168,176 156,170.4 156,181.6" fill="black" transform="rotate(0,160,176)"/>
<polygon class="arrowhead" points="32,192 20,186.4 20,197.6" fill="black" transform="rotate(180,24,192)"/>
<polygon class="arrowhead" points="32,176 20,170.4 20,181.6" fill="black" transform="rotate(180,24,176)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="172" y="52">Registrar-</text>
<text x="308" y="52">Domain</text>
<text x="432" y="52">Key</text>
<text x="540" y="52">MASA</text>
<text x="168" y="68">Agent</text>
<text x="312" y="68">Registrar</text>
<text x="436" y="68">Infra.</text>
<text x="16" y="100">|</text>
<text x="168" y="100">|</text>
<text x="312" y="100">|</text>
<text x="456" y="100">|</text>
<text x="516" y="100">Internet</text>
<text x="560" y="100">|</text>
<text x="16" y="116">~</text>
<text x="168" y="116">~</text>
<text x="312" y="116">~</text>
<text x="456" y="116">~</text>
<text x="560" y="116">~</text>
<text x="20" y="132">(11)</text>
<text x="64" y="132">Query</text>
<text x="116" y="132">Pledge</text>
<text x="172" y="132">Status</text>
<text x="16" y="148">~</text>
<text x="168" y="148">~</text>
<text x="312" y="148">~</text>
<text x="456" y="148">~</text>
<text x="560" y="148">~</text>
<text x="76" y="180">opt.</text>
<text x="112" y="180">TLS</text>
<text x="96" y="196">tStatus</text>
<text x="96" y="212">pStatus</text>
<text x="16" y="244">~</text>
<text x="168" y="244">~</text>
<text x="312" y="244">~</text>
<text x="456" y="244">~</text>
<text x="560" y="244">~</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="center"><![CDATA[
+--------+    +------------+    +-----------+    +--------+    +------+
| Pledge |    | Registrar- |    |  Domain   |    |  Key   |    | MASA |
|        |    |   Agent    |    | Registrar |    | Infra. |    |      |
+--------+    +------------+    +-----------+    +--------+    +------+
 |                  |                 |                 |   Internet |
 ~                  ~                 ~                 ~            ~
(11) Query Pledge Status
 ~                  ~                 ~                 ~            ~
 |                  |                 |                 |            |
 |<----opt. TLS---->|                 |                 |            |
 |<-----tStatus-----|                 |                 |            |
 |------pStatus---->|                 |                 |            |
 |                  |                 |                 |            |
 ~                  ~                 ~                 ~            ~
]]></artwork></artset></figure>

<t>The Registrar-Agent <bcp14>SHALL</bcp14> query the pledge via HTTP(S) POST to the pledge endpoint at <spanx style="verb">/.well-known/brski/qps</spanx>.
The request body <bcp14>MUST</bcp14> contain the Status Trigger (tStatus) artifact as defined in <xref target="tstatus_artifact"/>.
In the request header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx> and the Accept field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>If the pledge implements the Query Pledge Status endpoint, it <bcp14>MUST</bcp14> first verify the signature of the tStatus artifact using its trust anchors.
If the pledge does not possess any domain trust anchor yet, it <bcp14>MAY</bcp14> skip the signature verification and choose to reply without it.
In the case of success, it <bcp14>MUST</bcp14> reply with the Pledge Status (pStatus) artifact as defined in <xref target="pstatus_artifact"/> in the body of an HTTP 200 OK response.
In the response header, the Content-Type field <bcp14>MUST</bcp14> be set to <spanx style="verb">application/jose+json</spanx>.</t>

<t>If the pledge is unable to create the pStatus artifact, the pledge <bcp14>SHOULD</bcp14> respond with an HTTP error status code to the Registrar-Agent.
The following client error status codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detects an error in the format of the request</t>
  <t>401 Unauthorized: if the signature of the Registrar-Agent cannot be verified using the installed trust anchors</t>
  <t>406 Not Acceptable: if the Accept request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/jose+json</spanx></t>
  <t>415 Unsupported Media Type: if the Content-Type request header field indicates a type that is unknown or unsupported, e.g., a type other than <spanx style="verb">application/jose+json</spanx></t>
</list></t>

<t>The pledge <bcp14>MAY</bcp14> use the response body to signal failure details to the service technician operating the Registrar-Agent.</t>

<section anchor="tstatus_artifact"><name>Request Artifact: Status Trigger (tStatus)</name>

<t>The Status Query (tStatus) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the pledge, providing status query parameters.</t>

<t>For the JWS-signed JSON format used by this specification, the tStatus artifact <bcp14>MUST</bcp14> use the "General JWS JSON Serialization Syntax" defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/>, which <bcp14>MUST</bcp14> contain the JSON Status Trigger Data defined in <xref target="tstatus_data"/> in the JWS Payload.
<xref target="tstatus_representation"/> summarizes the serialization of the JWS-signed JSON PER artifact:</t>

<figure title="tStatus Representation in General JWS JSON Serialization Syntax" anchor="tstatus_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON Status Trigger Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON Status Trigger Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="tstatus_data"><name>JSON Status Trigger Data</name>

<t>The JSON Status Trigger Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the CDDL <xref target="RFC8610"/> data model defined in <xref target="stat_req_def"/>:</t>

<figure title="CDDL for JSON Status Trigger Data (statustrigger)" anchor="stat_req_def"><artwork type="cddl" align="left"><![CDATA[
  statustrigger = {
      "version": uint,
      "serial-number": text,
      "created-on": tdate,
      "status-type": $status-type
  }

  $status-type /= "bootstrap"
  $status-type /= "operation"
]]></artwork></figure>

<t>The <spanx style="verb">version</spanx> member is included to permit significant changes to the pledge status artifacts in the future.
The format and semantics in this document follow the status telemetry definitions of <xref target="RFC8995"/>.
Hence, the <spanx style="verb">version</spanx> <bcp14>SHALL</bcp14> be set to <spanx style="verb">1</spanx>.
A pledge (or Registrar-Agent) that receives a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<t>The <spanx style="verb">serial-number</spanx> member <bcp14>SHALL</bcp14> contain the product-serial-number corresponding to the X520SerialNumber field of the pledge IDevID certificate;
it can be correlated with the product-serial-number in the signing certificate contained in the JWS Protected Header of the Pledge Status response artifact.</t>

<t>The <spanx style="verb">created-on</spanx> member <bcp14>SHALL</bcp14> contain the current date and time at tStatus creation as standard date/time string as defined in <xref section="5.6" sectionFormat="of" target="RFC3339"/>;
it can be used as reference time for the corresponding Pledge Status response artifact after correlating via the product-serial-number;
note that pledges may not have synchronized time to provide the created-on date and time on their own.</t>

<t>The <spanx style="verb">status-type</spanx> allows for specifying which status information is to be returned.
As shown in <xref target="stat_req_def"/>, BRSKI-PRM defines two enumeration values:</t>

<t><list style="symbols">
  <t><spanx style="verb">bootstrap</spanx> to query current status information regarding the bootstrapping status (e.g., voucher processing and enrollment of the pledge into a domain)</t>
  <t><spanx style="verb">operation</spanx> to query current status information regarding the operational status (e.g., utilization of the bootstrapped EE credentials in communication with other peers)</t>
</list></t>

<t>Other specifications using this artifact may define further enumeration values, e.g., to query application-related status.</t>

<t><xref target="stat_req_data"/> below shows an example for the JSON Status Trigger Data using the status type <spanx style="verb">bootstrap</spanx>:</t>

<figure title="JSON Status Trigger Data Example" anchor="stat_req_data"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "vendor-pledge4711",
  "status-type": "bootstrap"
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-7"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the tStatus artifact <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded Registrar-Agent EE certificate used to sign the tStatus artifact as well as the certificate chain</t>
</list></t>

<t><xref target="tstatus_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example within tStatus" anchor="tstatus_header"><artwork type="json" align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="jws-signature-7"><name>JWS Signature</name>

<t>The Registrar-Agent <bcp14>MUST</bcp14> sign the tStatus artifact using its EE credentials.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

</section>
</section>
<section anchor="pstatus_artifact"><name>Response Artifact: Pledge Status (pStatus)</name>

<t>The Pledge Status (pStatus) artifact <bcp14>SHALL</bcp14> be an authenticated self-contained object signed by the pledge, containing status telemetry information.
The exact content depends on the Status Trigger parameter <spanx style="verb">status-type</spanx>.</t>

<t>For the JWS-signed JSON format used by this specification, the pStatus artifact <bcp14>MUST</bcp14> use the "General JWS JSON Serialization Syntax" defined in <xref section="7.2.1" sectionFormat="of" target="RFC7515"/>, which <bcp14>MUST</bcp14> contain the JSON Pledge Status Data defined in <xref target="pstatus_data"/> in the JWS Payload.
<xref target="pstatus_representation"/> summarizes the serialization of the JWS-signed JSON PER artifact:</t>

<figure title="pStatus Representation in General JWS JSON Serialization Syntax" anchor="pstatus_representation"><artwork align="left"><![CDATA[
{
  "payload": BASE64URL(UTF8(JSON Pledge Status Data)),
  "signatures": [
    {
      "protected": BASE64URL(UTF8(JWS Protected Header)),
      "signature": BASE64URL(JWS Signature)
    }
  ]
}
]]></artwork></figure>

<t>The JSON Pledge Status Data <bcp14>MUST</bcp14> be UTF-8 encoded to become the octet-based JWS Payload defined in <xref target="RFC7515"/>.
The JWS Payload is further base64url-encoded to become the string value of the <spanx style="verb">payload</spanx> member as described in <xref section="3.2" sectionFormat="of" target="RFC7515"/>.
The octets of the UTF-8 representation of the JWS Protected Header are base64url-encoded to become the string value of the <spanx style="verb">protected</spanx> member.
The generated JWS Signature is base64url-encoded to become the string value of the <spanx style="verb">signature</spanx> member.</t>

<section anchor="pstatus_data"><name>JSON Pledge Status Data</name>

<t>The JSON Pledge Status Data <bcp14>SHALL</bcp14> be a JSON document <xref target="RFC8259"/> that <bcp14>MUST</bcp14> conform with the CDDL <xref target="RFC8610"/> data model defined in <xref target="stat_res_def"/>, which has the same members as the <spanx style="verb">voucherstatus-post</spanx> CDDL defined in <xref section="5.7" sectionFormat="of" target="RFC8995"/> and the  <spanx style="verb">enrollstatus-post</spanx> CDDL defined in <xref section="5.9.4" sectionFormat="of" target="RFC8995"/>.</t>

<figure title="CDDL for JSON Pledge Status Data (pledgestatus)" anchor="stat_res_def"><artwork type="cddl" align="left"><![CDATA[
  pledgestatus = {
    "version": uint,
    "status": bool,
    ?"reason" : text,
    "reason-context": { * $$arbitrary-map }
  }
]]></artwork></figure>

<t>The <spanx style="verb">version</spanx> member follows the definition in <xref target="tstatus_data"/> (same as in JSON Status Query Data).</t>

<t>The <spanx style="verb">reason</spanx> and <spanx style="verb">reason-context</spanx> members follow the definitions in <xref target="vstatus_data"/>, i.e., in contrast to <xref target="RFC8995"/>, <spanx style="verb">reason-context</spanx> <bcp14>MUST</bcp14> be provided.</t>

<t>The new pStatus artifact also utilizes the <spanx style="verb">reason-context</spanx> field to provide a distinguishable token.
For pStatus artifacts, the JSON object in the <spanx style="verb">reason-context</spanx> field <bcp14>MUST</bcp14> contain either the</t>

<t><list style="symbols">
  <t><spanx style="verb">pbs-details</spanx> member for status information corresponding to the status-type <spanx style="verb">bootstrap</spanx>, or the</t>
  <t><spanx style="verb">pos-details</spanx> member for status information corresponding to the status-type <spanx style="verb">operation</spanx> (see <xref target="tstatus_data"/>)</t>
</list></t>

<t>Other documents may add additional <spanx style="verb">reason-context</spanx> members correlating to other <spanx style="verb">statustrigger</spanx> status-types or to include further status information.</t>

<t>For the <spanx style="verb">pbs-details</spanx> member, the following values with the given semantics are defined, while additional information <bcp14>MAY</bcp14> be provided in the top-level <spanx style="verb">reason</spanx> member:</t>

<t><list style="symbols">
  <t><spanx style="verb">factory-default</spanx>: Pledge has not been bootstrapped.
The pledge signs the response message using its IDevID certificate/credentials.</t>
  <t><spanx style="verb">voucher-success</spanx>: Pledge processed the voucher exchange successfully.
The pledge signs the response message using its IDevID certificate/credentials.</t>
  <t><spanx style="verb">voucher-error</spanx>: Pledge voucher processing terminated with error.
Additional information may be provided in the <spanx style="verb">reason</spanx> or <spanx style="verb">reason-context</spanx> members.
The pledge signs the response message using its IDevID certificate/credentials.</t>
  <t><spanx style="verb">enroll-success</spanx>: Pledge processed the enrollment exchange successfully.
Additional information may be provided in the <spanx style="verb">reason</spanx> or <spanx style="verb">reason-context</spanx> members.
The pledge signs the response message using its domain-owner signed EE certificate/credentials.</t>
  <t><spanx style="verb">enroll-error</spanx>: Pledge enrollment-response processing terminated with error.
Additional information may be provided in the <spanx style="verb">reason</spanx> or <spanx style="verb">reason-context</spanx> members.
The pledge signs the response message using its IDevID certificate/credentials.</t>
</list></t>

<t>The <spanx style="verb">pbs-details</spanx> values <bcp14>SHALL</bcp14> be cumulative in the sense that <spanx style="verb">enroll-success</spanx> and <spanx style="verb">enroll-error</spanx> imply <spanx style="verb">voucher-success</spanx>.
<xref target="stat_example_bootstrap"/> below provides an example for bootstrap status information in the JSON Pledge Status Data:</t>

<figure title="status-bootstrap JSON Pledge Status Data Example" anchor="stat_example_bootstrap"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "status": true,
  "reason": "Pledge processed enrollment exchange successfully.",
  "reason-context": {
    "pbs-details": "Pledge processed enrollment exchange successfully."
  }
}
]]></artwork></figure>

<t>For the <spanx style="verb">pos-details</spanx> member, the following values with the given semantics are defined, while additional information <bcp14>MAY</bcp14> be provided in the top-level <spanx style="verb">reason</spanx> member:</t>

<t><list style="symbols">
  <t><spanx style="verb">connect-success</spanx>: Pledge could successfully establish a connection to another peer.
The pledge signs the response message using its domain-owner signed EE certificate/credentials.</t>
  <t><spanx style="verb">connect-error</spanx>: Pledge connection establishment terminated with error.
The pledge signs the response message using its domain-owner signed EE certificate/credentials.</t>
</list></t>

<t><xref target="stat_example_operation"/> below provides an example for operational status information in the JSON Pledge Status Data:</t>

<figure title="status-operation JSON Pledge Status Data Example" anchor="stat_example_operation"><artwork type="json" align="left"><![CDATA[
{
  "version": 1,
  "status": "connect-error",
  "reason": "TLS certificate could not be verified.",
  "reason-context": {
    "connect-error" : "Connection establishment terminated with error."
  }
}
]]></artwork></figure>

</section>
<section anchor="jws-protected-header-8"><name>JWS Protected Header</name>

<t>The JWS Protected Header of the pStatus artifact <bcp14>MUST</bcp14> contain the following standard Header Parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t><spanx style="verb">alg</spanx>: <bcp14>SHALL</bcp14> contain the algorithm type used to create the signature, e.g., <spanx style="verb">ES256</spanx>, as defined in <xref section="4.1.1" sectionFormat="of" target="RFC7515"/></t>
  <t><spanx style="verb">x5c</spanx>: <bcp14>SHALL</bcp14> contain the base64-encoded pledge EE certificate used to sign the pStatus artifact;
it <bcp14>SHOULD</bcp14> also contain the certificate chain for this certificate;
if the certificate chain is not included in the x5c Header Parameter, it <bcp14>MUST</bcp14> be available at the Registrar-Agent for verification</t>
</list></t>

<t><xref target="pstatus_header"/> below shows an example for this JWS Protected Header:</t>

<figure title="JWS Protected Header Example within pStatus" anchor="pstatus_header"><artwork type="json" align="left"><![CDATA[
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="jws-signature-8"><name>JWS Signature</name>

<t>The pledge <bcp14>MUST</bcp14> sign the tStatus artifact using its IDevID or domain-owner signed EE credentials according to its bootstrapping status as defined in <xref target="pstatus_data"/>.
The JWS Signature is generated over the JWS Protected Header and the JWS Payload as described in <xref section="5.1" sectionFormat="of" target="RFC7515"/>.</t>

</section>
</section>
</section>
</section>
<section anchor="log_hints"><name>Logging Considerations</name>

<t>The registrar <bcp14>SHOULD</bcp14> log certain events to provide an audit trail for the onboarding of pledges into its domain.
This audit trail may support the root cause analysis in case of device or system failures.
The logging <bcp14>SHOULD</bcp14> include the identity of the pledge, the identity of the Registrar-Agent that was interacting with the pledge, and relevant artifact fields, in particular telemetry information:</t>

<t><list style="symbols">
  <t>PVR received from Registrar-Agent</t>
  <t>Acceptance of a pledge into the domain</t>
  <t>Voucher provided to Registrar-Agent</t>
  <t>PER received from Registrar-Agent</t>
  <t>Pledge EE certificate requested</t>
  <t>Pledge EE certificate received from Domain CA</t>
  <t>Pledge EE certificate provided to Registrar-Agent</t>
  <t>CA Certificates provided to Registrar-Agent</t>
  <t>Voucher Status received from Registrar-Agent</t>
  <t>Enroll Status received from Registrar-Agent</t>
  <t>Pledge Status received from Registrar-Agent</t>
  <t>Pledge EE certificate revoked</t>
</list></t>

<t>For log analysis the following may be considered:</t>

<t><list style="symbols">
  <t>The registrar knows which Registrar-Agent collected which PVR from the included agent-signed-data object.</t>
  <t>The registrar always knows the connecting Registrar-Agent from the TLS client authentication using the Registrar-Agent EE certificate and can log it accordingly.</t>
  <t>The telemetry information from the pledge can be correlated to the voucher through the product-serial-number in the EE certificate contained in the JWS Protected Header of the status artifacts and the product-serial-number contained in the voucher. By this it can also be related to the PER.</t>
</list></t>

<t>With this, it can for instance be analyzed if multiple Registrar-Agents are involved in bootstrapping devices.
In addition, within the domain it can be analyzed, if the onboarding involved different registrar-agents or if different registrars have been used.</t>

</section>
<section anchor="iana_con"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<texttable title="BRSKI Well-Known URIs Additions" anchor="iana_table_uri">
      <ttcol align='left'>Path Segment</ttcol>
      <ttcol align='left'>Description</ttcol>
      <ttcol align='left'>Reference</ttcol>
      <c>requestenroll</c>
      <c>Supply PER to registrar</c>
      <c>[THISRFC]</c>
      <c>wrappedcacerts</c>
      <c>Obtain wrapped CA certificates</c>
      <c>[THISRFC]</c>
      <c>tpvr</c>
      <c>Trigger Pledge Voucher-Request</c>
      <c>[THISRFC]</c>
      <c>tper</c>
      <c>Trigger Pledge Enroll-Request</c>
      <c>[THISRFC]</c>
      <c>svr</c>
      <c>Supply voucher to pledge</c>
      <c>[THISRFC]</c>
      <c>scac</c>
      <c>Supply CA certificates to pledge</c>
      <c>[THISRFC]</c>
      <c>ser</c>
      <c>Supply Enroll-Response to pledge</c>
      <c>[THISRFC]</c>
      <c>qps</c>
      <c>Query pledge status</c>
      <c>[THISRFC]</c>
</texttable>

</section>
<section anchor="dns-service-names"><name>DNS Service Names</name>

<t>IANA has registered the following service names:</t>

<t><strong>Service Name:</strong> brski-pledge<br />
<strong>Transport Protocol(s):</strong> tcp<br />
<strong>Assignee:</strong> IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref><br />
<strong>Contact:</strong> IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref><br />
<strong>Description:</strong> The Bootstrapping Remote Secure Key Infrastructure Pledge<br />
<strong>Reference:</strong> [THISRFC]</t>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component Registrar-Agent</t>
  <t>potentially no transport layer security between Registrar-Agent and pledge</t>
</list></t>

<t><xref target="tpvr"/> describes to optionally apply TLS to protect the communication between the Registrar-Agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credentials used by the Registrar-Agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an EE certificate associated with the commissioning device instead of an EE certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the Registrar-Agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the Registrar-Agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is not encrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component Registrar-Agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between Registrar-Agent and pledge</t>
</list></t>

<section anchor="sec_cons-dos"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.
Because in BRSKI-PRM the pledge responds to requests from real or illicit Registrar-Agents, pledges are more subject to DoS attacks from Registrar-Agents in BRSKI-PRM than they are from illicit registrars in <xref target="RFC8995"/>, where pledges do initiate the connections.</t>

<t>A DoS attack with a faked Registrar-Agent may block the bootstrapping of the pledge due changing state on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limit the number of voucher-requests it creates until at least one has finished.
An alternative may be that the onboarding state may expire after a certain time, if no further interaction has happened.</t>

<t>In addition, the pledge may assume that repeated triggering for PVR are the result of a communication error with the Registrar-Agent.
In that case the pledge <bcp14>MAY</bcp14> simply resend the PVR previously sent.
Note that in case of re-sending, a contained nonce and also the contained agent-signed-data in the PVR would consequently be reused.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A Registrar-Agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the <spanx style="verb">proximity-registrar-cert</spanx> field in the PVR matches its own registrar EE certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the pledge IDevID certificate. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the Registrar-Agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the Registrar-Agent EE certificate data contained in the PVR.</t>

<t>Mis-binding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref section="11.4" sectionFormat="of" target="RFC8995"/>.</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misuse of a Registrar-Agent with a valid Registrar-Agent EE certificate may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the Registrar-Agent against the domain registrar.
The Registrar-Agent EE certificate may have been acquired by a prior BRSKI run for the Registrar-Agent, if an IDevID is available on Registrar-Agent.
Alternatively, the Registrar-Agent EE certificate may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the Registrar-Agent EE certificate is valid for the complete bootstrapping phase.
This avoids that a Registrar-Agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the Registrar-Agent EE certificate, due to missing trusted timestamp in the Registrar-Agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the Registrar-Agent EE certificate used in the TLS handshake with the Registrar-Agent. If both certificates are verified successfully, the Registrar-Agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of DNS-SD with mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a Registrar-Agent may query the Service Type in combination with the product-serial-number of a specific pledge, e.g., in the Service Instance Name or Service Subtype.
The pledge reacts on this if its product-serial-number is part of the query message.</t>

<t>If the Registrar-Agent performs DNS-based Service Discovery without a specific product-serial-number, all pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing an LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref section="11.7" sectionFormat="of" target="RFC8995"/> (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref section="3.7" sectionFormat="of" target="RFC8407"/> (Security Considerations).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Charlie Kaufman (Early SECDIR review), Martin BjÃ¶rklund (Early YANGDOCTORS review), Marco Tiloca (Early IOTDIR review), Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, Christian Spindler, and Julian Krieger.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Another special thanks for the detailed Shepherad review and connected discussions to Matthias Kovatsch.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.
Review comments in the context of a formal analysis of BRSKI-PRM have been provided by Marco Calipari.</t>

</section>


  </middle>

  <back>


<references title='References' anchor="sec-combined-references">

    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC5272">
  <front>
    <title>Certificate Management over CMS (CMC)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="M. Myers" initials="M." surname="Myers"/>
    <date month="June" year="2008"/>
    <abstract>
      <t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t>
      <t>1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t>
      <t>2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t>
      <t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5272"/>
  <seriesInfo name="DOI" value="10.17487/RFC5272"/>
</reference>

<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC6762">
  <front>
    <title>Multicast DNS</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6762"/>
  <seriesInfo name="DOI" value="10.17487/RFC6762"/>
</reference>

<reference anchor="RFC6763">
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6763"/>
  <seriesInfo name="DOI" value="10.17487/RFC6763"/>
</reference>

<reference anchor="RFC7030">
  <front>
    <title>Enrollment over Secure Transport</title>
    <author fullname="M. Pritikin" initials="M." role="editor" surname="Pritikin"/>
    <author fullname="P. Yee" initials="P." role="editor" surname="Yee"/>
    <author fullname="D. Harkins" initials="D." role="editor" surname="Harkins"/>
    <date month="October" year="2013"/>
    <abstract>
      <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport. This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates. It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7030"/>
  <seriesInfo name="DOI" value="10.17487/RFC7030"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8615">
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <date month="May" year="2019"/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8615"/>
  <seriesInfo name="DOI" value="10.17487/RFC8615"/>
</reference>

<reference anchor="RFC8995">
  <front>
    <title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <author fullname="M. Behringer" initials="M." surname="Behringer"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies automated bootstrapping of an Autonomic Control Plane. To do this, a Secure Key Infrastructure is bootstrapped. This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline. We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device. The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8995"/>
  <seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>

<reference anchor="RFC9360">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="February" year="2023"/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9360"/>
  <seriesInfo name="DOI" value="10.17487/RFC9360"/>
</reference>


<reference anchor="I-D.ietf-anima-jws-voucher">
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname="Thomas Werner" initials="T." surname="Werner">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="29" month="November" year="2024"/>
      <abstract>
	 <t>   I-D.ietf-anima-rfc8366bis defines a digital artifact (known as a
   voucher) as a YANG-defined JSON document that is signed using a
   Cryptographic Message Syntax (CMS) structure.  This document
   introduces a variant of the voucher artifact in which CMS is replaced
   by the JSON Object Signing and Encryption (JOSE) mechanism described
   in RFC7515 to support deployments in which JOSE is preferred over
   CMS.  In addition to specifying the format, the &quot;application/voucher-
   jws+json&quot; media type is registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-jws-voucher-14"/>
   
</reference>


<reference anchor="I-D.ietf-netconf-sztp-csr">
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Sean Turner" initials="S." surname="Turner">
         <organization>sn3rd</organization>
      </author>
      <date day="2" month="March" year="2022"/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-sztp-csr-14"/>
   
</reference>


<reference anchor="I-D.ietf-anima-rfc8366bis">
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software</organization>
      </author>
      <author fullname="Max Pritikin" initials="M." surname="Pritikin">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Qiufang Ma" initials="Q." surname="Ma">
         <organization>Huawei</organization>
      </author>
      <date day="8" month="July" year="2024"/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#x27;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#x27;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-rfc8366bis-12"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>

<reference anchor="RFC8259">
  <front>
    <title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
    <author fullname="T. Bray" initials="T." role="editor" surname="Bray"/>
    <date month="December" year="2017"/>
    <abstract>
      <t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format. It was derived from the ECMAScript Programming Language Standard. JSON defines a small set of formatting rules for the portable representation of structured data.</t>
      <t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="90"/>
  <seriesInfo name="RFC" value="8259"/>
  <seriesInfo name="DOI" value="10.17487/RFC8259"/>
</reference>

<reference anchor="RFC3339">
  <front>
    <title>Date and Time on the Internet: Timestamps</title>
    <author fullname="G. Klyne" initials="G." surname="Klyne"/>
    <author fullname="C. Newman" initials="C." surname="Newman"/>
    <date month="July" year="2002"/>
    <abstract>
      <t>This document defines a date and time format for use in Internet protocols that is a profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="3339"/>
  <seriesInfo name="DOI" value="10.17487/RFC3339"/>
</reference>

<reference anchor="RFC7951">
  <front>
    <title>JSON Encoding of Data Modeled with YANG</title>
    <author fullname="L. Lhotka" initials="L." surname="Lhotka"/>
    <date month="August" year="2016"/>
    <abstract>
      <t>This document defines encoding rules for representing configuration data, state data, parameters of Remote Procedure Call (RPC) operations or actions, and notifications defined using YANG as JavaScript Object Notation (JSON) text.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7951"/>
  <seriesInfo name="DOI" value="10.17487/RFC7951"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC2986">
  <front>
    <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
    <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
    <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
    <date month="November" year="2000"/>
    <abstract>
      <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process. The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2986"/>
  <seriesInfo name="DOI" value="10.17487/RFC2986"/>
</reference>

<reference anchor="RFC3629">
  <front>
    <title>UTF-8, a transformation format of ISO 10646</title>
    <author fullname="F. Yergeau" initials="F." surname="Yergeau"/>
    <date month="November" year="2003"/>
    <abstract>
      <t>ISO/IEC 10646-1 defines a large character set called the Universal Character Set (UCS) which encompasses most of the world's writing systems. The originally proposed encodings of the UCS, however, were not compatible with many current applications and protocols, and this has led to the development of UTF-8, the object of this memo. UTF-8 has the characteristic of preserving the full US-ASCII range, providing compatibility with file systems, parsers and other software that rely on US-ASCII values but are transparent to other values. This memo obsoletes and replaces RFC 2279.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="63"/>
  <seriesInfo name="RFC" value="3629"/>
  <seriesInfo name="DOI" value="10.17487/RFC3629"/>
</reference>

<reference anchor="RFC9525">
  <front>
    <title>Service Identity in TLS</title>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="R. Salz" initials="R." surname="Salz"/>
    <date month="November" year="2023"/>
    <abstract>
      <t>Many application technologies enable secure communication between two entities by means of Transport Layer Security (TLS) with Internet Public Key Infrastructure using X.509 (PKIX) certificates. This document specifies procedures for representing and verifying the identity of application services in such interactions.</t>
      <t>This document obsoletes RFC 6125.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9525"/>
  <seriesInfo name="DOI" value="10.17487/RFC9525"/>
</reference>

<reference anchor="RFC6241">
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
    <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
    <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
    <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
    <date month="June" year="2011"/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6241"/>
  <seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>

<reference anchor="RFC7252">
  <front>
    <title>The Constrained Application Protocol (CoAP)</title>
    <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
    <author fullname="K. Hartke" initials="K." surname="Hartke"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
      <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7252"/>
  <seriesInfo name="DOI" value="10.17487/RFC7252"/>
</reference>

<reference anchor="RFC8040">
  <front>
    <title>RESTCONF Protocol</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="January" year="2017"/>
    <abstract>
      <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8040"/>
  <seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>

<reference anchor="RFC8407">
  <front>
    <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <date month="October" year="2018"/>
    <abstract>
      <t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="216"/>
  <seriesInfo name="RFC" value="8407"/>
  <seriesInfo name="DOI" value="10.17487/RFC8407"/>
</reference>

<reference anchor="RFC8792">
  <front>
    <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
    <author fullname="A. Farrel" initials="A." surname="Farrel"/>
    <author fullname="Q. Wu" initials="Q." surname="Wu"/>
    <date month="June" year="2020"/>
    <abstract>
      <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8792"/>
  <seriesInfo name="DOI" value="10.17487/RFC8792"/>
</reference>

<reference anchor="RFC8990">
  <front>
    <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
    <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8990"/>
  <seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9238">
  <front>
    <title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="J. Latour" initials="J." surname="Latour"/>
    <author fullname="H. Habibi Gharakheili" initials="H." surname="Habibi Gharakheili"/>
    <date month="May" year="2022"/>
    <abstract>
      <t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t>
      <t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9238"/>
  <seriesInfo name="DOI" value="10.17487/RFC9238"/>
</reference>


<reference anchor="I-D.ietf-anima-brski-ae">
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Steffen Fries" initials="S." surname="Fries">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
         <organization>Siemens AG</organization>
      </author>
      <date day="17" month="September" year="2024"/>
      <abstract>
	 <t>   This document defines enhancements to the Bootstrapping Remote Secure
   Key Infrastructure (BRSKI) protocol, known as BRSKI-AE (Alternative
   Enrollment).
   BRSKI-AE extends BRSKI to support certificate enrollment mechanisms
   instead of the originally specified use of EST.  It supports
   certificate enrollment protocols, such as CMP, that use authenticated
   self-contained signed objects for certification messages, allowing
   for flexibility in network device onboarding scenarios.
   The enhancements address use cases where the existing enrollment
   mechanism may not be feasible or optimal, providing a framework for
   integrating suitable alternative enrollment protocols.
   This document also updates the BRSKI reference architecture to
   accommodate these alternative methods, ensuring secure and scalable
   deployment across a range of network environments.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-ae-13"/>
   
</reference>


<reference anchor="I-D.richardson-emu-eap-onboarding">
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname="Alan DeKok" initials="A." surname="DeKok">
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="2" month="April" year="2023"/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-emu-eap-onboarding-03"/>
   
</reference>


<reference anchor="I-D.ietf-anima-brski-discovery">
   <front>
      <title>BRSKI discovery and variations</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei USA</organization>
      </author>
      <author fullname="Esko Dijk" initials="E." surname="Dijk">
         <organization>IoTconsultancy.nl</organization>
      </author>
      <date day="21" month="October" year="2024"/>
      <abstract>
	 <t>   This document specifies how BRSKI entities, such as registrars,
   proxies, pledges or others that are acting as responders, can be
   discovered and selected by BRSKI entities acting as initiators,
   especially in the face of variations in the protocols that can
   introduce non-interoperability when not equally supported by both
   responder and initiator.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-discovery-05"/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR"/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="androidnsd" target="https://developer.android.com/training/connect-devices-wirelessly">
  <front>
    <title>Android Developer: Connect devices wirelessly</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230000000000*/https://developer.android.com/training/connect-devices-wirelessly"/>
</reference>
<reference anchor="androidtrustfail" target="https://developer.android.com/training/articles/security-ssl">
  <front>
    <title>Security with Network Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230326153937/https://developer.android.com/training/articles/security-ssl"/>
</reference>


<reference anchor="RFC9483">
  <front>
    <title>Lightweight Certificate Management Protocol (CMP) Profile</title>
    <author fullname="H. Brockhaus" initials="H." surname="Brockhaus"/>
    <author fullname="D. von Oheimb" initials="D." surname="von Oheimb"/>
    <author fullname="S. Fries" initials="S." surname="Fries"/>
    <date month="November" year="2023"/>
    <abstract>
      <t>This document aims at simple, interoperable, and automated PKI management operations covering typical use cases of industrial and Internet of Things (IoT) scenarios. This is achieved by profiling the Certificate Management Protocol (CMP), the related Certificate Request Message Format (CRMF), and transfer based on HTTP or Constrained Application Protocol (CoAP) in a succinct but sufficiently detailed and self-contained way. To make secure certificate management for simple scenarios and constrained devices as lightweight as possible, only the most crucial types of operations and options are specified as mandatory. More specialized or complex use cases are supported with optional features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9483"/>
  <seriesInfo name="DOI" value="10.17487/RFC9483"/>
</reference>

<reference anchor="RFC4648">
  <front>
    <title>The Base16, Base32, and Base64 Data Encodings</title>
    <author fullname="S. Josefsson" initials="S." surname="Josefsson"/>
    <date month="October" year="2006"/>
    <abstract>
      <t>This document describes the commonly used base 64, base 32, and base 16 encoding schemes. It also discusses the use of line-feeds in encoded data, use of padding in encoded data, use of non-alphabet characters in encoded data, use of different encoding alphabets, and canonical encodings. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="4648"/>
  <seriesInfo name="DOI" value="10.17487/RFC4648"/>
</reference>


<reference anchor="I-D.richardson-anima-registrar-considerations">
   <front>
      <title>Operational Considerations for BRSKI Registrar</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <author fullname="Wei Pan" initials="W." surname="Pan">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="14" month="February" year="2024"/>
      <abstract>
	 <t>   This document describes a number of operational modes that a BRSKI
   Registration Authority (Registrar) may take on.

   Each mode is defined, and then each mode is given a relevance within
   an over applicability of what kind of organization the Registrar is
   deployed into.  This document does not change any protocol
   mechanisms.

   This document includes operational advice about avoiding unwanted
   consequences.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-anima-registrar-considerations-08"/>
   
</reference>

<reference anchor="RFC8971">
  <front>
    <title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
    <author fullname="S. Pallagatti" initials="S." role="editor" surname="Pallagatti"/>
    <author fullname="G. Mirsky" initials="G." role="editor" surname="Mirsky"/>
    <author fullname="S. Paragiri" initials="S." surname="Paragiri"/>
    <author fullname="V. Govindan" initials="V." surname="Govindan"/>
    <author fullname="M. Mudigonda" initials="M." surname="Mudigonda"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8971"/>
  <seriesInfo name="DOI" value="10.17487/RFC8971"/>
</reference>


<reference anchor="I-D.irtf-t2trg-taxonomy-manufacturer-anchors">
   <front>
      <title>A Taxonomy of operational security considerations for manufacturer installed keys and Trust Anchors</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="26" month="August" year="2024"/>
      <abstract>
	 <t>   This document provides a taxonomy of methods used by manufacturers of
   silicon and devices to secure private keys and public trust anchors.
   This deals with two related activities: how trust anchors and private
   keys are installed into devices during manufacturing, and how the
   related manufacturer held private keys are secured against
   disclosure.

   This document does not evaluate the different mechanisms, but rather
   just serves to name them in a consistent manner in order to aid in
   communication.

   RFCEDITOR: please remove this paragraph.  This work is occurring in
   https://github.com/mcr/idevid-security-considerations

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-t2trg-taxonomy-manufacturer-anchors-04"/>
   
</reference>




    </references>

</references>


<?line 2747?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request (PVR) - from Pledge to Registrar-Agent</name>

<t>The following is an example request sent from a Pledge to the Registrar-Agent, in "General JWS JSON Serialization".
The message size of this PVR is: 2973 bytes</t>

<figure title="Example Pledge-Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsIm5vbmNlIjoia2hOeUtwTXRoY2NpYTFyWHc0NC92UT09IiwiY3JlYXRlZC1vbi\
I6IjIwMjQtMDYtMjRUMDk6MDE6MjQuNTU2WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbW\
l0eS1yZWdpc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW\
9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQm\
dOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd0\
5qRTRNVEphRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVn\
phVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibE\
psWjJsemRISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNk\
svaTc5b1JrSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1\
dSZmZlV2t5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUU\
dDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQV\
lEVlIwUkJFRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1Wl\
hTQ0huSmxaMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncW\
hrak9QUVFEQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUm\
F1YnBDN01hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaD\
R4SVhrMSIsImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRn\
BZVW0xTVdGcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VV\
hSak1teHVZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSm\
FrbDNUV3BKZEUxRWEzUk5ha3BWVFVSVk5rNUVUVFpPVkVGMVRWUkpNVmRwU1hOSmJrNX\
NZMjFzYUdKRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaX\
dpYzJsbmJtRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYV\
VwVlZFZE5NMWRZYUV4V2JGWldaVzVLTTFKVVRsSlhWRlpEV2xaa2IyTXlNVVZOTW1NNV\
NXbDNhVmxYZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrd3\
lZVEJsY3pWZkxXZHNZVjkwTjFVME1VbFJXRmxJU1RSQlMxVldVRkZmTTFSbGQxUTFiMF\
ZWWVVOdFVIQktaMmRyU0c1d09WTk1aVFZ1YWkxbldGbFRiMk5sT1RoeFFXSnROa0YwZF\
MxRlIxUkxZMDVSSW4xZGZRMEsifX0",
  "signatures": [
    {
      "protected": "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNV\
NU1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RB\
eEthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJN\
Q0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3\
Q1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZ\
RFZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRt\
bGpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpj\
RUVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2\
TXgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcx\
aGMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1C\
YUFGRlFMak56UC9TL2tvdWpRd2pnNUU1ZnZ3Y1liTUJNR0ExVWRKUVFNTUFvR0NDc0dB\
UVVGQndNQ01BNEdBMVVkRHdFQi93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJF\
QWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENt\
SkxUekVsdkQycG9LNmR4NmwxL3V5bVRuYlFERGZKbGF0dVgyUm9PRT0iXSwidHlwIjoi\
dm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0",
      "signature": "ntAgC7GT7xIDYcHBXoYej8uIUI6WR2Iv-7T1CaR-J6-xS60D\
iWS1-vfc5Uu5INZS1dyWZ4vVH6uaoPceRxNc8g"
    }
  ]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request (RVR) - from Registrar to MASA</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a pledge-voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example registrar-voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 7533 bytes</t>

<figure title="Example Registrar-Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6ImtoTnlLcE10aGNjaWExclh3NDQvdlE9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybGhNbWhQWlZWMGQxUllVbTlaTWs1d1dWUkdlVm\
RJWXpCT1F6a3lWVlF3T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxVV\
hSTlJGbDBUV3BTVlUxRWF6Wk5SRVUyVFdwUmRVNVVWVEpYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKWFJYcFZhelZvWVROQ1YxWkdWbE5XYXpWeVRsVldWVl\
pHY0ZCV2ExWkhUVlpTVjFWcmNFNVdiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxWnNXa1phUlRWT1RWZFNXbGxWVmpSV01rcEhWMnhrWV\
ZaNlZreFVWRVpMVmxaU2MxTnNhRmRTYkhCRlZqSjRZV0V5U1hsVVdHeE9WbFphVDFSWE\
1VNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY21RemJGcFdSVX\
B6V1ROd1YxcHJlRmhhU0U1YVZtcHJkMVJxUmxaTlJURldZa1pLV0ZKdGVFcFZNVkpUVV\
d4TmVGWnNaRlpTYTFwdFZGUkdVMkpIVVhoVlZFWnBUVVphVjFkV1ZrOWtSbFpKVVd0MF\
lVMXRVbmxWTUdNeFpEQTVWMVJyTVdGV1Jsb3hXVmRyZUdKc1pFZGlSbEpwVFdzMWMxUX\
hVbTlsUmtaWVUyNVNUMkV3V1hkYVJrMTRVbXhKZUZWcmVGcE5SRlpUVTFjMGVGcEhXbE\
pOUlhOcFpsZ3dJaXdpYzJsbmJtRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWl\
hsS05FNVhUV2xQYkhOcFZGVnNTbEZwZEZWUk1FNUNXVlZPYmxGWVpFcFJhMFp1VTFWa1\
FsZEhOVmRoYms1V1RsVXhRbUl3WkVSUk0wWklWVEF3TUU5VlNrSlVWVTVPVWtSQ05GRX\
pjRUpUYTBwdVZHeGFRMUZXYkZWUlYzUkhWV3N4VTFaWVpFWmtNV3hGVm14R1VsTXdVa0\
psUlhSb1ZucFdkVlV5TVhOa1ZtOTNWRzVhYW1KclJqUlNibkJDVm10S2JsUnNXa05SVl\
RGT1VrZDBkMk5IU25SYVJYUm9WbnBXZFZaclpGZGxiVkpHVkd0S1RsRXdSbGxTUmxKS1\
pVVXhSVmRZWkU5U1JVVjRWR3RTV21WRk5VZGlNV3hGWlcxek1WUXhVbkpsUlRGeFZGaG\
9UbUZyTUhoVU1WSldUbFprY1ZGc1RrNVZXRTR6VVRGR1dsSkdXbEpWVldSR1pEQndRMV\
pXVWtaV2F6RkRWRlZrUWsxV1ZrWlJNbVF6VkZaT2RHSklWbUZOU0VKM1dXMHhhMUpIU1\
hwVGJtUk9WV3N4TTFKV1JscFNSbHBTVlZWYVJtUXlPVE5VVmxKS1pXczFSVlpVU2s5bG\
JXTXhWRlpLYW1Rd1dsSlhWVkpYVlZaR1JWSkZSVEZUTWtaWVRsYzFWR0pYZURGWGFrSl\
RZa2RTZEdKSGNHRldSVXBoVkZWS1RsSXdTalZqVldSVVZGUlJOVkZYWkVaU01FNUVZMV\
ZrVkZSVVVUVlJXR1JHVTBWRmQxTlZSa05SZW1NMVlrZHNhRlZ0VGtOaGJIQnFVbFZXV1\
dSNlpIbFdWMVpvWkc1U1NGTnJSakZUUkZKM1lYcFNTazVFU2pKWlZVcE9ZekZWZUUxWG\
JFMVNSVTVFVkVkMFYyRklVbFpXYWtsNFlsaGFhRk13VGpKVVdHZDVWMU4wVkZSWFpGSl\
BSMXB0WkRCM2VVMHpiM3BXUld4WFVXeGtjVnBHVWtObGF6RkVZekJrUkZFelRraFJWa1\
pXVW10S00xSlhaRU5SYW1oWVUwWmplR0ZIVFhsU1dGSnJVakZhTmxwRlRURmxiVVpZVm\
01U1lWWjZWalpVUm1STFRVVjRkRTVYZUd0U1J6Z3hWR3RTVW1Wck1VTlBSV1JDVFZaV2\
ExTllaRkpYVlRGRFdWVkdSMUpzUmsxaGF6VTJWVU01VkV3eWRIWmtWM0JTWkRKd2JrNV\
ZWVEZhYmxveldURnNhVlJWU2s1U01FVjRWbGRTUzFWV1JrNVVWVVoyVWpCT1JHTXdaRU\
pWVmxaSFVXNWtUbEV3TVVKT1JXUkNUVlpXYTFKSVpFWlJhVGt6VlZWV1FtUXdiRWxhTU\
ZKQ1V6QktibG96Um05aE1uQlFWVVpHVWxKRlJtNVVhMmhDVWtWS1JsRlhiRU5rVkU0el\
ZXdEtUV013Y0U1VlJGWjZWRlJCTTAxRlozSldWVnA1WlZVMVZrNXRaRXhsYTNoUVZXMU\
9SMlZXU2xOVU1uaDRZMVZvY0Zvd2JHNVhSVTUwVTJ0NFZXVnJWbk5rYTFGNVkwYzVURT\
V0VWpST2JYZDRURE5XTldKV1VuVlpiRVpGVWtkYVMySkhSakJrVm1kNVZXMDVVRkpVTU\
dsWVUzZHBaRWhzZDBscWIybGtiVGt4V1RKb2JHTnBNWEZrTTAxeVlXNU9kbUpwU1hOSm\
JVWnpXbmxKTmtsclZsUk5hbFV5U1c0d0lpd2ljMmxuYm1GMGRYSmxJam9pYm5SQlowTT\
NSMVEzZUVsRVdXTklRbGh2V1dWcU9IVkpWVWsyVjFJeVNYWXROMVF4UTJGU0xVbzJMWG\
hUTmpCRWFWZFRNUzEyWm1NMVZYVTFTVTVhVXpGa2VWZGFOSFpXU0RaMVlXOVFZMlZTZU\
U1ak9HY2lmVjE5IiwiY3JlYXRlZC1vbiI6IjIwMjQtMDYtMjRUMDk6MDI6MTUuNTczWi\
IsImFnZW50LXNpZ24tY2VydCI6WyJNSUlCOWpDQ0FaMmdBd0lCQWdJRVl4WHM3VEFLQm\
dncWhrak9QUVFEQWpBK01STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRF\
ZRUUhEQVJUYVhSbE1SZ3dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY0\
5Nakl3T1RBMU1USXpORFV6V2hjTk1qVXdPVEExTVRJek5EVXpXakJnTVFzd0NRWURWUV\
FHRXdKQlVURVNNQkFHQTFVRUNnd0pUWGxEYjIxd1lXNTVNUlV3RXdZRFZRUUxEQXhOZV\
ZOMVluTnBaR2xoY25reEpqQWtCZ05WQkFNTUhVMTVVMmwwWlZCMWMyaE5iMlJsYkZKbF\
oybHpkSEpoY2tGblpXNTBNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQU\
V4aHZuYWtDSmVpZ3pqWkFVYU5adVAwMWUrUWxVY1E5UjJMSWs2UkI2dmtjdFdMS3BaWC\
85TGthNEdxckFWWmhhM3ZKcmhGc0l4OEdUQkhqWnZLMVd1Nk5uTUdVd0RnWURWUjBQQV\
FIL0JBUURBZ09JTUI4R0ExVWRJd1FZTUJhQUZHK2hQVzUxN1ovb3NSQ0ZUc2NlUDY4bj\
kzc2pNQjBHQTFVZERnUVdCQlJNdHp0akVwVlJUT3ZBVGRCamtGNWFHeVlQZURBVEJnTl\
ZIU1VFRERBS0JnZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05IQURCRUFpQmJoRG\
pwbDJ2cWNONnBSVjRuZVU0dFFsWWFOTit4ZjNnSnUrMHBKblNBL1FJZ0ljcXpsZmhYaU\
Qxc0g3VTVQdUtwVVpzSWpkRjRSenhzQTZxSnRFTEQyUHM9Il19fQ",
  "signatures": [
    {
      "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJ\
Rk1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERU\
QUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVN\
VEV3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1\
UW5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJs\
emRISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJn\
Y3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNr\
YVB5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPLzBDREVqSWtCUW9idzhZS3Fq\
dHhKSFZTR1RqOUtPb3ljd0pUQVRCZ05WSFNVRUREQUtCZ2dyQmdFRkJRY0RIREFPQmdO\
VkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXpqMEVBd0lEUndBd1JBSWdZcjJMZnFvYUNL\
REY0UkFjTW1KaStOQ1pxZFNpdVZ1Z0lTQTdPaEtScTNZQ0lEeG5QTU1ucFhBTVRyUEp1\
UFd5Y2VFUjExUHhIT24rMENwU0hpMnFncFdYIl0sInR5cCI6InZvdWNoZXItandzK2pz\
b24iLCJhbGciOiJFUzI1NiJ9",
      "signature": "_mcsO5vo0g2rFmBvTb-UsOWkEmhYNfQ5XmbuKHKH0ZLjea-7\
911BilAMdFORmT4vCzWKBSH6HSqtpIRcSSxx7Q"
    }
  ]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher - from MASA to Pledge, via Registrar and Registrar-Agent</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-Agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-Agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-Agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 2994 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oia2hOeUtwTXRoY2NpYTFyWHc0NC92UT09IiwiY3JlYXRlZC1vbiI6IjIwMjQtMDYtMj\
RUMDk6MDI6MTYuMjQ0WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [
    {
      "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNr\
WU1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RB\
eEthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJN\
QjRYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtH\
QTFVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFV\
RUF3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dU\
QVRCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJz\
OFIwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZP\
S0dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29a\
SXpqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4L3R6VW9RL1NzeWRMMzBEUUlO\
RXRjTjltQ1RYUEFpRUF2SWIzbytGTzNCVG5jTEZzYUpaUkFrZDd6T3Vzbi8vWktPYUVL\
YnNWRGlVPSJdLCJ0eXAiOiJ2b3VjaGVyLWp3cytqc29uIiwiYWxnIjoiRVMyNTYifQ",
      "signature": "SFtc2xqK8xN2KVqkYKJl7EUU8UJAai3VvCuK8LIfH8HZFvrr\
hqGiY8vK5cbQHQCjVcroFLn7IyhH708XAdstAQ"
    },
    {
      "protected": "eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJi\
Wk1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERU\
QUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlN\
RGN3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1\
UW5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldG\
cGJsSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJC\
azE2Sy9pNzlvUmtLNVliZVBnOFVTUjgvdXMxZFBVaVpITXRva1NkcUtXNWZuV3NCZCtx\
Ukw3V1JmZmVXa3lnZWJvSmZJbGx1cmNpMjV3bmhpT1ZDR2plekI1TUIwR0ExVWRKUVFX\
TUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREhEQU9CZ05WSFE4QkFmOEVCQU1DQjRB\
d1NBWURWUjBSQkVFd1A0SWRjbVZuYVhOMGNtRnlMWFJsYzNRdWMybGxiV1Z1Y3kxaWRD\
NXVaWFNDSG5KbFoybHpkSEpoY2kxMFpYTjBOaTV6YVdWdFpXNXpMV0owTG01bGREQUtC\
Z2dxaGtqT1BRUURBZ05JQURCRkFpQnhsZEJoWnEwRXY1SkwyUHJXQ3R5UzZoRFlXMXlD\
Ty9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm8vZ0dOMC9qd3pKWjBT\
bDJoNHhJWGsxIl0sInR5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9\
",
      "signature": "0Q7_a7L4ahn2vmfSxxkKg1xsOMMc8_D7B_Ilzqv5DKzCMkc7\
8YeeezDsuh4Z5JNVQUYHPp7LsK_AS_WH8TdVzA"
    }
  ]
}

]]></artwork></figure>

</section>
</section>
<section anchor="pledgehttps"><name>HTTP-over-TLS operations between Registrar-Agent and Pledge</name>

<t>The use of HTTP-over-TLS between Registrar-Agent and pledge has been identified as an optional mechanism.</t>

<t>Provided that the key-agreement in the underlying TLS protocol connection can be properly authenticated, the use of TLS provides privacy for the voucher and enrollment operations between the pledge and the Registrar-Agent.
The authenticity of the onboarding and enrollment is not dependent upon the security of the TLS connection.</t>

<t>The use of HTTP-over-TLS is not mandated by this document for two main reasons:</t>

<t><list style="numbers" type="1">
  <t>A certificate is generally required in order to do TLS.  While there are other modes of authentication including PSK, various EAP methods, and raw public key, they do not help as there is no previous relationship between the Registrar-Agent and the pledge.</t>
  <t>The pledge can use its IDevID certificate to authenticate itself, but <xref target="RFC9525"/> DNS-ID methods do not apply, as the pledge does not have a FQDN, and hence cannot be identified by DNS name.  Instead a new mechanism is required, which authenticates the X520SerialNumber DN attribute that must be present in every IDevID.</t>
</list></t>

<t>If the Registrar-Agent has a pre-configured list of which product-serial-number(s), from which manufacturers it expects to see, then it can attempt to match this pledge against a list of potential devices.</t>

<t>In many cases only the list of manufacturers is known ahead of time, so at most the Registrar-Agent can show the X520SerialNumber to the (human) operator who may then attempt to confirm that they are standing in front of a device with that product-serial-number.
The use of scannable QR codes may help automate this in some cases.</t>

<t>The CA used to sign the IDevID will be a manufacturer private PKI as described in <xref section="4.1" sectionFormat="of" target="I-D.irtf-t2trg-taxonomy-manufacturer-anchors"/>.
The anchors for this PKI will never be part of the public WebPKI anchors which are distributed with most smartphone operating systems.
A Registrar-Agent application will need to use different APIs in order to initiate an HTTPS connection without performing WebPKI verification.
The application will then have to do its own certificate chain verification against a store of manufacturer trust anchors.
In the Android ecosystem this involves use of a customer TrustManager: many application developers do not create these correctly, and there is significant push to remove this option as it has repeatedly resulted in security failures (see <xref target="androidtrustfail"/>).</t>

<t>Also note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge IDevID certificate.
IDevID certificates are intended to be widely usable and EKU does not support that use.</t>

</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 15 -&gt; IETF draft 16:</t>

<t><list style="symbols">
  <t>issue #135: corrections from IOTDIR review (clarification regarding minimum supported discovery in <xref target="discovery_uc2_ppa"/>, clarification regarding CDDl notation in <xref target="cacerts_CDDL_def"/> and editorial nits.</t>
</list></t>

<t>From IETF draft 14 -&gt; IETF draft 15:</t>

<t><list style="symbols">
  <t>issue #134: editorial clarifications on references to <xref target="I-D.ietf-anima-brski-discovery"/> in <xref target="discovery_uc2_reg"/> and  <xref target="discovery_uc2_ppa"/></t>
</list></t>

<t>From IETF draft 13 -&gt; IETF draft 14:</t>

<t><list style="symbols">
  <t>Update of the examples in <xref target="examples"/> to align with the defined prototypes</t>
  <t>Changes incorporated based on Shepherd review PR #133:
  <list style="symbols">
      <t>Terminology alignment and clarification throughout the document to use terms more consistently</t>
      <t>Restructuring of <xref target="exchanges"/> for protocol steps to align to the general approach: Overview, data description, CDDL description (if necessary), JWS Header an Signature. This lead to some movement of text between existing and new subsections.</t>
      <t>Inclusion of new section on logging hints <xref target="log_hints"/> to give recommendations on which events to be logged for auditing</t>
      <t>Alignment of pledge status response data across <xref target="vstatus_data"/>, <xref target="estatus_data"/>, and <xref target="pstatus_data"/>.</t>
      <t>Included MASA component in description of affected components in <xref target="system-components"/></t>
      <t>Moved host header field handling from <xref target="pledgehttps"/> to <xref target="pledge_component"/> as generally applicable</t>
      <t>Updated status artifacts (vStatus, eStatus, pStatus) to align with BRSKI CDDL definition, but made reason-context mandatory  to have distinguishable objects for the registrar-agent</t>
      <t>Correction of terminology of local host name vs. service instance name in <xref target="discovery_uc2_ppa"/></t>
    </list></t>
  <t>Update of informative references and nits</t>
</list></t>

<t>From IETF draft 12 -&gt; IETF draft 13:</t>

<t><list style="symbols">
  <t>Deleted figure in Section "Request Artifact: Pledge Voucher-Request Trigger (tPVR)" for JSON representation of tPVR, as it has been replaced by CDDL</t>
  <t>Updated reason-content description in status response messages (enroll-status, voucher-status, and status-response).</t>
  <t>Updated CDDL source code integration to allow for automatic verification</t>
  <t>Reordered description in <xref target="pvr"/> in <xref target="tper"/> to better match the order of communication and artifact processing.</t>
  <t>Updated CDDL for the request-enroll trigger in <xref target="tper_CDDL_def"/> according to the outcome of the interim ANIMA WG meeting discussions on April 19, 2024</t>
  <t>Included statement in <xref target="per_artifact"/> for using the advanced created-on time from the agent-signed-data also for the PER, when the pledge has no synchronized clock</t>
</list></t>

<t>From IETF draft 11 -&gt; IETF draft 12:</t>

<t><list style="symbols">
  <t>Updated acknowledgments to reflect early reviews</t>
  <t>Addressed Shepherd review part 2 (Pull Request #132); containing: terminology alignment, structural improvements of the document; deletion of leftovers from previous draft versions; change of definitions to CDDL, when no YANG is available</t>
</list></t>

<t>From IETF draft 10 -&gt; IETF draft 11:</t>

<t><list style="symbols">
  <t>issue #79, clarified that BRSKI discovery in the context of BRSKI-PRM is not needed in <xref target="discovery_uc2_reg"/>.</t>
  <t>issue #103, removed step 6 in verification handling for the wrapped CA certificate provisioning as only applicable after enrollment <xref target="cacerts"/></t>
  <t>issue #128: included notation of nomadic operation of the Registrar-Agent in <xref target="architecture"/>, including proposed text from PR #131</t>
  <t>issue #130, introduced DNS service discovery name for brski_pledge to enable discovery by the Registrar-Agent in <xref target="iana_con"/></t>
  <t>removed unused reference RFC 5280</t>
  <t>removed site terminology</t>
  <t>deleted duplicated text in <xref target="pledge_component"/></t>
  <t>clarified registrar discovery and relation to BRSKI-Discovery in <xref target="discovery_uc2_reg"/></t>
  <t>clarified discovery of pledges by the Registrar-Agent in <xref target="discovery_uc2_ppa"/>, deleted reference to GRASP as handled in BRSKI-Discovery</t>
  <t>addressed comments from SECDIR early review</t>
</list></t>

<t>From IETF draft 09 -&gt; IETF draft 10:</t>

<t><list style="symbols">
  <t>issue #79, clarified discovery in the context of BRSKI-PRM and included information about future discovery enhancements in a separate draft in <xref target="discovery_uc2_reg"/>.</t>
  <t>issue #93, included information about conflict resolution in mDNS and GRASP in <xref target="discovery_uc2_ppa"/></t>
  <t>issue #103, included verification handling for the wrapped CA certificate provisioning in <xref target="cacerts"/></t>
  <t>issue #106, included additional text to elaborate more the registrar status handling in <xref target="vstatus"/> and <xref target="estatus"/></t>
  <t>issue #116, enhanced DoS description in <xref target="sec_cons-dos"/></t>
  <t>issue #120, included statement regarding pledge host header processing in <xref target="pledge_component"/></t>
  <t>issue #122, availability of product-serial-number information on registrar agent clarified in <xref target="tpvr"/></t>
  <t>issue #123, Clarified usage of alternative voucher formats in  <xref target="rvr_artifact"/></t>
  <t>issue #124, determination of pinned domain certificate done as in RFC 8995 included in <xref target="voucher_artifact"/></t>
  <t>issue #125, remove strength comparison of voucher assertions in <xref target="agt_prx"/> and <xref target="exchanges"/></t>
  <t>issue #130, aligned the usage of site and domain throughout the document</t>
  <t>changed naming of registrar certificate from LDevID(RegAgt) to Registrar-Agent EE certificate throughout the document</t>
  <t>change x5b to x5bag according to <xref target="RFC9360"/></t>
  <t>updated JSON examples -&gt; "signature": BASE64URL(JWS Signature)</t>
</list></t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the product-serial-number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between Registrar-Agent and pledge in the introduction <xref target="req-sol"/>, and <xref target="tpvr"/></t>
  <t>issue #83, enhanced <xref target="tper"/> and <xref target="pvr"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the Registrar-Agent in <xref target="tpvr"/></t>
  <t>issue #88, clarified, that the PVR in <xref target="tpvr"/> and PER in <xref target="tper"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR on registrar <xref target="obtain_cacerts"/></t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on Registrar-Agent</t>
  <t>issue #96: updated exchangesfig_uc2_3 to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in exchanges_uc2_3 as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="voucher"/></t>
  <t>issue #100: included negative example in <xref target="vstatus_data_example_error"/></t>
  <t>issue #101: included handling if <xref target="voucher"/> voucher telemetry information has not been received by the Registrar-Agent</t>
  <t>issue #102: relaxed requirements for CA certs provisioning in <xref target="cacerts"/></t>
  <t>issue #105: included negative example in <xref target="estatus_data_example_error"/></t>
  <t>issue #107: included example for certificate revocation in <xref target="estatus"/></t>
  <t>issue #108: renamed heading to Pledge-Status Request of <xref target="query"/></t>
  <t>issue #111: included pledge-status response processing for authenticated requests in <xref target="query"/></t>
  <t>issue #112: added "Example key word in pledge-status response in <xref target="stat_example_bootstrap"/></t>
  <t>issue #113: enhanced description of status reply for "factory-default" in  <xref target="query"/></t>
  <t>issue #114: Consideration of optional TLS usage in Privacy Considerations</t>
  <t>issue #115: Consideration of optional TLS usage in Privacy Considerations to protect potentially privacy related information in the bootstrapping like status information, etc.</t>
  <t>issue #116: Enhanced DoS description and mitigation options in security consideration section</t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the Registrar-Agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="query"/>, IANA considerations and section <xref target="pledge_component"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that Registrar-Agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="cacerts"/>; also added new required registrar endpoint (section <xref target="pvr"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="pvr"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="voucher"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a Pledge-Voucher-Request or an enrollment request in section <xref target="tpvr"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and Enroll-Responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the Registrar-Agent to support verification of POP of the registrars private key in section <xref target="pvr"/> and exchanges_uc2_3.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the Enroll-Response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section <xref target="tpvr"/>.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="pvr"/>.</t>
  <t>Note added in <xref target="pvr"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but Registrar-Agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_component"/> for better readability.</t>
  <t>Included registrar authorization check for Registrar-Agent during
TLS handshake  in section <xref target="pvr"/>. Also enhanced figure
<xref target="exchangesfig_uc2_all"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for Registrar-Agent
based on the agent-signed-data in section <xref target="pvr"/>. Also
enhanced figure <xref target="exchangesfig_uc2_all"/> with the authorization step
on Pledge-Voucher-Request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the Registrar-Agent have different
issuing CAs in <xref target="exchangesfig_uc2_all"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a Pledge-Voucher-Request
and an Pledge Enroll-Request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the Pledge in Responder Mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review, meanwhile moved to <xref target="I-D.ietf-anima-rfc8366bis"/> as well as in the security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="tpvr"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; Registrar-Agent to
better underline Registrar-Agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and Registrar-Agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the Pledge-Voucher-Request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between Registrar-Agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
Registrar-Agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to Registrar-Agent signing certificate using
SubjectKeyIdentifier in Registrar-Agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and Registrar-Agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges"/>.</t>
  <t>Details on trust relationship between Registrar-Agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the
draft already provides the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization>Siemens Schweiz AG</organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y9+X4bx7E/+j+eYkKdzzUZAxAX7Y6T0BQV60RbSNo++fn6
ikNgSE4EYJCZAWVG9nmW+yz3yW6tvU0PFpKSZVtKPgkJYnq6q6ura/lWVa/X
69R5PcoeJV8dHP79afI2r8+TV6NseJYl+SQ5yKppMRlmZfK8GGbJOn2p9+rg
+UYnPTkpswt5Dj/qDIvBJB3DUMMyPa17eVaf9tJJPk57J2X1Ju9Ny3Fv624n
LbP0UfJympVpnReTKkknw+R5OknPsnE2qTtvzx4luy+ePt9NvvtbZ5jWMOD2
5vadTlXDF1+no2ICn9TlLOvk05J+qurtzc2Hm9udanYyzqsKRj26nMK3nu4f
PfHHW/TyQVo/Sqp62JnmjzpJUheDR8lnl1n1GfwyKMbTdFDbD6rLcZmdVs4H
RVn7n8AUJ0Wdn+bZED6cFPStusztMOmsPi/KR50e0BsePOwnT8o8q+B7TMzD
Ojs9zSbm06KE9RzmON0q2f0bfKI7IR/yG7IM3vCyrove1+n5pHeQT86Se7iI
vL58lDyfTfLBOa1pCO/47MHW/Z2HvMbZpC7hG3/LynE6uYSPsnGaj5AoNI/+
Kc7jrxW/qw80ga/MyvxRcl7X0+rR7dtv377tO3++rSs76iffZeUkK83Sjs6L
cVrZT3+ppdU0j95bmsdVlrbfT55lqV3Y/igvav2IVrWXV4MiObwEKo7dZRzA
XOscfkurKkvum1V8l45GeZWNRtnELGXv696Dnc077lIO4bz+JytHwMXw8fSc
zsba53e2kjt3kgf3HyQP4WSs2ZWOYEp/HeBcaHky/ed9mkdaDqtiYhbxHD/K
Rsle8FfeJXhjNgIyJofFaf0WjlXyXVG+qeyrxoPycxQBf630q/1B6hJU6en8
+XZnUMDC8pNZ7RwJoO7j/F9vLHWrN4V+QpN5WhzBc9VsBBJicNmfjOwsMvhu
fwjf/SvsSPClnrJhARTMqirZH7zJylpHfTKrZ2X2NssdRqmzvw6q/mk66w8z
h3p/Ly7SuiKuE9qldX2eA287f/G4+3BwDiP/h7lcRidqvZEH+pOs7lxkk1mG
cuisLGZTEWN4LFCqJvzUO/rlr/hwH17xM34bhPjs5BF/rff27HYghTuTAk5A
nV/Q2AdP9u5u3982Pz7YlB/v3b+3bX/ckR/vb+7oF+7f3borPz64t7VpfzSf
PnyoPz7cuUdfeNp73Hduhn+9rXoXxWxwnpXeX2H1sFunveo/9bQ3qMrIo+Xp
4MHOvXsnefWok09OgyVtP3xwT37cubf9UGdxd1sndG/7zpauY/uuLvTB5h2z
jjub9/XH+w+37ZL0Cw83zWMPt8zyH27vPIjMlomfZvqn0hypXjae9bJ02ism
JwV8BOKs9fkhHt2LDI4+fmN/f7/3YHO7v7V7gL/DdcVXOf4hkT8kh9kA2Dh5
nF3kgyx5OoRbDq+jkh7Qywd/7slhmlQwzKzOkuIUBFk2wNsqHdFFyb8WIGDh
sEzO8kmWlRU9rPf01oPe5j36pMrwosCN4eF5viiQeWIoko3u0EtPUAbCreiu
47Nd+dR+MXlVFnApF6PkJZDhIs/efua8/3laDs5RW9imD5kn9PWvHj+xkhy+
n+LQcOD7enRuj0EkA/Vvb23t3IYHYQHpqLpdjfJhVvXgQ9mK2RTfBtslm4I6
U29KOlMvn/RK1Zl6YxDbju6zuYlSYDJN63NZZlqe4SWwprPCE41LADa2s8IP
bo+rs9tVmsIct8qHs+LOj//8z+Tl4PTB3f3LN5sH57P67sMHt9dc4q0NQDjD
f2Ga+MYEJBItF7SzYgpaU3p6mg/+wo/wxqOyhLIFvpAPJ9XQn6ShXHaRjQpQ
oPryTboJYbx8grSDUzsBJukNid/gUs3LDIXr6NKb3C4/i2zJo8H1xk8m8mRi
n3Qm+beiOBtlLQy2JrQbwmLXnFs7O+krVZGg8Ptt4JGdTfPvj7dvYnXyBCmk
pyibr0K/tKzzAQx5u8JzC7pAD0b3SHcof2Bd/UVWv4WL15yL6n0Ra2cb5PrO
w537y9IqvpJOr9dL9LR3OkfneZWA4TBD7Ru2/hRkSpVkk3O4pEkjr0AHT74q
ihqfmE5R10vBLBkXIKBEtP09uwSpdQoqFJB+gJe2GCpdvYM2cJBskp6MsuTE
GwtsnCEof3CRJ6dZCs/ih5MC6AcHZ3SZjPJxXgONZOPzCyT8CdA8A5U8TfjU
k2yszzMZKimzM1Lpyn7naZ1U02wAEhdkKIwHQn9yBivEb+cTEDFABbBDEhQV
o+S0LMZmVJAleZ2n+Hb8azcBdWJWwW/wBlkerMp8W8QOzp+//hbu1IxeJLME
SsOjwAkgOZOyGGX9zhNYJygqVXdV8w8nXxbDGR7USfYWiDucFjlu1ykNCRcO
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
DWa7gl3XYr+hMda04e5s3mnNY/w4zLmnPqO37J4/yyEYD0PhL9TOTREMjsN7
OUYSA9UCzgRKrriWmXM++sbMsSGxRq/gi+JN5g7tM0q/s2sjnLQrivmwA9EY
BnhdVbNs6BcGIQtgEjIsLUCBvYux3T7HajFhlg94Qk4p/5RQ31rCey50t4FP
bQXtzkGyLm3Yxm6WZQzbBgTo127Y/oNKM4u6L4t7d4trL3eCXGWtp8jdB6OV
nhGUj2+0FZ9R0UitboIIdpN8Jwnf1mbCijacfHc6o12vitFFxlKl6i5kW6ma
r0uu0/IM7n25nIYzQvV5RjYcJzeBtRjnAkTIhoKANoqQnrMYwUT8wAK8DL+w
t+FHmmq4teVZubx1OJzhUtP+QPbSr+L9Ka/w923Fbm3EDsVHZ8HeaLGZ2skC
vHouYW+6vNkbH6bxjY/TEN5SQ9iXm9cyfxtNBa7Zo+nf08WWLA6nrpoyPzvD
4v71wvyv+gOZsdfO+QtSvRRPXbVefEpTixdbXLmmbgeSBbmBQb+KIuPbXhsU
p5PLaKOWy0zmg20W3+TTYBpeTRlqW3xeFFXmZxJiTCuv2wvkOBltmnuI3/Op
sz5dyBrTZmrgR5zv58Bfp1HvSFhO5HdXKCcUVZHCNAuTYumF95IX8BwfZCS/
eaWc7V+myMyvphjOkd3sZTwON+dpaLFxWy+Nd7catwPPXp5gqRu5ZG4madPG
F+VI8a06NQj666djNuT9L5eOGexCMx9T92JuPqZ+6UbyMV/t27Z1K+RiRlby
kSZjxqml+HdljvfdM8Xb8k/ZmL/xbMzYpltB25KO6X37ummZy6dg4qTgcPz7
NXxKWUnkCRkMhyM4STzjWmb2pT3JNslshuq3OaZuyAWz77If7R9Zexv26LEa
6zbY59gMxesV/vZfzq+UNAb/436W3P4yWTN+tLXYX41HbM1KAnelpogp0gnd
S607se7RYKNhKron3jSX0VNj60myhw0bQfJVSJcUKmiCv/FtxUYWhiqIs5p6
xx2dtzSnycXda/jFzYENo7NuPiwwttuKpt/5GjFCfIPaZRm2VC1+69hxYa4D
HQONZIOZVPzibqudETpHRY0CmqDeRX01ZyZZDHFt7LQjfY4dfekoK2vtWSNA
uTDSJ8RvprSBcBjOBnXP+37gFJSN+J+725ss8V9ITyCvA2xbj4IvOnmtXmQa
d0RCx0ZIozPQaBfyBZoaV41M+uZfGVb1UHLZgziHVgO34wYZ9vmYE+VkeBpF
IE0mAxK/fZu+KWKzvfLGPQ0S7uzsgDRzKUcqHVdTz0rCqtGQ6gb2N2zBoqVl
pG4GiXKwGFo344vOxIR1JdUpGaeXZPmfpxewsEswk8pigoYYz8vxndP0DHkD
4nFgOi8Rn2ZY1wquY47fMRaPFVmqPsgaZQThlVd8VcGiQSwAiam8PnrSJzHZ
3nXa/vKewPNvC1BAQFRI/IBuuYpzU42EPbYRFeWKyGzK7CwtDVTQxxJWGjEj
O0qx7U6NUKQRYzpIavnHDG4Y7PrEvhasiHpsxPtVpmYeTkfBxDhX39NO7Dok
BGlj4Nx7ajyeTdSbQ8eczcNpBnJuQ6qi+mZJZUzw3LFKkMd4V4zi1twYtUTN
oh37s6fCplLctcsAbFAsk7cfuwStz0AvEbxoHQ5ZnJHv3f5r25vb273NB72t
7aPN7Uc79x/tPOxv79z9P5z5GqoRMNhkWJQ95oc797e21pzUdlUbXJXg59i1
jyuRe791pZL72nrNXyOlPG6IXjul/GPIKL9KQnnoqlqUWd4gH8wKnehU9vs8
khnecWzlX1mytj/tVZK16yska7cCD9ppb33mYeK1noJfKGO6pWhZm2P83a2G
B5zpsdCT/v6Lljk3GJMVmBUGEnVYmk9XCncLhJnxoPkqxvXdaaHj/Rd0p/l7
1PSm6dbO9abpl35Jb1pzIR+pMy1OLJVPyhrvzZkW2fBPvrTfuC8tsudWaIeu
tMiXP7gnrVJri0XXuagnVIHMlDOrxLHS1ul4uY7G5r5sL8O2QtlL1/Enli/T
Uf1+Ua+frS+FTYr5s79ohanEdQFGCkglf0z+67/S8iRHzeOyN06nJHOa2nvl
OO0+8512kT1fd6e/MVeuNFx2rINLUzzjIIuGZ9a1Gh380TUoOGZGYlzNfGm7
zA2aG/XkhCscX53rmotUqOsm3GcmD7sfu6DrxnvC/scyOQKbN5RrrNQkteuE
Wa9XvC58w/WK12W5BGEzMnqmJ7Z+nd3IaI2VqLfPdR87Vm03YV2JXlHc4Csc
/4UAJX3WMo4DlVbsg0qHQ7dBdisjuc4ueD17JI49R/axO6GK1lmor9rcds21
OfpjjOjdwIxlr4UVplxy0bqr0zJTCUXyEktxxRuAC1bVoIqFV+pi2htlF9nI
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
ADNuzffpt3nzZkPt1Xv4rh5106R03tx9u/+yU5r35FswvR+Fn2HqX4zRre23
yFt3c//lYfgy+DKwpLc1iJH3re9Pv7zdt+ez8WDcXZD5eiU9LD8P997gs/Bl
cusk6W0WdTv/IxK8UL+hBJtmVYJNKWjJ0cgHCf6vj6kb7Lo/JrZULvxjTP2a
SazYm7aAEwNDAIuJMfWeMvgTYuoD4NxJKabek6VRcxo6/eczkNikdk392xhL
JwTiYLwMM+QAyIKUkQRwNhmO9c5oDLL5fAYzamr7m1g5hG9GlD4oJPQt0lk+
SkQ3Fq9vzkTeWVKH2CQeAlZ6s0UlmBspzN3agPXsWt10BysKti0ijiIrIhO7
FS4tc/SmRdZo1t+J80iJ5QVpzSIv1kXrTm0C8g2Gom4Mt6Xri2AfYV/U7AJj
fn0xqB80eb2xccNj7L0r2M/osUcoPgJeAl3tiMBN7ABNGwcENPmtoJnqYkas
zZR4j3JfSdVlKJvSCPlDdUx5P8NUJNAq0xYeOqh3eJUaNIik3Gn99v1MKh8r
BjtZirGkwKOtE0BcDqCPeKJMYpkIYBn6AiAwFvd/PjtxHDaix2GBFI+XXmL1
Ritz2duqk6moBdu9MRhNxi21bRyslSqFE3kSwlz0/Y02nRB/3pMBb0kjQAIj
G9CdIcS+Jew2VtPzpyA3cl9dgOUjJPryZgnOowzYwGnF96DfASHO7kYr4MmR
2U92P4rjvxfFfz57R6MI489f7c8PV7a3bL5FL9puF9y/irvkUZbnX77efe58
HYaHb2/tu/tDVw7mn5/Pvkxd1z3cJRvvymqPFDI2poOn+PNDcv/1VvtqDr7o
DjncVuP4P3IdsQcf+EbYHPaPepHnP+MFvt9Rl7aDucDihhdYFDNvgp18t6FB
3qGA3Yf00jTOmsfyAmPVYX/cHKG4CclaqdCScTZvg8IXFrlYM99Posuzs6e8
z2d2uzBw9xf269pltcr4lcLN0nHX4R79vKzPEVYwK3d+5xcRsSwUPlota8uu
gfI18RFY+/WsVVVWLCrr11aUjabzOEHQUuHpd/qxMJc3n0ipr0ypUn7tRbyv
ikNb7uAHm5iXqc4r//ExaNvNfP2X39k2PmaE/cbzmunlHoh08dtVI6trmcA6
fzs7Ey8bt/WavryzCC/yTisCw29Wa4f1uHNWOK/LRsOk9ddTVnYSS0LSCl1Y
cY/Wpao1CmV9lZAcT9r9eV6srXf7BNySeiuH1zpb29tGvJmF/jzvE7PPas15
bhgjq7F30jUXV1VZgT1YlufHf6g711mTHTmVGozSfhpF++kygerlqeExN3xh
FSBZCb2bdhMrMGJxUvgtX1y2BFp98Zwv4qidA63gZTek8Z3CqOHRZo4wJfx2
5pZFDrYYa81iAzx6KZq1zGK9QXL5K9d1PufXnsvTZ9OYtJsCC+UorC7rnYKF
+9c+LIrfCo6wGjwVPjfhUuvSOquMRO8Xa/VoRVL42QVwMlOZTl4Wt9JJqVqX
9WPy6ZzpTvZQuUApbWnh7uKs5HPiuryhUNZGteg6QKv2M2HIRJlXfrSL6rxZ
/6+iIiqWfY6wARorpUfLneLysp/UpsMa6sKLPd63jDW/SLARF4hEcrqeNk4V
e8Sf3gR+ifujt4GXfSp6TG29Fa3QShdcWiml7zrK9SzrtIKVe3knViTnkheS
4w0YeI1gOz29CZdljZMgG9L6tGO1MadiTsuoU6HcpKuIFYtmTb+TVcTLEHK1
1b3N60rnfei4eG39MKSFzqtVaKnehiGxnPn7tU+vWA/1/0ULhK7Tl4u0ma5f
L1J7t1quov1FecgLezn3Vuskq7TK/8otA9Zzg1fR2SyRuSm/l8oTc7VkujM6
Jf5jLlRAaqznyWSGt6ajG59EMETsYauVoicdK89OK+8eqSfWEZCXcKZzKZrq
FcVlb5+GSUUv541xbNY5rmw68mrIvHQyToEvg9XHzuqfUqrUJ8DrH7y5XP1n
DTAq3ZNpV4jyYCU5S1KsCl6TGlbYPCMjr7PuNm6XzhrLALvzFa9hz1mK9hFO
GnnLgjn8Gphs3dBxHJkWP13/xoS2vATgdDdEyuc6uKhrnvBG0vOUKmVmGJhp
QSala8FyqthtirZPilZvnMcZ1kHG9FPeqpT1pWEdYjZhyjg1t+lZt/vGR1BX
wMA2WyilAn73j39g1dNbLJa+zIsxYL3SXcr6KmJ7UIOG1j/27o1PlGvR9pum
SetfI6Sp2tzCbjBl6f5EA5Cz48+yjtFp3t9xhprDcWGpm4RqBCQdTKqwZEWt
Z9Y85pIiWB85gcKbLvZUgmf/HQP6PUDEK9i7GLsSYTVPbCLwvwG0wj5+9diP
/kGRJPwSf4xdLEDpdUEJFWWzz84kNBfDni41nLX9kjbEduPi3yofXNOGZfRw
pvEXsdX+Ldt/ivuouakUaW18nId2iafX7isHdVgWNdpERRXwvIz7nimo/K9f
N/Pm1zi2sVTJe6N17+5CpFte8/r333nD5K/w1cNXx33h9XpdSiu0VSDvqFyP
Fn1VX3S7uuir30qDVCZEq7avsy6zCavuWau8zNrq5ovDqtjHq4WF8emeJkTj
7MS8W/V5X9F5G7FTaqGXlyOlb82rlf6D4jL0mIqy96xissNcCSwrncBoGd8B
HF2tYeMYWs7qc/PysXn12CcVCdb6DZzDvzZ0FxXnKly97tmrogxNVneVN6DP
OgHmEJyrcKxUk7BuarTAN3bXBvVDXwFOI68fzSu04xLnbMqwRpT43DGC38VJ
sWyOFjh4Rw24Xtlz77fG4xvWxne356yCtVP0JD5Htnsof9L4iO26XKxvY6/3
AMDwpG8AkIa6Sw0tbzDBOjWFCHbQoKOxR9XIHCnYKSxYm2Fwd0frXDM/CNEp
LQ2edW3DZQ/RN0h4OXz6BDdb8C+Qm/Ze87AzOtAD/v6V/pnt+SvWhM+7zxZc
zKwybamXcI2FI7m81cwGffDlK337bb6XeaOGrAl2fmhKSWfP16sE5/DGvv6K
n6JUwy7VPsGl/v57XPm0tFZUo/QItuiLSKshFxuBJg5MPdXZ+UOc65ldvCg+
/sc/6NDyCmsYeQg6PLZnrIcV9s8I8zLFMK1SKOAfTMjZR1/zIVF6y55gqU0x
fRUTSiejExZpeqFtHz6+sbaZ5w03+0PM/vCpJqKswQ7nwBeKXpAl0Y+KYPLc
Sb3Iyh8z1xatB45D0Qirn/668ROPdd3hTWAyR7+onkQbltCJd3N1z/i0EGn4
K9bqDhkB0a1qvCWXeb8dP+uBQb95T8M3GhWNlXdtoEya61UqCD6WMz9Sgs26
EmxRJXhHTSIwL4s5wesz/PshSxW95Xvw23sVlrOO9x9TrIH1gZKJnuIDcmFe
XdF7DJ44L2EbXiUrDu058zxx284KNijv1TKtMDJCoJow8QwBbAHFunYlnFOy
XIXs70gn9uc8feHTZem1lHmS1WZNe7I6brkrGeM2LE3PBJ76J4DeyxD1DDUu
BdBovquTBpmgbcLpH9MY+wwwPZKmtEMG8ypdjr+BZtU+g7SjH9+RSn+62uwL
XqWbdMEokrdBzt9egQHl8tt0Dpt0vioaDNHuaX7UuFWG8m3D7APBXaqAy+XP
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
IWK6SgMA

-->

</rfc>

