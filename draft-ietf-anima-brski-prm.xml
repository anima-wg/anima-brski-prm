<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. 
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx status code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error status code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx status code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is only a necessary precondition if the MASA needs to verify that the domain of the Registrar is a-priori authorized to enroll a particular pledge, or a particular type of pledge. 
In such case, how the MASA will obtain the domain CA certificate is out of scope of this document. 
In other cases, a MASA may allow the pledge to enroll into an anonymous and/or yet-unknown domain and then the a-priori possession of the domain CA certificate is not needed.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 Not Found status code to the registrar-agent.
HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used if the Content-Type indicated by the Accept header is unknown or unsupported.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code 406 Not Acceptable as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature or another security check fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is in an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the pledge detects errors in the encoding of the payload.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "voucher-success" / 
      "voucher-error" / 
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error", 
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
This document specifies the status values in the context of the bootstrapping process and credential application. 
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize the bootstrapped credential information in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format. 
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y9+1obR9Yv/L+uojfZz2NIkAw+JebNHDDICR4bY4Fx4sns
vI3UQBtJrelugYnj91q+a/mubK9TVa2qrhbCcd7J7L15ZmKQuuu4atU6/la3
2+3UeT3OtpIng8O/7SVXeX2eHIyz0VmW5NNkkFWzYjrKyuRFMcqSVXqoezB4
sdZJT07K7FLew486o2I4TSfQ1KhMT+tuntWn3XSaT9LuSVld5N1ZOeluPOyk
ZZZuJS9nWZnWeTGtknQ6Sl6k0/Qsm2TTunN1tpVs7++92E7efNcZpTU0eG/j
3r1OVcODP6fjYgqf1OU86+Szkn6r6nsbG4837nWGab2VVPWoM8u3OklSF8Ot
5M51Vt2BP4bFZJYOa/dBdT0ps9NKfVCUtf8JdDAt6vw0z0bw4bSgp+oyd82k
8/q8KLc6XVgtePGwlzwt86yC53gpDuvs9DSb2k+LEmZ3mONMq2T7O/jErKN8
yD1kGfTwsq6L7vfp+bQ7yKdnySOcRF5fbyUv5tN8eE5zGkEfd77Z/Pr+Y57j
fFqX8MR3WTlJp9fwUTZJ8zEuCo2jd4rj+GvFffVgTeCReZlvJed1Pau27t69
urrqqa/vmpkd9ZI3WTnNSju1o/Niklbu03/V1GoaR/eKxvEpU+v3kudZ6ibW
H+dFbT6iWe3k1bBIDq9hFSd6GgMYa53DX2lVZcnXdhZv0vE4r7LxOJvaqex8
3/3m/sYDPZVDOG2/ZOUY6Bo+np0TZa989WAzefAg+ebrb5LHQNcrbqZjGNJf
hzgWmp4M/0WPxpGWo6qY2km8wI+ycbITfMu7BD1mY1jG5LA4ra/gRCZvivKi
cl1NhuVXeID/WplHe8NUL6hZT/X13c6wgInlJ/Maj4RdzuqiSHbzdxeu9Qw+
6o3go7/CSsNL1XwMh3t43ZuOO5fZdA5vwcNnZTGf0W/ERRJ+9wP98VccXA8m
8xEfBKY1P9nix7pXZ3cDrtOZFkAzdX6Z4agGT3fuPf7mkfz68N43G/Lro68f
3XO/3pdfv964bx74+uHmQ/n1m40H5tNv7j8yjX3zaNN++vVj09g3jx/Ta3vd
3Z5iiu+uqu5lMR+eZ6X37TTDJTntVr/Us+6wKiOvlqdD7PUkr7Y6+fQ0mN2j
ew82zYjvPbSj2HS/3neDf7Dxtfz6eNMO/vG9+99EuuUFTamfvX6/3/1m415v
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
onnPqs/wSCVQ3GwtItEFNMinv3lKWpVBp7A4WV7JvnyEne7RPzwSZrNxH/gJ
cyO6UXm02Cxa3VpuUSM4SvtaRAQ+go0jPc7LqeoyTU5AChGZnGjVvoRrZrpH
1XKazPF8jq/x6WAfNWVhRyJkmZXBj3gJe53t4bAQbUffVo0Lwchr7l0jnRG1
u70xr7Bw7cTEwfYaXep5XTk1wtGxPy53jxglkF/pKpqMnXAlOPuXCt1daFRy
IqcWG5q0ctR2AZrpqpauzkk0sFxFC3kz69QJboGk8z2c1XXaOnqaZ96tcjQn
KGLpMtdRmi+urFxsI2A8wxpYqzBU4K1ki1BdE+edFSiTk3oxNbzA01n4hFv5
VZRqFHHndCBh3nB2p2TwJAtzsnq4vb9m5bRW1Y6apEXz28V5y2afjtMzWA9z
LcLdBouVVqLJwukgGoc/z/Mz1JX4RrH3DXB95kBW7U8Ctd+O0rKbZXhvIry3
sw0CZFmzlkbDEp3Eu8Smiv3aSwwkYOyaFxdnjJcLrgOKIJdoG6QNG+cXWeN+
QHWgqrN05FgstgDHVARBo+O7K3P5G0VbW4iscZWJA3kC+5VRWtzSCmNSLNRw
JbGBiAieILNtsFBvfZGg4UbJRiRJjQrd86zMujBPksagf2gbKCU/vearhGRE
GZG+nQo0zoCOzJc99I43ewetKkcgiObTYlycXbMMh0ZMuMah75UXrw+PVtb5
32T/Jf0+6L96vTfo7+Lvh99vP39uf+nIE4ffv3z9fNf95t7cefniRX9/l1+G
TxPvo87Ki+0fV9ZpZ1ZeHhztvdzffr7SZFkojrLiRtcmzAvVjrTqeKbDJzsH
////t/kAVvl/oIdlc/MxLDP/8c3m1w/gD+RO3BtxAv4Tlv66g2cEtgGPI1DA
MJ2BHDmuiH9U5yjyAslneIv/HVfmH1vJtyfD2eaDP8sHOGHvQ7Nm3oe0Zs1P
Gi/zIkY+inRjV9P7PFhpf7zbP3p/m3VXH4a2cd8IWTv6abHFreN5JF6w2bvH
F8hpYSU2eJ01DGt7tLQ+vt7qdJYwbG51tpJd2Xvi4/yxov9heT2rizM4tOdi
sDop5tORkevgUk2wD7yO+/01fQEkq81LAfnQ893+sf/pGh4pnJyRVFAEqCpY
s5GQqzVB1edlMT9DOXOUnyFtNdkIGpngc56JcDmW0Uu5L8neXOaXOCA8s/Ji
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
mjFVi1bLCArilzqAvXDLtIo9yBat6UWjM+jJvluzzQ08JDdKspz8tLmxeJ0M
XYShREfnWSi838KubTmTioaqmyGOtKcK3Mi3dXvG7v5nMXbbVfw3MW3b8S5n
yHaPS7CR0MqicJ7kd4oighOKa7ow5HnBd4ksjbO2ZousrQssBW+MrigpFkj0
Dk0onn0nfjRWkpYoiYkXfhVtiayUUqnRrwvvlw+6VWGLVKeLwPStEkNyH8mI
JJmg0OhEfTQe5CckwxhGncK1Or5oFkmfIMI4WmZM+p479ATl3ALMtzwIPGfE
muSXA1fnVCy5TfD10H7LLMopVv4cmqm6sbE10OORrCakkZi2Iy2p7Wk0sCrG
SSmhUnDm+RpTTlVMMlcspopmq7ZnpHLY0cKUU+v5VJXsG9mmoomb0kvOqBM6
eP1LjVMk73qF3OtCB6AbgPkm+Kg1pZvrUNSRSi7jczFm3wTub0ram5xTOf8U
J2ATPk0QEyaG3oX/H+42yt0rK386ZCR1q2AZylc8oteW9PmbFk9yQiO7evOW
wngwyT5KHbG+dHurFpED2CSelYsM1ozrX2FZYx/R1tRQs+Ub7W2P40fFWxMS
DrJrs2ht6n8gN/FuQLs1h6eQAJ4qEXymjoXR6QhUYJplLEmE1aKlKwOoqUsV
p12Cw8wVVha2IIbzlCTyfDgfp6U165HkrD5njc8kM9MM4EiRcQiNdOvJueRp
0yBJxStOrDwZXYabweqlF9Y8sJsKGT/1wCiYpoyOc8HInAiJFlE7p8X0elIw
6spdmNR1VneNkiujEhYttl+zVE07c+sk0HaA20JJHn4Kc/f2uJOO/f3KOZRL
Y02mn4wv+ZsxJW89zySJ5pFGEFAUbuTfzbn9SikY/7gBNuXvB4gtS3YeW0In
BIqLArZ8ElSMyfGd3Aampw3WbiFKn/5oaVS+T5vTp0D3yUersPprsadutRAL
8f30S0vj+emX4vh9ycKX7BeK4NWm88YveCmC73fTS/zP6sAt6BLDi8ylBRFw
2bfjSICteE60ME3kPy8lfhHW36fPM3ipGwL13YaI+59GxPYLjzpiYH7Rl9rR
S29YiNWBDHjJlxagrjm2pmEBm/v0GZlNF+56hee3zD59670UwZ/7HMNrxzK4
F2IZzJQ6t0D7CtyPvgInYAKLoboallGbyoq2/aCSRrMeD0Xp2FrHtfFJeyl/
+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
6BOwRhigvkmOgT7BTd6Eg2/iZsPF/nWy2rIka6w78v2mI96cb7YRfakDZysY
6oRteBz+RbUyyFpkwR9x4umsElci3UkUJ6QjiUzaH7mgm7NavEzb2N/wnIlI
2CjOhTLfxtmIh8bR5iK9m8teh0DyIsjBpbVAWxdNlluwbiiGXiUx3UbKrbgY
unW+HMdyRXdQoSPYUnKW6XQNOE9Wm453DLxm+2BP0gR4+cSugKjIcBS9uqe8
ELiA+31OACCKeHTvwaZUBbCZAUwqG5wT99Tg6glIQI2AxcnZHAhlTHs9KlhZ
IxscD90E+nnZctzqg42vFQHeX0B/xr+/JomZQ/RU4bHnUM7OG4y4w+tznF8I
4ng6vZDbE8QrSli+zLMrgp4AWsEwzXxIQXFPSpR1+r1kJy1nGOADbOZldQHf
7ABznIIkKWix32fTUZlfwAugPJ+nc+u9yzH8dzavze4N51UlmjLuFqdHc9Yy
UN4pGu2AG5HDlYxRMFSSNPrVRQFc8d2FFX5Qs8yymQzelaSdkJ+Q8xpmRUVF
NTsdRDU+Af0fVsg6GBHanH/l9KLKVnioBDd1TBWjm7D6Xz++B7tzCJ/BOX8C
zVbjtDondzHL/yYRXgypYSZSl9S2VSLiA6sJBtjga0kDHS33ACEM16VEGKkS
7lpTPkglJoNs8Z3CfCAkgUMN/LBicpH+5P9gEHp/K7nz0x00WqpC1DOcFwbg
wKIkwUt/6gQAEuQVXsmun83e/jCYPP/h7eXozX7x9oe9ejg5fj96c/zLaGfz
ajjZeDSaPN788d75eJjvPYLnz4f398fD6WB2cu/BT538Zf7s/O294zk//fhB
+mZzNvr+In++8+yXtz88m/345qo+mR7XP06Or/feFfmL3f71i19ebe6/Gz54
ebhX7U0e/tS5PJnsj/Hb/TePd07uv758PR39c3+nvjh6Xdx/Ne6Xx29mG29/
2Xi8l1/lP95/Nv7xh8H47c7m5QmMae/d3tWLd3s/deoXu8P6xdGz1y92Xz3a
3z17tH/04xz+/8ubHPt5On375uHG8x+eXJ/cfzt7+93xBf9+Pjt5M97IDjev
374Z/dSZDe8Prn+Edfjx3vH1aAfav9h8dvh6byO92N99dTyevd14ev/w9bMn
bzfG3786Pn+7/8uz/MfxbP/Vm8ffv9rYfz/Y3P+ps7+/O9559Xpz9+j14Djr
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
6ENgsG1iVzFcGcIM8ezPS7MjJJldZLz0BghfC8ZFmB7Tg5CwtwzGN/RzS/fv
2C4+Mse7c4wQwm+q8z0EjMtM7y6wtzIeIhIt7vfJJMp8zTOCyeeD9LdBgKek
bGRHZartDm5ndRRmIccFpJnFAOL63VQ7STElxJhMB+NFNvGt6T623QObMAhU
cHfIIvfbMsj+TcfcMTxxMGrF3iTFgOmDkFs2Kyw3zqEYb7i1e+H67gXuo8cA
pxgjjFiJcJEupCRY0ZvQDa+CDTVJgSPTIB15NEg12MtdwE2NaeZeSGYCsAeT
wW2Hc+XW95H2Js1bBnnWZ6ZjjWUxSAPo8Q6EozvVEG7uxDEIfu+45uc13nGY
8Z7wyvRxlu+fMC/2TDh+YOz3U55VkVYspelt/XzPZ+iR2KT5+DC1bx+9knW9
crdHW/SZ1DkEAoWnEsIyA/0N3cJ5CTR+e19om/slwjSlRpaUNkJbVOIIIu4I
WnRMjK6iuok9pfSQxY/3ujd3bt+8Q/SEBz8s9fXDc2eVbpMvH9b3T8PC1H7r
8w+f/U/ay4N1t53zx97YWPx20Pvl3eRl0fWfeLiZLtL5MzjlPrR+9Y+b1BwM
PlVP88e/Lx6T3Xhu6+PmPtL/urwus8kK1jm6JifYpAQ/zT+rIo3X92h+L334
zas0L9OP8TpZzSl/f979+vXD2CkXyS630tAW2VMOkm4ooMxw8zh13kYlZj+t
VunFZTSUO47pBrjpapWr/aT3y/f/qRbw/6spQUZPOn8/fnU1+Wkt6Sf08efm
yVm8eZfUO9Oagq6vjyufToUt1f4b9eHzveCvP/3+px/q9v3wc/1FtZNq12wm
/bRa7+J1s/+5PWj28fu52POjv+oHo36cc7TXDbl4w5/Mzl4XnaVtcSqHTwnl
Zll1Q51vrzJsbr/FmPzwvdvK/t+mff/VlC98vE36/hsp3z/etUnfIo8mURUN
9Gra8XS0gZ46GCsRetsXIuqnXDsG/m+9YLAN4iBCfPWeEJF5Mvjj3eZlvMxW
06Mi9M+J0VtEPiWCxQvIo/6oO514MV5Hpv7gaQ570MWX1J7ePtGbl/1DLG8P
jxP0qE0oGUlHLGJb4LdOMZ2IYtoZU3uKGa86UkAaGRAd16kQe2oVIgEOW57Q
op1bVHZk3s7dST/ieubHpSPlglHSaRJJ3ad0TWRXc2GaB5lPd+AyMu6AvHay
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
BwKFeEeP1u2Tu34kMJuR3FIW4H5qFx6QfSdMMQK+EDpEblkfxMDchqSPKlpv
3AEd1jHf3/l0eMtguqSsvfS2QhZPMa908LiHwGY8WMK3LacKdXc/E54c52CK
tJrbCShi5XvEGSjQ/P7Aj31iqcOE7BR4gsj/gpGEzXpzWH8E1vZCGTBovIk0
e18oX6f7U5sJ6MCJEIhQgUc5HwtzwNyi6gil6j4fpqYeJSUjLb2A+gn8RRHK
u9+bY36Yo7cO+r065pff4OdnN3C162N+tLujuw0R1epjfPJQb/12eb31eyov
t34X2+iOZvXtrd8PtGvv39367UeU87Aj/bz1G6FEbf0WPJOz0rLcCTFm0rjn
reDxV8co0JabZjP4ja92nuYHMGPmqp2m5IFm759vBQe+vN4M/nor+Ff7Rjk0
TDTs07HDHuzqgdjh6iCWmFfzrx3pY3TgIO+V8cKrKB7ddx41hyUGmzwcIRvk
7dOs/Iw5KLTZxNJ5Xjw96umNpxcv4uhVqcYWrhZ1o0nqijK6GXfu9QDeGJlu
4MWIJHPPgPKX3XV6V7ykFqS/tl9ByXyBbw8wF32v2eXJgNTj+eXuS8SjfpQ3
G7WBiupoo5EO+DJ6EXcWxdVDtIhcJqyVCNJ7316t03z1Et2lziy38vrIH526
9EyB2bZIA97gnY8ze78bB2E3xDiyAhLFEkaSF9wrrA7mqj6Ws+hvxjn97C0l
4lHxiLkZjAtL+KbVwWy/vRVcU1vBmS/ThbvMjZl9+0TIOi73D1N4ALxN2+3F
Mrtnxu1RDIsdm1h+tFzt+CTUEAfHKXTmWCsYWGMvXDj2iPZ/GN2e529fwMVL
tUNjKQs2YZOVFllexhbealY4DHE4Tvn9YSTMeoeVOi7r3NDe3rHIhhfHZS1J
DP6LP+ybY76lA5P72N5+CfQ+HTnq076SP3eEgXjdt+3W7MI+LuwWLLE+wqCO
LPi28hxO2l4dpLg+RlEfalrjZ84mmQdEAB4yzy3Sbxy0ovNMF0et/sWDVuSN
F0etLg9aTdAGDqtanFAJKHaFUlwfjJfpaAzbtfrg0UPXjjrizj0mhriRC8uI
tYyFpdAi6Wzj+XaQ6CGtARzj0iv5ZHrA1K39or8KjO1ThNG15mlQzPnR2ssy
786kZYlF9hJNnMdk8JuBOZhHy+wp4c4XaMRDqGcvblF0oFL7XGs8h+YI2Bp2
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
a6GiiR+FKlGoVOFZDxVNsmY7W5KVb/7nVcRT8X1Jjk0So/3WTz8amgplvE1z
qWa+bohq9mWO961PvVMxp33yCROo8U0SreHzbxf2vA6E7ZfVzF4Y73K2JXr+
YUOkdLpZf9BuLuhrPXOvc9loL32yprDo/eprXdHYVNPmt3Lz38iRXRLYM314
M3GgmvXmmL2RhlAk+5WZQBdexrF6NeWstiC4P10P4iVrxmtafJ0Vp3wyXnRu
YNzyJSL1lNNrAtipxn1dRHGzvigVOldFFunbfhQ8EcFsEPzntwbxGzmydinx
VJ9RvahdgiTvbwvAt1gDNPz4flQrxzouXhKF+uH0vYsKpifLpOvDP8XTJj/Y
+khtOsCruAbV9u0NH6DYVWEg4mn2xoxhGNXIBxdLGvWf/+OUz23jSR1VMQ5f
ZySoD7WDPxOAq02J9d/qMqVU/PT7b+m8f+KPj3974v6QXtG8spatwMVa29QB
7E3dU9Nx1YRz5elTdIE9rc/NGKzK8nnZisXT6ODrO3Uz+uVS3FVPCYoahqTW
T8u6liYo5Icn/6EF2BOrI2pJhbMToF5G/vpzG4I3m9V0Hm9nr0OJWiGsrUBZ
y6f4ZbWu+WdxUJNLJp7NP9PHivhwAVcq21xbhGKXjRmo/NpmdvU7asX6cgmZ
uM38MuP2FdBTq9u8WExtOKH1ZUHclgO1bO6r294vmFXtPluoIFXeWNUaP1nL
JptXp/l4bW5oy6XYPD21+8v7H3v47+3P566d4aIJaXUqPK2n/owgGzDm7YdC
5eWuynh/UjH5qyac69fXopxydps32vQrtaVhEd+Iyw3yXWh8Nd8Xe0zqd9Lk
UlOvq5UrAHu4v6vx+PzJ1gzahnR+/fla4FzskzhHvD/lAqeY/lV6r1lCfw2+
V8treMCZ376JSP+2aZxShU2a6Nv24FdQsjTebbnd98YFlquIS4HhRAy/0dw/
nWSuF6aUq6p1sfnVYqpaRGvWnJTV1Gvhl9sDFPhT2e96+0OTHpxv1HKw2lhx
XjbCA8gRz127yDG96vNFVCUh0dhnE1owvsuNygS2w/5qw8IFbqhp+HhBheeb
xvoJDGnclgjiV6D4xlPPs9k0oX3Zme3WRKjJO19SpsvnfKyzYetT8fWTnm/n
sPWD9zXH+qlO7ZSUiadh+rnOPF4u188v1z/r5YBNk0A50bJzLkWF94vi8md3
OcV86tEHKku9vPheXQ9bIQ/YikqgXRCmv328+BJn90D5s2UpeV1AMG7XqkB4
qxhJ4l2Xx2gCB2b8b0pUvcbtMzVv20XBpy0gso1z/C+NQxs71H632gpbGfbx
cjn2HOuu2V6QYXA27+VsvaTwvbnsap3MOLXs4rm1082X6fxlnj7jo2iJCkhf
70bR/uOrTN/Xc0hW8X9zCpUH0/JISwdiChBVEU9Pi1bnTX76x06N4HWy/tQn
1YGzlxObXDZZzDY9rzaEwJeJnKiC4a9W9uGNyzcNoqlYr9KiakJcAKbaJ9lg
7ylnehr9Vzr4EipPXto47wldGmD55f3s4+ePNVekbQMluIIq706DOU+eW89s
MkJXuf/WgAbu07nxKhdObwEPzoAg9L/qExdqDz/+0qJFbQtthr7pW4tOyxkV
w4lhDle+dZrNBjovlugvyrXXuX+VmacU+XZ2mlg1LBdL9x/f+0Q0Zss3trbQ
MgTl6aBR1VoPAmcyrzPaajtAs/JKq2j7RkW3m/Pa5qEhtB8BqnFVzS9lyeYy
E3GmjFfxnXItJ6dQk6okbF3T/fa2R4l40i+6IgAvqzm6sHpO6hXldbM5ZK2s
+LSXZDqfba5XNuKEXjatwf31ykYyq6EX47KpzuysmaN6kZk2jqwKZS4fT/sg
2l0XtJvkOjV3kQ/CC1RKMG6FQqqGsX77mVGc5/iXkxHT2Jynq66K1Lbi2is2
XxkBLUOftkmfTIUWPDG5++8CmZLuV3taFMBfqCg1RZtZoVavaD2xefqZn85S
lRK6+kQb89SInzf+tGO2a/b0qPhL/noWdc3y/nZ2Yqr0m+Z5zS7Jk30SIp0W
Lj++Cj7LuGwSQUqjNo9o9qU1zkW49J7gKy7Q6WWNXpSUOu1fwzxutpebkWta
12xgOy8Hqrz4eprNqeWURD+pvhbb2hXSM5KStdTDgCd82uCr758e7t+k6/U6
+Any6qyR+u53JuJEwUn4LZMVjP2UvG2Yfay27sw3zWYKZcSrol07rj9xzbwu
k55XgbTxi3OUqaP1GcI3JNJIcdRaT9nRtTOp7547Xlcsw0AW7UA32PxLnZ44
iUpFY2omcd4Sf3rxx+84gEq7NLmWswNcwwbhjtpw1iZOC7XC3GxpVuu+Cljv
62Voalu9yvDx+qmv8PjKWmbFeWPWKQmgJq4eRcWfL7/R6IuT2rqSfDUBbTD8
jb3WF+NNM62A9dM5ACjVdRGJLiNCC0qbr0PP94BGyZWvNEq71PDL1fmFejmQ
diE0Br5qFndUku/Ez3cr5ROX5tH6x+aV7mkEXzE7jX276Xj1vLnMoNUI0560
rQkyHKR+w6yZ8Podr+Hmq9g3VWmMlg4ks3p7VC0RaaXrsgklyZZ1WwuPcjRq
sw7xu9X2NLdElOolsJMbEnevH7k+B+d6Zi8hrYqbpTvVNXzaqlf69JO8OmeM
rkPRP7O8lmn+vzDuwb9i061F10znL9v0K4v+H++9C4KNSLBW32iXQvGSt2jT
m81LThuua6BNVoh6RAintK2gCeT/B6W5gN9qVAIA

-->

</rfc>

