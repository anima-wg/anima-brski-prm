<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-10" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 130?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 138?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of the BRSKI registrar in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer site/domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer site/domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer site/domain does not offer enough physical security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication.
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.</t>

<t>Note that the Join Proxy is not shown in the figure, having been replaced by the Registrar Agent.
The Join Proxy may still be present, and there <bcp14>MAY</bcp14> be some situations in which the Join Proxy can be used by the Registrar-Agent to connect to the Registrar.
For example, the Registrar-Agent application on a smartphone often can connect to local wifi without giving up their LTE connection <xref target="androidnsd"/>, but only can make link-local connections.</t>

<t>The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="456" viewBox="0 0 456 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,416" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,416" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,416 L 424,416" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">PRM</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="336" y="404">CA)</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="448" y="420">.</text>
<text x="288" y="436">.........................................</text>
<text x="236" y="452">&quot;Domain&quot;</text>
<text x="316" y="452">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  PRM   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI CA)         |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols (including HTTPS) can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a store and forward communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges.
It can then perform a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar EE certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that this registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a different assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
"Agent-proximity" is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the registrar via the TLS handshake and pins that public key as the "proximity-registrar-cert" into the voucher request.
This allows the MASA to verify the proximity of the pledge and registrar, facilitating a decision to assign the pledge to that domain owner.
In BRSKI, the TLS connection is considered provisional until the pledge receives the voucher.</t>

<t>In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and must take the Registrar-Agent LDevID provisionally.
The registrar-agent has included its LDevID, a certificate signed by the domain owner, into the PVR trigger message.
The registrar-agent identity is therefore included into the Pledge Voucher Request (PVR).</t>

<t>Akin to the BRSKI case, the pledge has provided proximity evidence to the MASA.
But additionally, this allows the Registrar to be sure that the PVR collected by the Registrar-Agent was in fact collected by the Registrar-Agent to which the Registrar is connected to.</t>

<t>In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information once the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.</t>

<t>The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
The details of doing TLS validation are <xref target="pledgehttps"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar - Returns enrollment-response</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its EE (RegAgt) certificate.
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its EE certificate when establishing a TLS session with the domain registrar for TLS client authentication.
The EE (RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete EE (RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the EE (RegAgt) certificate allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the EE (RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the EE (RegAgt) certificate, the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>EE (RegAgt) certificate and corresponding private key: own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar EE certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> section 4 with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
Note that <xref target="RFC6762"/> Section 9 provides support for conflict resolution in situations when an mDNS responder receives a mDNS response with inconsistent rdata.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.
Note that <xref target="RFC8990"/> does not support conflict resolution as mDNS, which may be a limitation for its application.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the private key corresponding to the EE (RegAgt) certificate, as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the EE (RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA <bcp14>MAY</bcp14> issue the assertion "agent-proximity" as follows:
The MASA verifies the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided EE (RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
The assertion of "agent-proximity" is similar to the proximity assertion by the MASA when using BRSKI.
Note that the different assertions do not provide a metric of strength as the security properties are not comparable.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> handle/trusts pledge's IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication.
The distribution of IDevID CA certificates to the registrar-agent is out of scope of this document and may be done by a manual configuration.</t>
      <t>possesses own credentials (EE (RegAgt) certificate and corresponding private key) for the registrar domain (site).
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar EE credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to provide privacy for the interaction between the registrar-agent and the pledge, see <xref target="pledgehttps"/>.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the EE (RegAgt) certificate and the domain trust has not been established at this point of the communication.
Verification <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the EE (RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification.</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own credentials (EE (RegAgt) certificate and corresponding private key) of the site domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar EE credentials of the site domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent EE credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar based on the TLS client authentication.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the private key corresponding to the EE (RegAgt) certificate indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the EE (RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the EE (RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the EE (RegAgt) certificate if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: EE (RegAgt) certificate or the EE (RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>This document uses the JSON-in-JWS format throughout the definition of exchanges and in the examples.
Nevertheless, alternative encodings of the voucher as used in BRSKI <xref target="RFC8995"/> with JSON-in-CMS or CBOR-in-COSE_Sign <xref target="RFC8152"/> for constraint environments are possible as well.
The assumption is that a pledge typically supports a single encoding variant and creates the PVR in the supported format.
To ensure that the pledge is able to process the voucher, the registrar <bcp14>MUST</bcp14> use the media type for Accept header in the RVR based on the media type used for the PVR.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The EE (RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding EE (RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the EE (RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="exchanges_uc2_2_vc"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The pinned-domain certificate to be put into the voucher is determined by the MASA as described in section 5.5 of <xref target="RFC8995"/>.
The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar EE credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar EE credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar EE certificate as well as potential subordinate CA certificates up to (but not including) the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>(For many installations, with a single registrar credential, the registrar credential is what is pinned)</t>

<t>In <xref target="RFC8995"/>, the Registrar proved possession of the it's credential when the TLS session was setup.
While the pledge could not, at the time, validate the certificate truly belonged the registrar, it did validate that the certificate it was provided was able to authenticate the TLS connection.</t>

<t>In the BRSKI-PRM mode, with the Registrar agent mediating all communication, the Pledge has not as yet been able to witness that the intended Registrar really does possess the relevant private key.
This second signature provides for the same level of assurance to the pledge, and that it matches the public key that the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).</t>

<t>The registrar <bcp14>MUST</bcp14> use the same registrar EE credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This has some operational implications when the registrar may be part of a scalable framework as described in <xref section="1.3.1" sectionFormat="comma" target="I-D.richardson-anima-registrar-considerations"/>.</t>

<t>The second signature <bcp14>MUST</bcp14> either be done with the private key associated with the registrar EE certificate provided to the Registrar-Agent, or the use of a certificate chain is necessary.
This ensures that the same registrar EE certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".</t>

<t><xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information.
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge.
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the EE (RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5bag" (see definition in <xref target="RFC9360"/>) in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5bag": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher and LDevID certificate and optionally IDevID CA certificates.
The IDevID CA certificate is necessary, when the connection between the Registrar-agent and the pledge is established using TLS to enable the registrar-agent to validate the pledges' IDevID certificate during the TLS handshake as described in <xref target="exchanges_uc2_1"/>.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="368" width="528" viewBox="0 0 528 368" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,336" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 72,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="108" y="260">supply</text>
<text x="168" y="260">CAcerts</text>
<text x="244" y="260">(optional)</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply CAcerts (optional) ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status

]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="exchanges_uc2_3a"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Validate the LDevID(Reg) certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert")</t>
  <t>Verify registrar signature of the voucher similar as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
</list></t>

<t>Step3 and step 4 have been introduced in BRSKI-PRM to enable verification of LDevID(Reg) certificate and also the proof-of-possession of the corresponding private key by the registrar, which is done in BRSKI based on the established TLS channel.
If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="exchanges_uc2_3b"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "pvs-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate because
  it starts in the future (1/1/2023).",
  "reason-context": {
    "pvs-details": "Current date: 1/1/1970"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>If the pledge did not did not provide voucher status telemetry information after processing the voucher, the registrar agent <bcp14>MAY</bcp14> query the pledge status explicitly as described in <xref target="exchanges_uc2_5"/> and <bcp14>MAY</bcp14> re-sent the voucher depending on the Pledge status following the procedure described in <xref target="exchanges_uc2_3a"/>.</t>

</section>
<section anchor="exchanges_uc2_3c"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHOULD</bcp14> only be done, if the voucher-response has been successfully processed by pledge as reflected in the voucher status telemetry.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5bag".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used by the pledge:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the validation of the wrapping signature or another security check fails.</t>
  <t>415 Unsupported Media Type: if the Content-Type of the request is in an unknown or unsupported format.</t>
  <t>400 Bad Request: if the pledge detects errors in the encoding of the payload.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "pes-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Enrollment response could not be verified.",
  "reason-context": {
    "pes-details": "no matching trust anchor"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
An example case for the registrar revoking the issued LDevID for the pledge is when the pledge was not able to verify the received LDevID certificate and therefore did send a 406 (Not Acceptable) response.
In this case the registrar may revoke the LDevID certificate as the pledge did no accepted it for installation.</t>

<t>The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), may have a list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="exchanges_uc2_5a"><name>Pledge-Status - Request (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the private key corresponding to the EE (RegAgt) certificate.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="exchanges_uc2_5b"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

<t>The pledge <bcp14>SHOULD</bcp14> by default only respond to requests from nodes it can authenticate (such as registrar
agent), once the pledge is enrolled with CA certificates and a matching domain certificate.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due changing state on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished.
An alternative may be that the onboarding state may expire after a certain time, if no further interaction has happened.</t>

<t>In addition, the pledge may assume that repeated triggering for PVR are the result of a communication error with the registrar-agent.
In that case the pledge <bcp14>MAY</bcp14> simply resent the PVR previously sent.
Note that in case of resending, a contained nonce and also the contained agent-signed-data in the PVR would consequently be reused.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the EE (RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid EE (RegAgt) certificate may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The EE (RegAgt) certificate may have been acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the EE (RegAgt) certificate may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the EE (RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the EE (RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the EE (RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC6762">
  <front>
    <title>Multicast DNS</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6762"/>
  <seriesInfo name="DOI" value="10.17487/RFC6762"/>
</reference>

<reference anchor="RFC6763">
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6763"/>
  <seriesInfo name="DOI" value="10.17487/RFC6763"/>
</reference>

<reference anchor="RFC7030">
  <front>
    <title>Enrollment over Secure Transport</title>
    <author fullname="M. Pritikin" initials="M." role="editor" surname="Pritikin"/>
    <author fullname="P. Yee" initials="P." role="editor" surname="Yee"/>
    <author fullname="D. Harkins" initials="D." role="editor" surname="Harkins"/>
    <date month="October" year="2013"/>
    <abstract>
      <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport. This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates. It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7030"/>
  <seriesInfo name="DOI" value="10.17487/RFC7030"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC8040">
  <front>
    <title>RESTCONF Protocol</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="January" year="2017"/>
    <abstract>
      <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8040"/>
  <seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>

<reference anchor="RFC8366">
  <front>
    <title>A Voucher Artifact for Bootstrapping Protocols</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer. This artifact is known as a "voucher".</t>
      <t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure. Other YANG-derived formats are possible. The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t>
      <t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8366"/>
  <seriesInfo name="DOI" value="10.17487/RFC8366"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8615">
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <date month="May" year="2019"/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8615"/>
  <seriesInfo name="DOI" value="10.17487/RFC8615"/>
</reference>

<reference anchor="RFC8995">
  <front>
    <title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <author fullname="M. Behringer" initials="M." surname="Behringer"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies automated bootstrapping of an Autonomic Control Plane. To do this, a Secure Key Infrastructure is bootstrapped. This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline. We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device. The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8995"/>
  <seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>

<reference anchor="RFC9360">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="February" year="2023"/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9360"/>
  <seriesInfo name="DOI" value="10.17487/RFC9360"/>
</reference>


<reference anchor="I-D.ietf-anima-jws-voucher">
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname="Thomas Werner" initials="T." surname="Werner">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="29" month="August" year="2023"/>
      <abstract>
	 <t>   [TODO: I-D.draft-ietf-anima-rfc8366bis] defines a digital artifact
   called voucher as a YANG-defined JSON document that is signed using a
   Cryptographic Message Syntax (CMS) structure.  This document
   introduces a variant of the voucher artifact in which CMS is replaced
   by the JSON Object Signing and Encryption (JOSE) mechanism described
   in RFC7515 to support deployments in which JOSE is preferred over
   CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-jws-voucher-09"/>
   
</reference>


<reference anchor="I-D.ietf-netconf-sztp-csr">
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Sean Turner" initials="S." surname="Turner">
         <organization>sn3rd</organization>
      </author>
      <date day="2" month="March" year="2022"/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-sztp-csr-14"/>
   
</reference>


<reference anchor="I-D.ietf-anima-rfc8366bis">
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software</organization>
      </author>
      <author fullname="Max Pritikin" initials="M." surname="Pritikin">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Qiufang Ma" initials="Q." surname="Ma">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="August" year="2023"/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#x27;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#x27;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-rfc8366bis-10"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC2986">
  <front>
    <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
    <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
    <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
    <date month="November" year="2000"/>
    <abstract>
      <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process. The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2986"/>
  <seriesInfo name="DOI" value="10.17487/RFC2986"/>
</reference>

<reference anchor="RFC5272">
  <front>
    <title>Certificate Management over CMS (CMC)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="M. Myers" initials="M." surname="Myers"/>
    <date month="June" year="2008"/>
    <abstract>
      <t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t>
      <t>1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t>
      <t>2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t>
      <t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5272"/>
  <seriesInfo name="DOI" value="10.17487/RFC5272"/>
</reference>

<reference anchor="RFC6125">
  <front>
    <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="J. Hodges" initials="J." surname="Hodges"/>
    <date month="March" year="2011"/>
    <abstract>
      <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6125"/>
  <seriesInfo name="DOI" value="10.17487/RFC6125"/>
</reference>

<reference anchor="RFC6241">
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
    <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
    <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
    <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
    <date month="June" year="2011"/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6241"/>
  <seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>

<reference anchor="RFC7252">
  <front>
    <title>The Constrained Application Protocol (CoAP)</title>
    <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
    <author fullname="K. Hartke" initials="K." surname="Hartke"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
      <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7252"/>
  <seriesInfo name="DOI" value="10.17487/RFC7252"/>
</reference>

<reference anchor="RFC8152">
  <front>
    <title>CBOR Object Signing and Encryption (COSE)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8152"/>
  <seriesInfo name="DOI" value="10.17487/RFC8152"/>
</reference>

<reference anchor="RFC8407">
  <front>
    <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <date month="October" year="2018"/>
    <abstract>
      <t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="216"/>
  <seriesInfo name="RFC" value="8407"/>
  <seriesInfo name="DOI" value="10.17487/RFC8407"/>
</reference>

<reference anchor="RFC8792">
  <front>
    <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
    <author fullname="A. Farrel" initials="A." surname="Farrel"/>
    <author fullname="Q. Wu" initials="Q." surname="Wu"/>
    <date month="June" year="2020"/>
    <abstract>
      <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8792"/>
  <seriesInfo name="DOI" value="10.17487/RFC8792"/>
</reference>

<reference anchor="RFC8990">
  <front>
    <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
    <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8990"/>
  <seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9238">
  <front>
    <title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="J. Latour" initials="J." surname="Latour"/>
    <author fullname="H. Habibi Gharakheili" initials="H." surname="Habibi Gharakheili"/>
    <date month="May" year="2022"/>
    <abstract>
      <t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t>
      <t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9238"/>
  <seriesInfo name="DOI" value="10.17487/RFC9238"/>
</reference>


<reference anchor="I-D.ietf-anima-brski-ae">
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Steffen Fries" initials="S." surname="Fries">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
         <organization>Siemens AG</organization>
      </author>
      <date day="28" month="June" year="2023"/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-ae-05"/>
   
</reference>


<reference anchor="I-D.richardson-emu-eap-onboarding">
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname="Alan DeKok" initials="A." surname="DeKok">
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="2" month="April" year="2023"/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-emu-eap-onboarding-03"/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="androidnsd" target="https://developer.android.com/training/connect-devices-wirelessly">
  <front>
    <title>Android Developer: Connect devices wirelessly</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230000000000*/https://developer.android.com/training/connect-devices-wirelessly"/>
</reference>
<reference anchor="androidtrustfail" target="https://developer.android.com/training/articles/security-ssl">
  <front>
    <title>Security with Network Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230326153937/https://developer.android.com/training/articles/security-ssl"/>
</reference>



<reference anchor="I-D.richardson-anima-registrar-considerations">
   <front>
      <title>Operational Considerations for BRSKI Registrar</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <author fullname="Wei Pan" initials="W." surname="Pan">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="11" month="May" year="2023"/>
      <abstract>
	 <t>   This document describes a number of operational modes that a BRSKI
   Registration Authority (Registrar) may take on.

   Each mode is defined, and then each mode is given a relevance within
   an over applicability of what kind of organization the Registrar is
   deployed into.  This document does not change any protocol
   mechanisms.

   This document includes operational advice about avoiding unwanted
   consequences.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-anima-registrar-considerations-07"/>
   
</reference>

<reference anchor="RFC8971">
  <front>
    <title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
    <author fullname="S. Pallagatti" initials="S." role="editor" surname="Pallagatti"/>
    <author fullname="G. Mirsky" initials="G." role="editor" surname="Mirsky"/>
    <author fullname="S. Paragiri" initials="S." surname="Paragiri"/>
    <author fullname="V. Govindan" initials="V." surname="Govindan"/>
    <author fullname="M. Mudigonda" initials="M." surname="Mudigonda"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8971"/>
  <seriesInfo name="DOI" value="10.17487/RFC8971"/>
</reference>


<reference anchor="I-D.irtf-t2trg-taxonomy-manufacturer-anchors">
   <front>
      <title>A Taxonomy of operational security considerations for manufacturer installed keys and Trust Anchors</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="6" month="August" year="2023"/>
      <abstract>
	 <t>   This document provides a taxonomy of methods used by manufacturers of
   silicon and devices to secure private keys and public trust anchors.
   This deals with two related activities: how trust anchors and private
   keys are installed into devices during manufacturing, and how the
   related manufacturer held private keys are secured against
   disclosure.

   This document does not evaluate the different mechanisms, but rather
   just serves to name them in a consistent manner in order to aid in
   communication.

   RFCEDITOR: please remove this paragraph.  This work is occurring in
   https://github.com/mcr/idevid-security-considerations

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-t2trg-taxonomy-manufacturer-anchors-02"/>
   
</reference>




    </references>


<?line 2147?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="pledgehttps"><name>HTTP-over-TLS operations between Registrar-Agent and Pledge</name>

<t>The use of HTTPS between the Registrar-Agent and the Pledge has been identified as an optional mechanism.</t>

<t>Provided that the key-agreement in the underlying TLS protocol connection can be properly authenticated, the use of TLS provides privacy for the voucher and enrollment operations between the pledge and the registrar-agent.
The authenticity of the onboarding and enrollment is not dependant upon the security of the TLS connection.</t>

<t>The use of HTTPS is not mandated by this document for a number of reasons:</t>

<t><list style="numbers">
  <t>A certificate is generally required in order to do TLS.  While there are other modes of authentication including PSK, various EAP methods and raw public key, they do no help as there is no previous relationship between the Registrar-Agent.</t>
  <t>The pledge can use it's IDevID certificate to authenticate itself, but <xref target="RFC6125"/> DNS-ID methods do not apply as the pledge does not have a FQDN.  Instead a new mechanism is required, which authenticates the X520SerialNumber DN attribute which must be present in every IDevID.</t>
</list></t>

<t>If the Registrar-Agent has a preconfigured list of which serial numbers, from which manufacturers it expects to see, then it can attempt to match this pledge against a list of potential devices.</t>

<t>In many cases only the list of manufacturers is known ahead of time, so at most the Registrar-Agent can show the X520SerialNumber to the (human) operator who may then attempt to confirm that they are standing in front of a device with that serial number.
The use of scannable QRcodes may help automate this in some cases.</t>

<t><list style="numbers">
  <t>The CA used to sign the IDevID will be a manufacturer private PKI as described in <xref section="4.1" sectionFormat="comma" target="I-D.irtf-t2trg-taxonomy-manufacturer-anchors"/>.
The anchors for this PKI will never be part of the public WebPKI anchors which are distributed with most smartphone operating systems.
A registrar-agent application will need to use different APIs in order to initiate an HTTPS connection without performing WebPKI verification.
The application will then have to do it's own certificate chain verification against a store of manufacturer trust anchors.
In the Android ecosystem this involved use of a customer TrustManager: many application developers do not create these correctly, and there is significant push to remove this option as it has repeatedly resulted in security failures. See <xref target="androidtrustfail"/></t>
  <t>The use of the Host: (or :authority in HTTP/2) is explained in <xref section="7.2" sectionFormat="comma" target="RFC9110"/>. This header is mandatory, and so a compliant HTTPS client is going to insert it.
But, the contents of this header will at best be an IP address that came from the discovery process.
The pledge <bcp14>MUST</bcp14> therefore ignore the Host: header when it processes requests, and the pledge <bcp14>MUST NOT</bcp14> do any kind of name-base virtual hosting using the IP address/port combination.
Note that there is no requirement for the pledge to operate it's BRSKI-PRM service on port 80 or port 443, so if there is no reason for name-based virtual hosting.</t>
  <t>Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.
IDevID certificates are intended to be widely useable and EKU does not support that use.</t>
</list></t>

</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 09 -&gt; IETF draft 10:</t>

<t><list style="symbols">
  <t>issue #93, included information about conflict resolution in mDNS and GRASP in <xref target="discovery_uc2_ppa"/></t>
  <t>issue #120, included statement regarding pledge host header processing in <xref target="pledge_ep"/></t>
  <t>issue #122, availability of serial number information on registrar agent clarified in <xref target="exchanges_uc2_1"/></t>
  <t>issue #123, Clarified usage of alternative voucher formats in  <xref target="rvr-proc"/></t>
  <t>issue #124, determination of pinned domain certificate done as in RFC 8995 included in <xref target="exchanges_uc2_2_vc"/></t>
  <t>issue #125, remove strength comparison of voucher assertions in <xref target="agt_prx"/> and <xref target="exchanges_uc2"/></t>
  <t>changed naming of registrar certificate from LDevID(RegAgt) to EE (RegAgt) certificate throughout the document</t>
  <t>change x5b to x5bag according to <xref target="RFC9360"/></t>
</list></t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>, and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in <xref target="exchanges_uc2_1"/></t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR on registrar <xref target="exchanges_uc2_2_wca"/></t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on registrar-agent <xref target="exchanges_uc2_3"/></t>
  <t>issue #96: updated <xref target="exchangesfig_uc2_3"/> to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in <xref target="exchanges_uc2_3"/> as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="exchanges_uc2_3"/></t>
  <t>issue #100: included negative example in <xref target="vstat"/></t>
  <t>issue #101: included handling if <xref target="exchanges_uc2_3b"/> voucher telemetry information has not been received by the registrar-agent</t>
  <t>issue #102: relaxed requirements for CA certs provisioning in <xref target="exchanges_uc2_3c"/></t>
  <t>issue #105: included negative example in <xref target="estat"/></t>
  <t>issue #107: included example for certificate revocation in <xref target="exchanges_uc2_4"/></t>
  <t>issue #108: renamed heading to Pledge-Status Request of <xref target="exchanges_uc2_5a"/></t>
  <t>issue #111: included pledge-status response processing for authenticated requests in <xref target="exchanges_uc2_5b"/></t>
  <t>issue #112: added "Example key word in pledge-status response in <xref target="stat_res"/></t>
  <t>issue #113: enhanced description of status reply for "factory-default" in  <xref target="exchanges_uc2_5b"/></t>
  <t>issue #114: Consideration of optional TLS usage in Privacy Considerations</t>
  <t>issue #115: Consideration of optional TLS usage in Privacy Considerations to protect potentially privacy related information in the bootstrapping like status information, etc.</t>
  <t>issue #116: Enhanced DoS description and mitigation options in security consideration section</t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
rHqMA8lgmJRGjL1AFmgzkrQ3fyFQddTcb9E4oAvxQdYBl8kUc8aVqUmeZqEi
cGdK1r+a+m8rjTq9MWETaBI2gXuqI59lGvLU1fJs0AOWH7cOVR9iEsVkNYuR
/ZGcxEMtn3kk6MqSaJYI/ujHE9RigfP+y+lqvvlpNU5EhAtB7FkOEn40E4xc
zUXvDLdQEktMbtvhafv4lABQ+K6ZUWpuF3kAj6Z/laAFosTYbniTC0MK4A1s
4JKrLyaPPc3C2Bn7bISi4OAz+Gln7wj8fDZO7k74AjuSXsCEdUZ0B5bC/UYS
AiqsvyAPEtYgYXPoIcSSZss2myMSJbw01csUOXB8+Ud5C/NR87pBvTLMy+eh
kHcOry3DCehx8IZ/ySibVwJ4NpYaMA4+aQso6xUDm8i53KBziQEVqrd7iVMv
kRTNi5E+KIbEpYN2rxHivmb7+BGITkPxRR77lVdAf83efhJhPg4X9Wx4C0Lx
e+TmR8PnIyoEl8/LWT6sL8bPHj19el425CJt4xK9tui7yce34YRUrYa8i1b4
Jc+jASonOcEHGIRlDwPIyrDWIfkzm1TTeV2EQ+oA8cKgKRSIUS3ZyjGkSgbG
k8V5/w60Jdd1dOHlrthqRIFUhqKYwqhUa1zeh5CJXd1WlETdsO5G9DSDDTux
hBYxfIQ/JKjlAPUW9CIlH/E92xaDUpm818Fa4s5F9dQMlnJ6xBKa3n0bC8Yy
V/ZYDtY3plFIuvld01vO5SzrUFhP5xjBbTraf7WPFBCDQNmo1mxEpj+TbWvt
z/QmFzNrCJA5E9++CSdRM//txgY9XlpwKEIS9dY9fTRD2gLyyQQFUWrwB2zv
z9TedydHzaZnV340Dihabdn4aBwL9NzkEKf/nWh0+EbWLq7r6Fd2OkVpQo40
4L8fz749OoVz8ld8v1j9fqIQpH2/6XQfocF7y4f/Z9/vdL8KNT3x/jgfp9+P
6TZeTJ6Sff/viybun0MxVSlk1hj+M+8Hdf2C/qVwoL9OyffDylX0q/MSJYto
NcH7TmzudXSB7F9e5+PbzvU5cp7dgY/3GRNaj3kuioGna34bxSQgbO5o42uX
Wc7t5ARd1rgIV2L33DRLJUTtmWYziK8VDQ0HQWJYzfmOB3QSXnf2lCnGRJry
ydP81oJX3R0jh+y2y5PUYNVYgimLcCf4/DqwSj7C19IJrpiopZ2Zshpm0DVr
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
b0BSuatvnLlhSYBEFajEy0JwPdGBABsJkLBElV52nP8+Ty5AQqqyu/fZdyZi
ZvaJ09t2FSzWypX55JO5XvLVit3Vptmf7QlYbM8M71VtxjrFFp0OaZxKZLTe
uWp9uds2l3g3h8p/xNVeb+99fYkRqNsnTuTeEsO7KvNU58i53PJKbs2xjr8g
gWqPQb3tBN3Oq2WMah8BD0N5WvwcJ0IIQbF9rnJVnGloE0u+bQeazaYXflTr
9TB/LrLP9L0wqWy4hhEaG98vQZtMqlh2e3va23jide3b3mqp1HjMhUPxIh9t
1cTpXFV1tQJ95x//+J98Dj7RUtYvpwfqWo95xeK2VaaO87IbSiLx6wqaCscn
jgVwOyXq3u4FbODz05jf+tIQ4CbjC8sFLl4UHanEQuI0ZHswMZRKYe6krljf
BmfKVusXvwldgeSpNIdnq/2R3M2hO9+eoUgZn/qoMuVq7aHqO+LujEc2p5lD
56pmu8KnloJ2fqKfzUNV7HH7OaTNA4TJ/BzQzY0b13mIbJHWS3XBKq1p0YaS
BYSwi3jH94pDdcizLMJnqrTa3xChlT/eDoJNEVOs9P52sk3xmwE84AoxRPT+
dhSvos0ixcPrME2C522VRxuvvq1vXfzutGK3oNxS8Vw2Uxk+1yVMV3zqqr2D
1ZY+KOVXWrc4J3erPtYN7K6qMms0teju+vm4QI+G63yxQo9sWkGqejNINqQ7
GI0F5hlltA3dIvvlKXUIhHNWeZuu4QmX6YlK08VDcVw0nz+Vncn556uzWcBu
XgTDqlGaOP96cFUnuR4ZX2wst3X2i+fFTnuELp5/NcbRGg+bz4vbxwVvaoTY
N8aPtEVAM08Xvswx3tZu2y0/F1r9tTrJvz1dXritb33I+H6l17e8fbqXSP/w
MwBdn1Y3smCbIPLK4tqDNBtg6xWy671kH3g249f2zVTttceKkLy7Ppe5uNgW
3ria7emOq6DVVnne99KK/sCO23u/+b6siw3g9bWRzfrclk5ucADEt6nLdOVK
9657D5mDgdRbGf7j8v9otVn+/fa/fflvtGLVqlVF21YgvluS3+3VS/9xc7Xp
vNqSHB+0wp+Z+ePMf4lcY+3PxmWYs33ksmM0EHdhLtxF+b3oSUkWLsZ3eD4J
O0YWrsxiLnW/3CwmCy3xJfZcPX3fDVyxiEbp4nGgHf2ZVnjurpyvWOnl7DBe
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
9GMICuc968dvh39TuH9TuH9TuH9TuH9TuH9TuP+tFC4aZTtyamcXKX6POvom
WBnkmt5KvX25eYvlWcl397dnxUyfP8/Gx+XnpN+drzNdX0Wh90n1vnce5uv7
7uFFLZeDYC/POiOI5g6DcGxZ+yN9zqai+mm4Cpzu4tvwKXLUMmT3j+nul/98
/5fW2MzvPIPvXhquq6QdPdcWbvpDw618y1/1LKSgP/YtP/AsSlZ5t9O97DCW
1s3sanTs31WGSltjoICpI8A/PtCFLsYoUeJUsRqPOxfEIW1bcWjh26WtzoYL
HyuIXUBB35ZbC9+pPwlVc8RmyQgKO2tasNGqrmiSl0UqzPTLzdbK9+37xGlD
f3XN3SpreAJ4BGvzBig0G0/tvjaFSaI/X24kiy7Nq+5tf3VrO105Fx6V1FFY
4aaJEan3G0cy95YYin7em4WClj50FLp1dRjNnNzPfRZtYjfKvPz+wU+zLcDi
4EnpwZhFz4EKsEuNUZCDsyxZs/2kupKPbgE3pplSXcp3vpJvwL0W5sjEv2mt
jW5DtYVmuTrhftOstGJgUA68A89dr21pAzTccYam5qtGyfJeQut9niSqsbP3
KpajiPy2bVWbsRVbwncXvqx/uRHprlhHMMbz9HQ7fnU3vi3v+L3Lcq8wZtA0
0RcAW2Kc7mfWsq/Pbbb1W1tiri8LzCg/r1J+Plb36TRPgpDulV2yB3uoTcMs
GsK4bSNPZJeF+9iB1j1hHixvxhahrINhKRp8vxaAzzlCsfCF/bMvJQsPtqOr
5hJOj7Ec4MFvbu/jz6IT03bRQFeMrZ5/E2I58zD3/xUggb78IItvdNcz1v2N
3T3n25H+kCaRZeWap5Rsfhd8Ww470vOsGGfq/u47kz8NE+HDHBibmOZhudoX
vwlj9odyEM3Pk9l4fNx2pr8NVvq3/rdvfzVcdBGzIQyy0KV/NnJ8/1cCvh+G
l3+7Hdn20weqjvaBquLVJbWopktTj/u6zCcvt1vFcv/4W1UhLSnLoi7D0lQq
omatUxuX9UzO7fAqp1Vbp+v/FryIKK89FWyrMl/1wPKYimEvtvnHm5unpnzM
6Uq9ND4ggNzEVdGj+h6951UUb7IDhXQ0vKYUElXSWtUFiOrb96jYDT16WcKy
uvuwHlPdAn2X6tcsXoLwcKqmUwe/rSKwvB9vCLRVRraRwavanSTJU0eoMFJd
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
rZbfn5M8vIotx6eXzaYeAQZV/exqdBSbEC0JajG+4qofbxGecjZYPUX6UFaE
YN7C+VdD+NiCdLEtgcqLQidh5vQVYlBtDk49CrItd2hNIFQnlKrRNSN5c0rw
Ve4ZXngxD4IsMr6Y+zKyAd6l7YlA0Yx8BeDduurj4PbXSjC1Q62NB21k1AYP
ZQnqYsotiPWuDPo76OW5nDM5I6JbvAz9luheHZBx3d+2pCL9fpuSwzxJAq68
AH2sOA/fZYGODCzz0ke8HvguvHBt993f2+LmaL7O1t8Ot78Wa+J529sXsOv1
vJrOd603e+03T9Zas4/B50sCsn5tltd961z06+732+eiSpa1Hvy6+NY8W4Xl
PM6gvy4p7iEfc/nlShsIuCDvVvOffq9JSlT7uorxr5pM2Fu9q+MS0jmoW77Y
guxEl83e/97AHZHDduDG/TrmOWptGsKPG5/19hdb7k8Qfj9j4wrEg/vrZqMQ
f/2FmAm5i9ZbYusttB1x7QS1ffWxOcbXdKaMqbZ4uTlc4A7FYxUffaP+zNXk
trsA1aXU354b2YmrVxmCerK2F9P0pjAuyYDQ+1NpxLU0Wi99ar3UPEu9aOvL
Jn5Zhz/Ugu5lg7/R0CgciDjrq113lX//YOH7z9vb5nzA+rXQe5csU2xPVuWw
PmyrRk4bwFqskjvTdmr9FJK91fPe/PJbmBVEWnjpl2ZFJEWAsgMBobd/8HXe
Lv3wD/zosr3O72e32MIwrvdNK4R/1OtfKF2BiOBDFH8NAIW/1Dzz5z0GUg0I
J6M6/09NX5CEitGiqad6JeHi8W27rd6/2FbtZ4iTnDOc2eG0hsFz3VcxSe00
5+t1SZZSbYvLFmncCKj1MDhGGX5s9xh4KDfyHa6tCxmTd8kX5eJbPZbiRH5P
iZLwYrTbyn2i/QZjeR2qGK1vb96gm5+u6eZvnG6enOdfdZkIkrOMYvJV8+DJ
7b5rt/d1sdny4L9GiiaVYSVxAYCi7r4s4h1PYOJLz7y2FU2WCaLTa5zxZ2Os
f779Btr1PH9jUHfXg/rEB8V72k42BVXYgcHV1LOByVrfqz7yLA/8Cal41d32
8g7UhUc9nbu7+WL7vuFHfNUJErloiWYzeP5G/6iV7fK7DUducibXdbYglF1M
OaJq2QGxEuWAgm+bICcb2Ob4IvX+NGe1F+U28lpMvWsx3XExOVxxqGtN2r6a
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
XneEd7udtn3rqRvuXU47OhoU4GfDqtZrrl6D7tXrlx6veZnPbEt5V3FJ1PvD
lhhnuN18EO5a3LSauev0NPpLT1b8FKNfv44Zap2q+/xWLPuDxFeboZ5pwpsp
Ad6tN2X2RoKBM+grNUHM13Za10frEUx/vRRimxbjMw2kxlm9mX8TJgtana7S
xOeennb9E3enjF3tuCi/TPztwM0XMiW6GxTb5+o0cr3NwPLtJ2KTNXq/e0ua
P0iCNYuHtC593hDRLM4RDNCSxCYIT6ADWPx4O6l3UHCH2GYHVeP0njax5NvK
8Z4PN5APDMJmn1BtLA3PbvYwN1+vWQD5rQKCCMLkjamrCbfd3mjCf/v7KVfb
OJXKnUIMr7MONITK0KsrAuj2t+p3zcHvP/tK5/bJeXz8+5NjjegT9SfrM5jr
Ooi5bW3nvwpwKu7Nu3A+DnfyMqd7Aypyc3F84CSc5gjBxUrdNY9rTovwBX64
ivouhA9P1kMDtCcmR2ySdqLOgX5Jzm/8qx3xdrsOF1d77/hOch7gciXgyvI1
eFnXVwJU1y5wDU8W3+ixLDi0YIunkiuF4Iyy1gKeQaNTWa2fUS827YVcojUX
p8teAT71usl9BdSHE2o3eZo2/bm6xeHUygWn4tZTIuaptm/xs6tvXhPwxpGO
dlx5arX7HnE//rt/d3W46BI2ah9XJbyrXSotJOHblz5kPAl3sYn9K3fSr/py
eWqvXFOCbvtG5z5Rp2pa8QNHXUNhK6rnE9/aKlN9kx+kRVfblLgGsofxsALo
85ONPjQd6Xx6dxnctHYSnF3gX7KFk5N/lcurl9qvQfhiDQ0NnLnuj5HpX9GR
U16wTgr9BcWwCgSzJHhaYOdRhtQCd+6LyVOcKOMP+v1XM8vnnZTVItjiYuW0
Xl/nK0xce6p17/Z2Au4MtvyYDG2XqHOCdJx6xU+krFqLRGig2lvXjKyVXboa
8lvutroKgSts7XMg8NWWJwJ/chtL23t8bJHlxbY2B36DCuS3gpu/gMs3Wm2d
6qq60Hzsct/rKevcJlXtdj5WCTHaaXwV3Ddz2RjGbcXCfq0yPPzEDsnr3c15
k+H5yMB51bPZh13lUk7E7ZxW4X6/Wl3l03S2nxMZoBF9qO6/OL9XHbnnUETb
lLmxnynV3z+2XnLMMfD/rGI84M4QT5abizMTFN9enK9uTihixv/Ow65X9/Kc
yHvTL3JLzZ1DZZDif0kOjVfh+/gqdWwCtY/tVdizF7zkg3YC4Wxv3Xiz4mc7
20OtchunnrXaVf6v2q5lt4kgCP6Kz2hZEXHjypUgJL7A9m5gJNsbeUziz2eq
+jE9s8aABJdIkbwPT7+7q9rSHp3SS5pA0C4vwki1RqC8+7AqstcihFL8SwnS
kjEbsTxBdh0ctnufV1W42sP4Xjy6dOr9O/ELVGuP/G5rzhMFUmwaWQuXrXTj
/GKMp5v6gBtac5TyeEzCOpnUF3vn1A+/K5Sjx3QjVdt1L9M7mGEzj99GySYB
GjiWbIIIRlsDohLq6GWNIn18/BKZQLrloyTK34snwV9+ItSF5d/BvIYohTXr
bTeVCvk0g3uzLXrR2JiLVX1pmNArOwFvLWMANumVwmcS5vmEyf24+eoA6h7Y
gnEE+ndPutWrRNRdOvn6qqNOXzFLu2q9bfhSez3nMpRok2LdkmPPoiaVTeBH
V8atg9JlsUu2MmBShB2iLcLM4AVLR6YFO16QuJ4VGnKmOjuSZJ/mHMIQISh4
2F6cfD/kAPeOpMlzys81bVMZyaAZsBFl/I8OgzDQRUCzdeYgCY1i37WUMAg8
MWOealQZD67NOJsqLtsAonsHGvPIKyXIcMC2XcFVBWPPItzrPYfGGr9BtNDP
Rxg5LsVKrLeVltvtzJrYO2o+YaGPBx4Iqnpkr0tdmkZzrVWfTvg7wrbeT1GW
rp7wTD69HLsYVPn4sh5GbqGgNGf+4OiKG4t7DNC9cvBaEWO+RASzZHmKXqtD
QXbLgzuqZaH5OBuTVo8KZZFjKHd4ykk2K91M42UY7q5P2ku89o4gPDUnx5ir
6iouRDJ+bpg5pmwkV+iwLORzilGXgMXuaBNP1SxqtJGgXV15RhWHSkSKQepR
a0u8NpI+Lt36I3XNg7QvvOpkNiMJRUX8+4PvGQDbMtqLqQbQeg24HaLNrMN6
UA4FQfm6CaO8grKX8W6fbONavGvnjhttIWlWYVneJaDg5BR/VW54FdZy9JiH
qgu/wRYI581NQVddnab+n9VYCEQxIJhPyuvIc+eYWb2sShabRwwNO0Pmg0Ai
qH4vtrsAuuVZ+utCk4jaYeaRuzJI68DD7EdvuOXlR44NNnEw9hMJkibLBiaH
Ftgzem+zinx7tjksGdjNApCSyhEDsPgKRxQvMoFKugARgB2kecvFRYt8SSZj
boWVaNjSDPnk6tGetzrPk1+oOJXKheO/By+yakepDUS/UzxLOP+Hbq9Itn+i
0qbQkuf8tUp3Cv1m8znk2SUQnHmFzUfLQ24lTTdfb+dga/Gzu6UEPaSD4PUn
DeM/AbQfKi63qQIA

-->

</rfc>

