<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. 
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx status code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error status code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx status code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is only a necessary precondition if the MASA needs to verify that the domain of the Registrar is a-priori authorized to enroll a particular pledge, or a particular type of pledge. 
In such case, how the MASA will obtain the domain CA certificate is out of scope of this document. 
In other cases, a MASA may allow the pledge to enroll into an anonymous and/or yet-unknown domain and then the a-priori possession of the domain CA certificate is not needed.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 Not Found status code to the registrar-agent.
HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used if the Content-Type indicated by the Accept header is unknown or unsupported.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code 406 Not Acceptable as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature or another security check fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is in an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the pledge detects errors in the encoding of the payload.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a plegde-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the plegde-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "vouchered" / 
      "enrolled" / 
      "error",
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"vouchered": Pledge processed the voucher exchange successfully.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enrolled": Pledge has processed the enrollment exchange successfully.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"error": Error occured during bootstrapping. 
The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.<br />
The pledge signs the response message using its IDevID.</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enrolled",
  "status-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchore) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format. 
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y9+1obR9Yv/L+uojfZzxNIkAz4kIQ3c8AgJzgGY06OPZmd
t5Ea6CCpNd0tMHH8Xst3Ld+V7XWqqlXV1UI4nncye2+emRik7jrXOq/f6na7
nTqvR9lm8vTw6Ifd5CavL5ODUTa8yJJ8khxm1bSYDLMy2SuGWbJMD3UPDvdW
OunZWZldy3v4UWdYDCbpGJoalul53c2z+rybTvJx2j0rq6u8Oy3H3bXHnbTM
0s3k5TQr0zovJlWSTobJXjpJL7JxNqk7Nxebydb+7t5W8vq7zjCtocGNtY2N
TlXDgz+no2ICn9TlLOvk05J+q+qNtbVv1jY6g7TeTKp62Jnmm50kqYvBZvL5
bVZ9Dn8MivE0HdTug+p2XGbnlfqgKGv/E+hgUtT5eZ4N4cNJQU/VZe6aSWf1
ZVFudrqwWvDiUS95VuZZBc/xUhzV2fl5NrGfFiXM7ijHmVbJ1nfwiVlH+ZB7
yDLo4WVdF93v08tJ9zCfXCRPcBJ5fbuZ7M0m+eCS5jSEPj7/ev2rh9/wHGeT
uoQnvsvKcTq5hY+ycZqPcFFoHL1zHMdfK+6rB2sCj8zKfDO5rOtptfngwc3N
TU99/cDM7LiXvM7KSVbaqR1fFuO0cp/+q6ZW0zi6NzSOj5lav5e8yFI3sf4o
L2rzEc1qO68GRXJ0C6s41tM4hLHWOfyVVlWWfGVn8TodjfIqG42yiZ3K9vfd
rx+uPdJTOYLb9mtWjuBcw8fTSzrZS18+Wk8ePUq+/urr5Bs410tupiMY0l8H
OBaangx/r0fjSMthVUzsJPbwo2yUbAff8i5Bj9kIljE5Ks7rG7iRyeuivKpc
V+NB+SVe4L9W5tHeINULatZTff2gMyhgYvnZrMYrYZezuiqSnfyXK9d6Bh/1
hvDRX2Gl4aVqNoLLPbjtTUad62wyg7fg4YuymE3pN6IiCb/7nv74Kw6uB5P5
gA8C0ZqdbfJj3ZuLBwHV6UwKODN1fp3hqA6fbW988/UT+fXxxtdr8uuTr55s
uF8fyq9frT00D3z1eP2x/Pr12iPz6dcPn5jGvn6ybj/96hvT2NfffEOv7XZ3
eooo/nJTda+L2eAyK71vJxkuyXm3+rWedgdVGXm1PB9gr2d5tdnJJ+fB7J5s
PFo3I954bEex7n596Ab/aO0r+fWbdTv4bzYefh3plhc0pX52+/1+9+u1jd76
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
EQHGwqr6ERSCG2kGamKPmXJTONvBS2CVQSUned9IEDEYiBZwgLY4VDJfyyJu
Yz4GHJZjBE+SKIO82kz+U1UEfPBLVUz+kzIlTSmNNHl+9HJfReYVyitdZhkW
Nk/HGYjYJLgsSFU2Se568ghOMbJSHwWGookU1I9rV5GfRgvPXx91bZy+fkE6
pGAS5O7Be5rlEV1zpEpWlSKxZBUDYU7XmDQ7nU1zr/SNlXZZ5NgUpvkebuai
QQxLm8kSD1tGTWVz//SnpVXXiFqbRR83bf+NiETLK8kCX/Z6vaW/dz442jFN
r4HoW3IhteYdjIy52Hb5YPHmKrgaWyXAEKpUhMGdK8nmORetkAvOsGACCh7U
0A8QMBEVOqoq4G90cnRAizokKLMaW4cuVLxAlIQDjpEgKRs14eUw2sTL+XEf
PJPzWVlTkIBKVaQwzUZIRjBJEvpvDS6O1a890KZL1JvheORDlfVnoLDh/gXo
YeEyChh16iUC1gK0xTCChPiksbUMhWeiacHEVEhvj+oMSOgIUuLVeWhS5gzI
7W9uCuVPqtw1W9vYBkxFU4Q2ub27ArxMQ0xORxeb+B8sm3E5dvUCPcC2MM+P
6N9VPtxkhUwa5EBIn/ad3dau7lQ8OI3CgbzPlpKX28f94+To+HB3/zuu4I1w
v++0NWPraL+3nlA/kky2pN9aWqAgQYfXC2M3714tyn1DIMCAMwIhGG82X5MK
jsmyl2Ycebd7CyLQhw8rtBtMq4Zd2Mvm0loYnqFRnghdD77FJjbx0y582qVP
+VDQRnkKa6TduGKLNwQZOVA2QdePQ0uu2qihjd7D3roB0fQb01WE71CoGzTi
x8cba5xWxil9CYfUy4aZnOFmYpM1BBLP+CxpuWoOVxVLffFYTHZfdQtjeceM
dJrejop0iJzv6dZR/8mjk8MXy4sfiBVmjfYKVZYrvpeiMUtSGzAL+jg5fvb1
Mo7twHyffE83fIXbpHdtu62cmZ5EbR/ZKCzHTsY3VOaVLC0+lyWgYJrhdmAR
SYaT9bpPU5s0/yV38HECG2sb6921R931J8dra5v4v/Xe2traW1lDfV7wcSwM
kGWPvlpfX/LnthRbtnD0STB6FptGF9hy/2jj8RPuFchd+9oqwSSthu1iyUed
v1ax5WRaGGbSBs4pcpAHH3f0/daLFy7jzcave/B7rUiyxOlI1zE0RKEG6LDP
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
VyQxc4CeKrz2HMrZeZ1JBfpRfiUgs+nkSrgniFeUsXydZzcZoqjCWVElup+W
KOv0e8l2Wk4xwAfIzMvqCr7ZBuI4AUlSAAK/zybDMr+CF0B5vkxn1nuXY/jv
dFab3RvMqko0Zdwtzo/mrGU4eedotANqRA5XMkbBUEnS6FdXBVDFX66s8IOa
ZZZNZfCuCuGY/ISc1zAtKqqj1ukgkOUZ6P+wQtbBiGi2/CunF1UW1LsSqLwR
FQltIil/9c0G7M4RfAb3/Ck0W43S6pLcxSz/m0x4MaSGmUhdUtuW6RAfWE0w
gINdSRqAOLmHBWGoLiXCSGFY15ryQSoxGWSL7xTcA0EJHGnMhyWTi/Qn/weD
0Pubyec/fY5GS1V7dIrzwgAcWJQkeOlPnQA7grzCS9nt8+nbHw/HL358ez18
vV+8/XG3HoxP3w1fn/463F6/GYzXngzH36y/2bgcDfLdJ/D85eDh/mgwOZye
bTz6qZO/zJ9fvt04nfHT3zxKX69Ph99f5S+2n//69sfn0zevb+qzyWn9Znx6
u/tLke/t9G/3fn21vv/L4NHLo91qd/z4p8712Xh/hN/uv/5m++zhyfXJZPiP
/e366vikePhq1C9PX0/X3v669s1ufpO/efh89ObHw9Hb7fXrMxjT7i+7N3u/
7P7Uqfd2BvXe8fOTvZ1XT/Z3Lp7sH7+Zwf9/fZ1jP88mb18/Xnvx49Pbs4dv
p2+/O73i3y+nZ69Ha9nR+u3b18OfOtPBw8PbN7AObzZOb4fb0P7V+vOjk921
9Gp/59XpaPp27dnDo5PnT9+ujb5/dXr5dv/X5/mb0XT/1etvvn+1tv/ucH3/
p87+/s5o+9XJ+s7xyeFp1j998ur0+fbbtcevX109uz4+2S/3jk8Pz0Zvn7w5
Hayffbf36/GPl/3T/rO9V+Phy9Or50/frK3/1Nk+vHp887Y/hBYOn7w6eWxa
2D8+eV6djN/9srf+vH9yevj07cnbh3vfj/YP+6ePocdfhmuP/3F4fLh/2p/+
1Lk8nAxusqv1/uGP8MR3+w+Px9Nn+/31k6Pxs/3DncNHhz9On55cPZ8cw5rC
LPZfbVTv9k+fzU4n08vTX0+rN7/ijGAMJ69O3pkx/AJj+O548vTqcP300eHa
4dPTNWnhZB1afXo0HD//8XDyND/rT6vXvzyvsvHhT53do/HlL+nV8xTe3j9c
e/54cDI8Pj5+9fjV6+Gzw7X9Hfv3j8NnR/3+zdHJs+1XYxjPVXWdHg8en60/
/6lTHv16+hZO1Ku3v16enqzvPnrx8PTXvdeHr05fj9Kj/vra2UZ9/Pb7Zy9g
9OOz0fDXV+NX5eD0+d7++vDo7fjt6HSj/qnzGM5tfrY2HR+9flcNf3z+S3q8
uz7ceFykJ9+8frU2/MfbH6fb+yfr23v94dO909Oro9Gzw9O19e2Tk+HOq4f7
sPvPfuqcHl49fwiz2X67MbyF3XsGfx++WTvcPew/O+DdvDx82Yfz8svlM9y7
V2u7azC7YzhL/dPR7g2s/E+dZ4c/Dl/t90dXbzbWX5+Nn705/uXpL2cnbx8f
P7s8wvNx8uPpL3vjd9Wb0fA13NTHe69HV69+PV1/Pbo8frV2OTsav/upk8IT
T972L39Iv9uf7h0/TV/3H90cj6/Ws/GzH08nhymsx5PjZ8Mf9vrv6v3X765g
jC9gjJPB68syvfrm1QnOqA978RLWvf/q6u3T9OT5o7PvDrfTZ9N3e/3Tjf2T
6d7e6Ont6dr+Wna6t5H2D9+e/vrs8au1r69Pxs/W30ye7uzj2b08OjmcHL2+
fHr8bP+HN+Ph3tl4WLwZwzr8+vTqzfrwu9PTt9cvNobfH/+ydQ0848kRkNaT
jZvbFE7k0elluXcEd1rd2/3p243HeOuv4PZfIrV4++Poh+H66H8X963NjWLZ
lt/zV2RUfamaqMwGJLnKd2ImoiQDMjbIOnDOAW7d6AChTCSQREqy9bjR/33W
PoAeTmd2VfdMTER3Z9uW4Dz2XnutfR47SofezC3itS+rl0RUUWpu57C8WEht
Hwj4tD25cxK2YE/R3NpJ4UV8Uc1EudJkERfCEFteME/a7EtUsr6LEY7t7Yxp
lS5E7ieFvp0OxR/v4jSwwijod6Ultom99V0r3om7expdmXSqIA3zRGjxw0TP
1vDnIuXVjussgZ+t0zuPi07/j3cPscn3TIiIF708HfalsIQvit7a5SKeltUT
L4R0BVvz0hmhzXhCPvIXztoLvdidW8eIo0cPzNQjsdjKaYE2GPsV3iFGYT9A
L2BxYuOV9ITYS47ckMtK4glABOEkYVZFR2eTLmB1WzbvFxL+GXVKB6h+nBjl
3DcrA5gjkwUb4g1OsritYGUb3/C2rMwF3jaOhNjBAHfJEG2Zu8KRscn8RHiW
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
W6xqvOc7uN75xz/+Z11Pou4ChZBTlZIzUJ/a9dO3HmQ0I/FGjPj56zouqppI
XeD3e/04D6COATyh+am8dZrSfShNJDoVPWhu3VeNoOqp2wuKYhjXDGG/fa8q
qrX1F65u/26/01HFO5SNH97jk1UNa+20nOa2jdhX7rA5Vy9o7i6vC26im2/g
jvEadzoKd3hVl0I5EYRTMbIf6Ok33abU+0tSPk//1//6QY34vjd5v5rU5fcm
082ZaKg6hPQIX9jvAUEVEIoCUVNJTxUtpJaqoWodprG/E41TtwGVyXZLd/DM
8L31JD9c8rjGjOqu0ngtVqc6g8qJ8IEPm1WpqILfDN1UsWy6DL6+2b35+reG
8B3EwdeDqL8eRKMG78axexdc41yb76oiS4sqClkvSkh925Fa+z//Pfm8/Xu1
3v/jH6rW5fQrerF4LrczUijnPEVdu/3Nohpfue27Onq2Pbkmm2r+v5+KVR9p
7endFQtVxP1V8c4WSj41pYxUzUkquHRRR+h1XecTcV6rbPPXjPo7PdTRwwsA
hs8tG3/EdCS1i17i4mk0Bz67rDt2VfgZo1sb8tfF9ZKm7igFXSpFkKw/T7fU
16b8y8uMChmcKhwpV4HXfF3s9qOa7BaiTsB5XStQsT9C3bQp0EOTcVGeAu9o
wf+yBs/Hd29hhvba3PVX5t4yk7qDmOVNY4KqMurJGJLlN/zhVT2bti/naW5u
6bpih+iaKsTSXK91wcrfKnD8XKkKla995Gn09NXrN1d64k+45BvO85EGqN+C
ShvxQdaSaxG1U5VV6ql8M4hNl8oJqOqHih9NY9uI9obNvyqF+/4nVXNoiQdu
tnVJ8brA2MD/UddU92Yqj1E/6mfV8juI77auRtP43+i75JSnsPqt2awn76pG
e8MaaqX5VR3qj21V3LdKqaviQqryZVt8mj75ffegSnzn2tfp86zM6hcQzF8J
IDxT8azGIJ63RCuuHPXcpo/vvzE0v7ZD01rZNVZ8CxJ+IUy4qlX47V699u2m
ZPtVV678GC0dqBLMl8j2Y+8C3F67gqrmc9xWquIPVTEmkUN1tNqSXAgItEZH
VfRWq08f8J9Jk4K69JEfX8OsKnuM5gxXAKIC4gYv/48T7iYlVXw9XOjsc3s3
NQU5VRer0aeuTksVkr5iWrOmkN5VlVzy/qZxTfiobQv0UZUjosdYsz2e8cNV
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

-->

</rfc>

