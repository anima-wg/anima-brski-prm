<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. 
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx status code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error status code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx status code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is only a necessary precondition if the MASA needs to verify that the domain of the Registrar is a-priori authorized to enroll a particular pledge, or a particular type of pledge. 
In such case, how the MASA will obtain the domain CA certificate is out of scope of this document. 
In other cases, a MASA may allow the pledge to enroll into an anonymous and/or yet-unknown domain and then the a-priori possession of the domain CA certificate is not needed.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 Not Found status code to the registrar-agent.
HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used if the Content-Type indicated by the Accept header is unknown or unsupported.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code 406 Not Acceptable as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA only signed voucher and in Figure <xref target="MASA-REG-vr"/> for multiple signatures.</t>

<t>If a single signature is contained, the pledge receives the voucher and verifies it as described in section 5.6.1 in <xref target="RFC8995"/>.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.
It requires to perform the validation that the pledge is connected to an authorized registrar-agent by other means, as the registrar would be able to verify it using the agent-signed-data in the PER.</t>

<t>If multiple signatures are contained in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> end the provisional accept state for the domain trust anchor and the LDevID(Reg). 
If multiple signatures are contained in the voucher-response, the pledge <bcp14>MUST</bcp14> verify all successfully.</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature or another security check fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is in an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the pledge detects errors in the encoding of the payload.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "vouchered" / 
      "enrolled" / 
      "error",
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"vouchered": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enrolled": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"error": Error occurred during bootstrapping. 
The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.<br />
The pledge signs the response message using its IDevID.</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enrolled",
  "reason-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format. 
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
qTLmQDTvWfYZHpkEiputRDS6gAb59jdvSasx6AwWp8sr3ZevsLM9+kfHwmzW
HgI/YW5EEpVni8Oi161FihrFUcbXKiLwERwc6XFWTtQr0+QMtBDRyYlW7UO4
Z+b1aFpOkhnez9Etfjs4R01Z+CJRsszO4Ee8hb3O1mBQiLWjpVVDIBh9zT1r
tDOidnc25hFWrp2aeLi1QkI9rytnRjg69ufl5IgxAvmRrqLJ2A1XirMvVEh2
oVPJqZxabWjSynGbADTLVSPdXJJqYLmKVvKmNqgTSIGk8z3c1VU6Ovo2r7xb
5ehOUMTSZa6jLF/cWRFsQ2A8gxpYqzBU4K3ki1CvJs47LVAnJ/NiYniBZ7Pw
Dbf6qxjVqOLO6ELCuuHuTsjhSR7mZPloa3/F6mmtph0NSZvmj4vrlsM+H6UX
sB9GLIJsg81KK7Fk4XYQjcOvl/kF2kosUay8Aa7PHMia/Ulg9ttZWnazCO9N
hPd2tkCBLGu20mhaYpN4Qmyi2K8VYqAB46t5c3HFKFxwH1AFuUbfIB3YKL/K
GvIBzYGqztKhY7E4AlxTUQSNje9E5uISRXtbiKxxl4kDeQr7jTFa3NYKY1Is
1HAl8YGICp4gs22wUG9/kaBBomRD0qSGhX7ztMy6sE7SxuD9MDZQSn5+y6KE
dESZkZZOBTpnwEZmYQ9vR8neQa/KMSii+aQYFRe3rMOhExPEOLx7ae/k6Hhp
lf+b7L+knw/7r052D/s7+PPR91svXtgfOvKNo+9fnrzYcT+5J7df7u3193f4
Yfg08T7qLO1tvVlapZNZenlwvPtyf+vFUpNloTrKhhuJTVgXmh1p1fFch0+3
D/7//2/9Eezy/8AIy/r6N7DN/MvX6189gl+QO/HbiBPwr7D1tx28I3AMeB2B
AgbpFPTIUUX8o7pElRdIPkMp/nfcmX9sJt+eDabrj/4sH+CCvQ/Nnnkf0p41
P2k8zJsY+SjyGrub3ufBTvvz3Xrj/W72XX0Y+sZ9J2Tt6KfFF7eK95F4wXpv
gwXIeWE1NnicLQzre7S0Prrd7HQWcGxudjaTHTl74uP8saL/QXk7rYsLuLSX
4rA6K2aTodHrQKgm+A4Ux/3+ihYAyXJTKCAferHTP/U/XcErhYszmgqqAFUF
ezYUcrUuqPqyLGYXqGcO8wukrSYbQScTfM4rES7HOnop8pL8zWV+jRPCOysP
9vt6UqQgb2/hDm17GpNVQNArVwGbCtSwzrbnB0CzHwc5RvO/LqzCyhLaKIqK
BfteA1JgYcyjQ38mmfWbHTKv7PT7+I2+PZBOZwzMHT/bm9GO+PRwbFn8C5J9
xpMJCygmXRS5AXEoI5GcwSWpoPCj7wqxMmiePwhfcn7+G96CbHnBNyFpac/N
IENfyoi9zzAwfDIqZkPzLoqyMPkTc0vhosGMyJJU+jCSqJO2ViCzqZsqwZ0O
4ZKL+nrt3N0JkNdBnw6Vk3S6Tvx1jfjLySHYUEGAGFaNl9aTkOzM0z46HlTm
RK/udA5eHtBrywIIH/5PFDmyoMiRpe7GCn591/t6PpQLD3861QsQJ7I/+8BD
veC08cqnpQR+zLwP6TIeRo0BcgsWU5H0FeV3+F4NPp802d6CSzfKLshLplnT
2CYuWVoDoTVjt6S86Bd+LaxocIVX/ZBP8NBqQvFDxKXCYQOJOc4J85BNcNoL
DHgaDBjdVPOLsHPD4eA4kkqWi7+jG51VlaNBMSUGeSQBHfgQPmW/EhxHXzun
Ua6fgBm+jba49WG8/6yaTWF91x/EL8/Bw0qZCUxwaqQblPbWbYU3kPzc7nKQ
4zsvys2435cuVuPxSSE2ygJ+hl7Sz0nNvoGnzUgoM53/m6iND9/SZYXWiGe6
oShMJ/TVoqbrQV82Q9qoHbzc2wJkVLeZnWpmz78waXPoxI5ZOuITWk2y3kUP
6JvG4PA4LTgfo8W3BS+4JOvWvpRjpJlzr8P1Hp+NSM7BOYH4RyNC7gOeT5nB
ZeO5p8Nr8j0aLbECETtCdQEZSJS/whSIwMuM1eX2s1FWUMC50QEchkds6NHE
I4fsrNKGKC0RZSmblWz6wQXEp0kfNWfmghloO/nBE97es9uGBx8ldy/ZMl6c
c9DiKqe9OSs8NUY7vnnVxGniYe7leLBI204mgcJSq4tkmCUux6MkidJvYGOQ
HeBdRs6D/6X0rPHUOEj5SDBhqyJdx9cuM+u7FHK3Xmh41E024p1u+tSAEWTo
5nBrIt0nmogR0gow2deX+SiLbJB58bliEg2nyKrQpoh/+Z4hf0p/YfrBtAh6
orJHWJSSvSADAq3vGnpFR2WlJiWEBhR0Rvo1rfCuUDu8gEfY6sPnLTla7CYk
2qeljosypKrzUfYuP0On/S3M8SVe4NTF89ARhGLMzs1XpS5TdIlnEy+Yt2rC
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
1zf+C4/QCF48QupM4eHkONL35yJETOZQlAbvt/l/B77RBcYRmOL3PEHyFNgi
xb/8Y/GZwEoUcSWfdDluNvcchOsGxNdrVnPfQYx5dk18/+MGsR8Jvwn2io//
Y+7X37N3NdXJsYja3fnHR43CuP2w2aBZosW6+CiWF1tQeseY5xC+9+3/Hk5r
r2n/Pte0q5lM8puvqRuXILGid2XxQb7tKlyt7iKDfKvXU02bvPd32nyW+ANJ
ASWH5uIHII/9BsbyrR5k0WV/QtGgW/+ExW6CzqCT+LTY11flo1Wd5PqIR/94
VedbdxAfP5Nvu4r4fsNyst+6nN/hbOX8HJ6H+YSQgYwp8LuqAzSCOutPxqy6
6DvumaCpFRPJfaQW8/3mEO2SQv38d+NRvb+EmvPr3G3MPvk2zh3EZW1HrGmT
wG1bHcQ7BdhHWzO6j1st7KQCy1+ltwlKvQ8ibsN3HlZaXVB6SiT1UuUKeYGc
xWJNCvYiHHvjt44dKZIOlt7s9+ZDIAQJINtb0Yk+/DSbIM5Pi0YSSfiOvPyR
93L1oMtb5GyTIMO9um8okPNMqNsipkCZaPPW4J+zvOIkvUjCCakB4ogJgs9A
PCGx8kIY4KbRQ6IxR9OSQRwRmU9RGjzRJAoFWCnNXJgPzj/PaXoyQezVlNuS
Cl0l0BrqNN1SbEp9WInpADzev3cFvFhJfoD4lxP2AFceGKErI+YkzTjml/nS
A0INspm6fqCHLwWDN4auYZfSe95IOxTMH7+9XTxaR1ERrA5tj8hJapnbj5b0
MtOkKZZZo9M65id8cv27YXA36S3sLqK6uVio7bdWLZQKQ05USYq0qZI0pKJK
m2pCfSnTcmizSDKBQSWP2UL02Tp2KsarSxAyLzFLOnwGs08H1Df3Cw1W81vo
RRNL1IE755/nsvT8tXP+eT5Xz7E69yHluV38IeWo/bg13f0S/b4uw8vd86lm
LIUHQF3Muh5baoidYvZrd8H4mf91HcGJT6/xdRolWTYR6ZXY1xdevIxO2tyc
NRr3S7eqMRn34PTwvpucuE1V29os4kq0X8SMv5yNpw7lun0dH7Nsu+5I2XOw
7OWD/uHKfRc+R2ldNyqr0QnEzKWkqZBRm3mutOqtfgORWMZDpBOvkU/omDU/
9ulHDA/2kt2gbMsWCJnm2DSJzMXgJGZDGWn5IAeGh3MlHNNh4ZdKcO78aCTg
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
z8+rbHz4Y2f3aHz5c3r1PIWn9w/Xnj8enAyPj49fPX71evjscG1/x/7+w/DZ
Ub9/c3TybPvVGOZzVV2nx4PHZ+vPf+yUR7+cvgWKevX2l8vTk/XdRy8env6y
9/rw1enrUXrUX18726iP337/7AXMfnw2Gv7yavyqHJw+39tfHx69Hb8dnW7U
P3YeA93mZ2vT8dHrd9Xwh+c/p8e768ONx0V68s3rV2vDf779Ybq9f7K+vdcf
Pt07Pb06Gj07PF1b3z45Ge68ergPp//sx87p4dXzh7Ca7bcbw1s4vWfw++Gb
tcPdw/6zAz7Ny8OXfaCXny+f4dm9Wttdg9UdAy31T0e7N7DzP3aeHf4wfLXf
H1292Vh/fTZ+9ub456c/n528fXz87PII6ePkh9Of98bvqjej4Wu4qY/3Xo+u
Xv1yuv56dHn8au1ydjR+92MnhW88edu//Fv63f507/hp+rr/6OZ4fLWejZ/9
cDo5TGE/nhw/G/5tr/+u3n/97grm+ALmOBm8vizTq29eneCK+nAWL2Hf+6+u
3j5NT54/OvvucDt9Nn231z/d2D+Z7u2Nnt6eru2vZad7G2n/8O3pL88ev1r7
+vpk/Gz9zeTpzj7S7uXRyeHk6PXl0+Nn+397Mx7unY2HxZsx7MMvT6/erA+/
Oz19e/1iY/j98c9b1yAznhwBaz3ZuLlNgSKPTi/LvSO40+re7k/fbjzGW38F
t/9/F/etzY1i2Zbf81dkVH2pmqjMBiS5yndiJqIkAzI2yDpwzgFu3egAoUwk
kERKsvW40f991j6AHk5ndlX3TExEd2fbluA89l57rX0eOye0iMPyIdPLKB16
M7eI176sXhJRRam5ncPyYiG1fSDg0/bkzknYgj1Fc2snhRfxRTUT5UqTRVwI
Q2x5wTxpsy9RyfouRji2tzOmVboQuZ8U+nY6FH+8i9PACqOg35WW2Cb21net
eCfu7ml0ZdKpgjTME6HFDxM9W8Ofi5RXO66zBH62Tu88Ljr9P949xCbfMyEi
XvTydNiXwhK+KHprl4t4WlZPvBDSFWzNS2eENuMJ+chfOGsv9GJ3bh0jjh49
MFOPxGIrpwXaYOxXeIcYhf0AvYDFiY1X0hNiLzlyQy4riScAEYSThFkVHZ1N
uoDVbdm8X0j4Z9QpHaD6cWKUc9+sDGCOTBZsiDc4yeK2gpVtfMPbsjIXeNs4
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
NeGjti3QR1WOiB5jzfZ4xg9XFbB+OJeHIn8R7G90seE5c/a96+/O1+Wtoeap
utwrWk5/xLCckeqNB7wBN7UJqiv7ajr99scoim6eU7D+uvIMRYBfzpoXLwYJ
bUbhjfLddQ3ixs9f31rYxPEW4UuqiFp/sx3ln1pNXWKy61B5ShnguTtVPRNt
eK4+tmu/tFxMv1dlut4oEarIQJvi/Pn9T23o0QBXyrh+h+ms6e1NvapSTUud
hWjDCMaKiu10bm5SKrBXJ1izuixU3aIL0/t4ekn35yvyslV4rLhNA+KbehYu
UlPqz+l0u1XBK8mSFMJie/j47ppQnda6m1qHTbHufDqpyxK9HogGSIjuXdXZ
+ycxCvBKTOBUZa1JY+MxFx/GL0/Wc6pKd90wSiwQUtHLS9DpUvXnRMdfWfhf
7x4adIWGXxUt/HP9xGNed/Vf6CdZw/IV3zw5Z9N7Mrw6hZ9dN1YlyykbixC5
XieHOjNLdbrqbGWrsFvoJoe8ylSe3bGuskXxCNZI32lz8S1beJVE/OpRqibW
6/qO3ygunycv04vyeHjW+a2bV1hzOZA/tQTH+FmhfV0plCbjJPWbb7XAeFnY
bva9mn4f6g+1cuT3U5hQTwDxU5T51ICfL1RLC1FXSe/klMf7tq44zTMeppIv
y2s2o/748Q1l+OGiIl663hSzDwklAz80FYovkn6Xn6Guapqi1K6KiXxgnFCJ
bsBtKOKr8uaqGm4TyFSJdhX70Ko/2RQF6xd5t3bevpqyOv+UVNtzHqRNRDTe
uKmz7hTR8RQVqi/AoM7QNitA6qN8oH98dzWbnxAgqJ7aW1WeW3eulboK8HUK
czWBlCd3T6h4eKPcv2tNRNg37+luKfq3tkU84FsrQj+dKpNT8c6spkj1OL56
w88NG/lnn6PekwG8/j21EH+j0WuhookfpSpRqFThWQ+VTbJmO12SlW/+51XE
U/F9SY5NEqP91k8/GpoKZbxNc6lmvm6IavZljvetT71TMad98gkTqPFNEq3h
828X9rwOhO2X1cxeGO9yuiV6/mFDpHSyWX/Qbi7oaz1zr3PZaC99sqaw6P3q
a13R2FTT5rdy89/IkV0S2DN9eDNxoJr15pi9kYZQJPuVmUAXXsaxejXlrLYg
uD9dD+Ila8ZrWnydlqd8Ml50bmDS8iUi9ZTTawLYqcZ9XURxs74oFTpTRRbp
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
IDtPAgA=

-->

</rfc>

