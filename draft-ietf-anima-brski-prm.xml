<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. 
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.
See also <xref target="RFC8995"/> "PROVISIONAL accept of server cert".</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx status code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error status code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx status code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==",
  "crit":["created-on"] ,
  "created-on": "2022-09-13T00:00:02.000Z"
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER. 
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is only a necessary precondition if the MASA needs to verify that the domain of the Registrar is a-priori authorized to enroll a particular pledge, or a particular type of pledge. 
In such case, how the MASA will obtain the domain CA certificate is out of scope of this document. 
In other cases, a MASA may allow the pledge to enroll into an anonymous and/or yet-unknown domain and then the a-priori possession of the domain CA certificate is not needed.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 Not Found status code to the registrar-agent.
HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used if the Content-Type indicated by the Accept header is unknown or unsupported.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code 406 Not Acceptable as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.</t>

<t>To perform the validation of multiple signatures in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the LDevID(Reg).</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature or another security check fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is in an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the pledge detects errors in the encoding of the payload.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
{
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "voucher-success" / 
      "voucher-error" / 
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error", 
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
This document specifies the status values in the context of the bootstrapping process and credential application. 
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize the bootstrapped credential information in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format. 
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y9+1Ybx7Yv/L+eog85YxgSJINvidlZFww4wcvGWGAcO8nJ
bqQG2khqre4WmNjez/I9y/dkZ96qalZ1tRC2s1fWOYexVgxSd91r3udvdrvd
Tp3Xo2wjedQ/+MducpnXZ8n+KBueZkk+SfpZNS0mw6xMnhXDLFmmh7r7/Wcr
nfT4uMwu5D38qDMsBpN0DE0Ny/Sk7uZZfdJNJ/k47R6X1XnenZbj7tr9Tlpm
6UbyfJqVaZ0XkypJJ8PkWTpJT7NxNqk7l6cbyebe7rPN5NUPnWFaQ4N31u7c
6VQ1PPhbOiom8EldzrJOPi3pt6q+s7b2cO1OZ5DWG0lVDzvTfKOTJHUx2Ehu
XWXVLfhjUIyn6aB2H1RX4zI7qdQHRVn7n0AHk6LOT/JsCB9OCnqqLnPXTDqr
z4pyo9OF1YIXD3rJ4zLPKniOl+Kgzk5Oson9tChhdgc5zrRKNn+AT8w6yofc
Q5ZBD8/ruuj+mJ5Nuv18cpo8wEnk9dVG8mw2yQdnNKch9HHru/Vv7z7kOc4m
dQlP/JCV43RyBR9l4zQf4aLQOHonOI6/V9xXD9YEHpmV+UZyVtfTauP27cvL
y576+raZ2WEveZWVk6y0Uzs8K8Zp5T79V02tpnF0L2kcnzK1nV7yNEvdxHZG
eVGbj2hWW3k1KJKDK1jFsZ5GH8Za5/BXWlVZ8q2dxat0NMqrbDTKJnYqWz92
v7u7dk9P5QBu2+9ZOYJzDR9Pz+hkL31zbz25dy/57tvvkodwrpfcTEcwpL8P
cCw0PRn+sx6NIy2HVTGxk3iGH2WjZCv4lncJesxGsIzJQXFSX8KNTF4V5Xnl
uhoPym/wAv+9Mo/2BqleULOe6uvbnUEBE8uPZzVeCbuc1XmRbOdvz13rGXzU
G8JHf4eVhpeq2Qgu9+CqNxl1LrLJDN6Ch0/LYjal34iKJPzue/rj7zi4Hkzm
Iz4IRGt2vMGPdS9PbwdUpzMp4MzU+UWGo+o/3rrz8LsH8uv9O9+tya8Pvn1w
x/16V379du2ueeDb++v35dfv1u6ZT7+7+8A09t2Ddfvptw9NY989fEiv7Xa3
e4oovr2suhfFbHCWld63kwyX5KRb/V5Pu4OqjLxangyw1+O82ujkk5Ngdg/u
3Fs3I75z345i3f161w3+3tq38uvDdTv4h3fufhfplhc0pX52d3Z2ut+t3emt
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
PxKTWWPm0tR17O2KOfasPtbociF33//J3r6kGVM1b7WMoCB+qX3YC7dMy9iD
bNGKXjS6g57suzFdX8NLcq0ky8lP62vz18mcizCU6PAsC4X3G9i1LWVS0VB1
M8SR9lSBG/m2bs/YvfNFjN12Ff9NTNt2vIsZst3jEmwkZ2VeOE/yB0URwQ3F
NZ0b8nzNd0sgvNZLGz9r4/uvyWo0iupOd+1hd/1uYI6X9XUm22yeyXaOueGV
UTglTwNvjoMkiqfwiTOONa0F6mrKrUP+bs+eb5nV02b7Z02uZ8P3Twgp4QTm
dTZRIOkoUDPrFgMvJneW5+hNhAVGt7gsNbaSTSoqiSViOmHxo3CBadRVXRTs
65WwZG16JWtpyTC20fmtuDIgBCkpwZT3euu99XWLwsbsASWoKrqqPG0ufQmt
uCpUQT2mG1UKSXX+DYzEaoUkSJPQTaIeSuFOd0JrTH5MQqHhfCnIKaPzZr36
MUK2o6nL5EM6KkrY2C1Ih4uj6nOKsckm2neFY2V/mmj2oUGcT5/TVP05NHOf
Y2NrwPHjFRuTimfajrSktqfRwLJYe6UmTcGp/Ct8i6pinLnqO1U0/bc9xZfj
uObm8NorVOV11pa+K6YNU8vKWclCj7kvJXDO6e1xOpnBIUZmobFx1YMRNFfr
mzDyheh3lUg3Z+IduK5aQn1WkvZqkniFFlLghc2gNVFhmGl7G/5/sG1Cn2Nu
k3TA0PRWYzUnX9HLXlsW7WctniTZRnb1+i2F8SBqQfR0xPrS7S1biBNgGXhX
zjNYMy4oZqucW4hgU5TO1sO04hOOHy0Z+iDhILs2LdliKQSCKO8GtFtzvA9p
NKnSaabqWhglmVAaJlnGollYflu6MgiluvZz2iV80VyBjzHjIE9ESipOPpiN
0tLaSUkVUZ+zCm2yw2kGcKXI2oZWz9XkTBLfaZCkMxfHVkCPLsP16P/SC6ty
2E2FhJ96YFhRU5fI+bRkTgTtizCok2JyNS4YxuY2TOoqq7vGaiCjEhItxnSz
VE3Dfesk0BiD20JZM35OePfmQJ6O/H3gpNSFwTvTTwbs/GyQzhvPM0miibkR
SBkFxPmzubffKI3t12twaH7eR7BeMpzZmkQh8l4UAeeTsHdM0vT4JrhHbTiB
c2EP9UcLwxx+2pw+BQtRPlqG1V+JPXWjhZgLmKhfWhggUb8UB0RM5r5kv1AH
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
Dq/vHF0Nt6D98/UnBy9319Lzve0XR6Ppm7XHdw9ePnn0Zm3044ujszd7vz/J
X4+mey9ePfzxxdreu/763i+dvb3t0daLl+vbhy/7R9nO0YMXR0+23qzdf/Xi
/PHF4cu98tnhUf949ObB66PB+vEPz34//Ols52jn8bMX4+Hzo/Mnj16vrf/S
2eqf3798szOEFvoPXry8b1rYO3z5pHo5fvf22fqTnZdH/UdvXr65++zH0V5/
5+g+9Ph2uHb/n/3D/t7RzvSXzll/MrjMztd3+j/BEz/s3T0cTx/v7ay/PBg/
3utv9+/1f5o+enn+ZHIIawqz2Htxp3q3d/R4djSZnh39flS9/h1nBGN4+eLl
OzOGtzCGHw4nj87760f3+mv9R0dr0sLLdWj10cFw/OSn/uRRfrwzrV69fVJl
4/4vnd2D8dnb9PxJCm/v9dee3B+8HB4eHr64/+LV8HF/bW/b/v3T8PHBzs7l
wcvHWy/GMJ7z6iI9HNw/Xn/yS6c8+P3oDZyoF29+Pzt6ub577+ndo9+fveq/
OHo1Sg921teO79SHb358/BRGPz4eDX9/MX5RDo6ePNtbHx68Gb8ZHd2pf+nc
h3ObH69Nxwev3lXDn568TQ9314d37hfpy4evXqwN//nmp+nW3sv1rWc7w0fP
jo7OD0aP+0dr61svXw63X9zdg91//EvnqH/+5C7MZuvNneEV7N5j+Lv/eq2/
2995vM+7edZ/vgPn5e3ZY9y7F2u7azC7QzhLO0ej3UtY+V86j/s/DV/s7YzO
X99Zf3U8fvz68O2jt8cv39w/fHx2gOfj5U9Hb5+N31WvR8NXcFPvP3s1On/x
+9H6q9HZ4Yu1s9nB+N3/Lu5bmxvFsi2/56/IqPpSNVGZDUhyle/ETERJBmRs
kHXgnCO4daMDhDKRAImUZOtxo//7rH0APZzO7KrumZiI7s62LcF57L32Wvs8
9h/vYnziJjKzh9j2Kjfox9Ls7oIy12elNRFLFmM8bgIrfXDN/daT+xxtfEQb
l1OZreP8dsypRybmYoRxN8d51I+5001sNoitau+awvB45bpF/yA0T5sJ14hN
Fomj1Rtrv73w0tLDZf/OI9vNfM6Wvsz6geU9hGXqJmW6CkuMw7Gfh3pqCxG9
PBrpMFj8/oKYceMDWrmxO8SwSF9ka9eHT1/4rVdFRo+8Pof3Z4QW0aR4SPUi
TIbe3M2jtS+rl1hUYWJuF7C8SEhtHwj4tD29c2JWsqdwYe2k8EJeVnNRrDSZ
R7kwxJbnzJM2+xIWrO9ihCN7O2dapQuR+XGub2dD8ce7KAmsSRj0u9IS29je
+q4V7cTdPY2ujDtVkEyyWGjRw1RP1/DnPOHVjusshp+tkzuPi07/j3cPkcn3
TIiQ570sGfalsIQv8t7a5SKaFdUTz4V0BVvzwhmhzXhCNvJLZ+1NvMhdWMeQ
o0cPzNRDUW7lLEcbjP0K7xCjST9AL2BxYuMV9ITIi4/ckMtK4glABOHEk7QK
j84mKWF1W7bo5xL+GXYKB6h+nBrFwjcrA5gj45IN8QYnLm8rWNnGN7wtKzKB
t41DIXYwwF08RFsWrnBkZDI/Fp7l5x5PJv2XUO5jzPA6siIpzCgW5X4VSiaD
IhVAJSm01POEN8G4ZIJsN4z4VEcvtuiFSKxqFMGzhUgnia0LrhVHX/ZGU2t1
8GSW+1bUk4XneHmxDjuVdI1syDW0RbpWao8DNmedLBBlvvMkm/jLgrNyv+dG
L+ZFwSUQgB8thjbaMu9Z9ERX/qaHmLvYhtUdZuZtkASFFZS6j7ZM0qEIxKKw
0ep4VgopCxYlpauJoD/CSMupqc+BaisuMpkYlogs4C7Hb3xfdveRHbGnQKOY
2MbKYyzT50dJkXQ8HxWbeYDpHi/gc5rXl0NrCYRwgBZ/vFv6sIsEeBTorO8D
Y6OOtYoN2IllMfjvl7G/9Xiud5iwIob/cL41x5M+xk88uNI9JGS7QILeTSDM
Xap5HcmZhKcTQvnCtuANe4+XaYeVafMEZo6DAmCajVxL3FMcYAHaYsg8lVPd
3AGt7oExo0BWDmINeDjQ3DJ3+NmbFfBzrefN8qIT5MxxEXl40PfgRzfCwLj0
R1z3A+A7VwhoMR/RY2r2CsFXe7LNFD4cLCsP3+qMO22bMhMxlIfwyMQEvvhh
J7XbJzCT9WFNsTDYDtHKn4ki9BFl3CLSYZkDmeuDgKeD2cSCnWjaiFtLRn4E
HD/9psN41nfNoj/O024ydEZRuTrGwpl7h9sBl7e5OGx0TP1L0KlWDwZ6Piz2
qYAfOcHhdjJbpFGiT4/wMBNtsGe26ARWVM5y7+DxnsHuzKMsLTtcpOW0tJ4f
OuNe0mGRJ1I3NlcY3biobsaYC9jvcBzAikyGNt2/pLplkT34dgpsjlQE9i3P
Qw8wJulyXDhGoo/B2hBhC7cMjcAULLZ4xzezLw+d6OHRGHd8RPnIVDH6ngfM
wmwDhrLdDG/0O9lmaprGyMYo8uiPd4CKTKRlzxF3EUs7qQWcVdEqQSTDz3eR
Xjg+5maMaCcwbqlWdMZGGvl8+yLz4iZeAOtUq5nl9fGvz3mxxOz2vGWGEWQv
HBzGX3rLxLx1XRF1fTN9meqsNzXFnpfRjWtZhkd+ZPFhqMFuHc49OZP3B7Yo
bsTCex4FfJ0Y+2WURw+RXnGhiRvPZkHIw2M8rHwu749yKQbuokCPGg/0fF4M
Zjm7G2tWyIyUWg7Wg3aKLIzzbPdGTMSoV32Xk9X9m3bLRoSY5qXdykKoOI1v
WamWKd8R9rYDf7dmYGkYuydmagdhZIsg17/EnfRJmPDpLigkWn9rBoEziXNz
DXj3Uk2wxr8f0RNEfyH8hUXcgbjCCDyQucP0rp5P+DTz0QZesExazgZPWKZa
tGyeYDLT7Anq1aIvgLk3Ief7tKiGYukxsIGOACYJEx6wDM+oBNy6QilvTAwp
hxUItmHHfpnq46Nr3BazYrVPy+09l04BPgA1kcjVelzeyge9sqdGtYgKq+MW
7CnWqnFs3q4DI+qHS94LC3c/FVU1GhYZE2E3AVf3jd2LV8BewrCMuoGhD+Kl
409LL0yOTpTqFebBa3zHQZuscmSKO4wR8bj7R40QwWp9D7zutfeNNecb3sfI
4oF7Vj7Vxi/x/Ld1pH9+8Qyw5oG/FAt/cBsm8g3vk/cGC4p5UmRaMt9W0AmO
yG+7s7vxy3RZlK4BNj8hlFLeZtzG8OEvGHeyWZPrVj/VHcWxuN0buMPpHqOs
T8sMXL3qpEb0BZi0ZHZRzWzwXSH5HuR81Yt4txcbtysEOBHnVoV+dzwr7yRD
1hVGMU61rebyVS8pq16Us1FyJ7yUC3Ncwo+2M+se+i1Dn7dDPnHEk++knyba
G7cOKo35n/99dd/gedsyic+uJ91z+JtvOYW/kHtt+EPwS/vS7sl4ScCk9xON
qDcwoQFtpw8xRXKjO+5Ufb8VMaLgY7m1ERZ9MWnBq3bYmbklUfPMjT/e6XDZ
1S5YRoskt7psWfVFfiFi7O1uajvbqPmGQPCDiLGCHOZD4GExZ2biKaacpCO4
CoafRTOzZyd436zc6HDhNVz4C8ggwh/IqM4E4P7LuPA8PvE6Y70N2X+8Qyu1
aiAEs0QdrEhyWIDUTiC8LYJ47A77u7DUc2bfH/1l+iroR1aKHt3i02hV3jNF
4Ixm5VSHS0MORuzCpXXfsCae7AWJBCgs+hAYbJvYVQxXhjBDPPvz0uwISWYX
GS+9AcLXgnERpsf0ICTsLYPxDf3c0v07touPzPHuHCOE8JvqfA8B4zLTuwvs
rYyHiESL+30yiTJf84xg8vkg/W0Q4CkpG9lRmWq7g9tZHYVZyHEBaWYxgLh+
N9VOUkwJMSbTwXiRTXxruo9t98AmDAIV3B2yyP22DLJ/0zF3DE8cjFqxN0kx
YPog5JbNCsuNcyjGG27tXri+e4H76DHAKcYII1YiXKQLKQlW9CZ0w6tgQ01S
4Mg0SEceDVIN9nIXcFNjmrkXkpkA7MFkcNvhXLn1faS9SfOWQZ71melYY1kM
0gB6vAPh6E41hJs7cQyC3zuu+XmNdxxmvCe8Mn2c5fsnzIs9E44fGPv9lGdV
pBVLaXpbP9/zGXokNmk+Pkzt20evZF2v3O3RFn0mdQ6BQOGphLDMQH9Dt3Be
Ao3f3hfa5n6JME2pkSWljdAWlTiCiDuCFh0To6uobmJPKT1k8eO97s2d2zfv
ED3hwQ9Lff3w3Fml2+TLh/X907Awtd/6/MNn/5P28mDdbef8sTc2Fr8d9H55
N3lZdP0nHm6mi3T+DE65D61f/eMmNQeDT9XT/PHvi8dkN57b+ri5j/S/Lq/L
bLKCdY6uyQk2KcFP88+qSOP1PZrfSx9+8yrNy/RjvE5Wc8rfn3e/fv0wdspF
ssutNLRF9pSDpBsKKDPcPE6dt1GJ2U+rVXpxGQ3ljmO6AW66WuVqP+n98v1/
qgX8/2pKkNGTzt+PX11NflpL+gl9/Ll5chZv3iX1zrSmoOvr48qnU2FLtf9G
ffh8L/jrT7//6Ye6fT/8XH9R7aTaNZtJP63Wu3jd7H9uD5p9/H4u9vzor/rB
qB/nHO11Qy7e8Cezs9dFZ2lbnMrhU0K5WVbdUOfbqwyb228xJj9877ay/7dp
33815Qsfb5O+/0bK9493bdK3yKNJVEUDvZp2PB1toKcOxkqE3vaFiPop146B
/1svGGyDOIgQX70nRGSeDP54t3kZL7PV9KgI/XNi9BaRT4lg8QLyqD/qTide
jNeRqT94msMedPEltae3T/TmZf8Qy9vD4wQ9ahNKRtIRi9gW+K1TTCeimHbG
1J5ixquOFJBGBkTHdSrEnlqFSIDDlie0aOcWlR2Zt3N30o+4nvlx6Ui5YJR0
mkRS9yldE9nVXJjmQebTHbiMjDsgr53sSwjmK9Z4AiWuMqZBJtt6F0+APEqj
OM93oeC9qeVtY9vyEmu1l7nwZvb4ECzZk7CcFQS6nSLKVVY8dDIxyUxu9PCt
1JoO04kox8fITB9SET3zQiW+dK6nu7S0hMuFL+39KJJ7a2ax7dTGU0YgpbxJ
O3GxcCjx9RTmYjOF+IJcAwvam1JWI1GyjViK2DejJx54/rSIbLGMPBccIjry
InsQengEX5gkJZiJjieg1YlVeeAyR6FHK2449tRknrSqKhQ0Ct5kala5e2ft
ucoiBoUzhPyAYnIeQesodcZlfuszwz0Ie+/LkjiVmMhhP8QTNjM8weXpPMHP
QcEGgSBu5S8ERrKXhZgrCJltauoTxlc69SIxvKFfZHNE142YVJDA6Saytws1
E7K3kUVqJXeIMRNhVpNIpD4kLdpQZbM8ehSBJX1EfbZ0eKw7vij1bqqD4+Up
xqEnubF9CLk+nJmFEODP1YswNrpXgNNZ1dw3nSdY+wLs1maTFFE3CwLBFXPk
JLJ4JAMoOHxG+kVKKbVJUP7xbm8L3VsHlMC3InQ71ZjBNryIeJJjXvIo5nqx
ndnWKLH3E4lexeJ+5waRZGX2gs/FDG1x1q5w5kJ3xmi15uvWBuLSg7EF4aSS
rp6uKcWYCMyqrGJ6usgZSc29WFj2tHDWHtmuFJP+Dbxm79nW2h1mQaxHUpT7
h7GebgTaiNl0wpzD6uAVGC9WREEodZZqvZAVnmRgItUTvSs1LBuSKXLRG7QB
zEts4qHHE7O6FzZ6Jp0QI4uRFl1RRKPUojZ4PoOXEOfcryDXYJNOkGDYwjza
gU/L8CjwBNELj94q0KO1XFgSf++EPIq9InoOiqqIj+IJUlyS1UXUwoLxXhaA
NUsLGsJMs8RyaDZztGHtLx1IJ8xFHjmpLtaYG49N+jo0QjcU5p5GN/JEIAKe
iwdhVUOXb8FFK51LfRML9GKJEV72H8OjA34t1onF5pD4e4m59PVCYrSD+IjR
DQIuXlyR72l8WOEIQQq/CA88T9EG5wn/jgTwh6P1LOd72MgKlrhB2+DbYORo
i4gxDhN3UhVgqweMQxxb0TAILHhF9Bga+xHGYTO1CB0qXwA9Ej2CN2QB8MXD
5zBOf7xjMgLc4RNhmEOwWw6HzeIJqx0sbucLZz2z0gJ2rUkJBDPEhi2hcs3q
C9q+gzd+YbDdrQBKasLQu0LTn3lgwaKqCdDKSeGJLnrnGtmNzKMVdMoWFhAI
M1oHspJpUUj8JAlfREfmmY1v3Y9zxhNLdHnwO8a9svy8J9GGAxRQlwFzoM7I
pqUo4LlAjyC/DRjmjpMfxdwwd0mnohl/RFteZqK6x0yTVwyFJK8Q5BUiNvYQ
qSLmwBpXbrkrqgPs54Fb8CMxNb0Jpb15uW/8AhpKbjv1XESw43TO4LuEoi7i
XWpufdh0hF7age5MZkM8BfhSdIG3D7DqDXqUxVq1l3IvQ8KRPM1Y3qv44vc9
5krGVprFR0uLeDaSpTME2sY0uuwJ4L2XtjPEUzAX6ondhNowSTNgHw+LbBVb
bOIGkPbDvh1yocXW/c4D/gBl7yStdeR4131kibnoeF0J32Z6asulEAlH5Jb7
yC0iS5bbAL5tow1+oFPSDV6hR0PMl51iXKqhh1lzywyDnx5hOWoO8AkfbYJ8
hK3mqQ/bOQigJCxSJMd+FBss4IFjM8O7j6Gve74oih6wXqbQz+7EY0m5nwSc
a6leSZn3PLQJCLXfCUOsgS8CUVaL6POW8wUWMY81io3Ajz4Q0Ya+R+QWFNlW
Yx29gD24cq9J+E4snQlfRhNxtB45nugV1jZFvII13AtlL6Fk67RTxExmIpRb
2y0KaOntKDF7x3Dh5VDvz9GdiIRwAnjgSBjWPSxSuPb+husYR6h0B56WjaC2
wR0QiREt/MCas2XfDOD9iDe2X94Cn/pGKKIddKWV2ltPdLJYyu0qMBC3J2Qv
wHr0whugDVIuEek1YiHpDlF17ZfAONvrRByjrVcW2IcPhFrRohjXhZ0MLT8h
ewlFudFlEQEd0gy+fQyX1UDa5n46dCR5ZmRGcloI2HTmu7zqCj3tch1IP/GI
32QcvA6x3xJfxkt4WgFf5tEIXOWGLfqxkNkEvv6A8djEFvyMA6np9wYbsjwj
OxvBa3Yu4e6a5zTWkYbf5LGpHceFiBI7e5EiijBO69RWc9GDzawSwzz4RbTw
bYYYGcF++IGQIV0knGYbUKppOyjdCcUjjAPYSAS/irJZEb3QSI71cE9LGpi7
CUW8GbAHFjpJyAOO4AoDUZp7MD74RRUAJeUUUXckvLnIV0dRMJvS7mBhAWbi
ieYyFAz8BRiIt0vS1/gdULKoEG9M9NvBSKbPkZV6iPSGCO7hVxGeWDBgTsgX
FvAE7MRKFy5UPdjHA1kdcaTbCAxHBnKP9np2RNFi0u/C6jG7tDBHC99OHMkt
HZLfItpgZKs9oo0mLYo28ADgS+/IwT6men6cYiSTSbYXQV+mmr6ZmhHN5ios
ogdfRFs36AfwKy3QswGhSTysxEzFadjDwxRxGnZKvcD7I8zmeB8NvQxxewW/
9KcYSZlvJZCePHME3157PBUuMVZEkvRBCutZFmrpbgWuAL/y0AZa7mMTxL4d
voE2sDk8M8QTKOoC41KJuQRbt6Ka73r8ViJyR5hNP6A2LVnByj3sOPVmyh7S
HGw2gi/HiLrP46I/QWwge4nhFXYMvlv44HFg/WwwRcQKCnhmUHzhJeXhGZjg
bQYeNxQGsMZ28EZokAk7whrWsxIzYQJ/wDwyh54Q6+EO7wQ6MMK1B/KKoLxF
dKm0MPByoOTeLwrhLjC7GGlE0Xv01IuLaKXGpTslWx0yRJNMYjbB41IZ3THf
lewQIP7gCQfgLBelq6EX69or4Jn2Dl4sBDGyCHxWIN5UIoSNCqtYEzow3XEw
0oju1nZmZvBtZw1cBkpGm8gC/wWjlbRknuuYW9rZEB8L8P7oQVrw2UmWQekc
uKH10PJtbGWI/NUQT9wBqW1RZhlYPQcfXri2gMVmkwToXTFwxsHUorwp1E15
2xNlD7NI6BBFUBBrRJmuhPaYQR8lJi2pO11aUocVzIFYfojR3YKvCj7Obxns
w8Hc6LCFIc+3QnTYMCz3cCHwF7sANxAdvNEGQm2CSUo8EJS6H6foUcGhqAQi
/RD48gDPFHKZCZF3d4QW01znAdhorFeZwMiTmsBTc8RtX2gCnpluaFxSinmh
sDLwOM+WZSZdRLKARlZ3oPK2HgvYDWwUXDLcq4jXcAcBLwA+T2imI0Ru4HCJ
eDOpEI+stTD2D4iyG2CaFHlFGyR8WMOG/Ao2TCgZ429bxGkwgUoQf6kegNQH
xP4INmxHdxb8qrISsoc7MYYF5inQgU/AEAWxd7GDClvTtgcw/zAEOiXwAHgW
xTwTvN7W5bR0TFgarL56FFZ6nIH3ioKsQayAkhYi/xeMI1kH+RGeTDOBcZEU
PUhbTME+/YJ5aOWdDPrClQ4sKprD1xuEqmwVrwpHpzZglC0foyAo2l+Pg5HR
OMQ+vCKxGgakbDrlQbn13ZpT4XOOJQuP2EfAYS8bXegMqAiEMoHUeoZ+84Mg
FlbueRj0d8SAwAY8sSSE2o4kxaucEQ9cg31IYkHOmnyTmVZH3EG1GNQroCTl
U2FRQElanMNsg62X1YiD18WmB4II7SuJB1YmzVERwIrHwtD2aSmoTZR3f4po
McyKSJtkrljpYQdjYoWH2Z0jmdnrhIv+cSY9a2pvA9b5491n2qyCcfA2fCGg
lbINFJQfigKcuiqA1OCSQsoScZpniLpsAtbuYxy3QNDMvaOYD/4Cxa9v/Byq
n/QybNK30gneMRdaD1G3JwNT2zOlC3oBKVXiDq4Eyh8Vi+tSBrtHvJ6UhMI4
iFNip5K4JHQijYNIaMONqfzMJouE//tu4dBc5qSPEvQopfwB52qdBJ6G2cTT
JjKf6rx0rKRTkDbxI576tOFmZvbm+AwiP2ZbxzjijcpeOJBgNbO8G6jhwB2m
PeijEewDusCjyP8IdPBpSw4iP/QREAsYF5MuKMCHbehMeGMGXSjwhNuFm/eg
pBi8HYxYQJGDL6goS9GlxDhZ0PxoK9ABflXBGqo1WFtXKT60sspd+C6p/ljT
oNEE1A3swdh7ZPVTyyGUDICaMtEt8sw5ZtsP1FyCD4NL9XNg3CHMWQwOtfah
8jDba668gkFpOoTkYCRgZbDI5A46sYiewlJfwTPhuV6eWKRhudEbCZs2DsGB
oL0F8W1wTfQOSHV/oKwA13qkYSXiuETkf3EL6LU89eDrw1Aj3SgKz4b+wWxC
aYIBIcptiFtTvIE+2k213kYuLZ4UEeENOFTxxV8wyr8Qq9dCMDI9HJNiyZ1J
gNn2LbHhiPyi3BlSCCh2tKvIAmWRwDgGz5wOPZGYDuRzuqFtK1PM9K1wybMC
R7FRXkBhiQqWXj3E7UjynlIWpNlkeTuheBXyLFdIn+tCQE9ba4wUeTttRcxm
hNrk0zq8rsgWjFdExoAvkU1bvDD7V/gyyx2FL/oISDSB2pXimGuEL77hAofT
BfBFhGVvEACxeO55iEekZXdoA1i/h/GLKP9iC/AXD/EFzFBmHPxFzCyxHnEo
C0HZEx0WRfaUYhwqQiggvdNGmx2QHkNnrSXpaY8Z4JI660M7byRxarMniBEz
HZgKHoF5IaU5IC46Xghi9bRBy0fEC1mZeS7lghjlF4ACsH6oXQ1WzYFQaCmi
7IRR5Kd8HhgHuChZw0SxskJsaIsXYqZH+ZctUHK850tGCpxDH8VggqQ0Pfj6
MeS8lxDOFkBJCZvOUzYDp1K4LKqAuCjlXyiDg/mXWchLihaRDS45TwRw2NB0
aVEuLKNoA0aIXhbkDcCf3ImhJ3fQdJuA4tEkLmAfsDzPqoazYRqAhQEF9w9B
AXwH34dnBsQM0R7Iq8pzrQoWyR5SfIqUaQyUAv9AtEhF+iXI07mbi57SBdD4
0I3EPh4JZ6eF8kwoiYpyhruxQXEdwDHsj2gVs9pM9QoqPypgaVpkErMId7By
YoqU+8Ds3h/xhDnaF/IO5XPvD8GkWLBOP4MFRjPKv8DiwEk10UEb7NhyeDIs
EC0qGNB+k1KEh9plgHCo4Dg1PAv2NId1EN6sXQueSfylgEbtRXdeHBjO/Rh6
DWo3AwqwGUAiKLN53OlzCW0S6OnEX0QBfBkYlw3AwcDqb5kr1UozuJGwHLKH
moUVvKeiZ+EhJFQOxW2mA0M7qQ8WFgjFXhErCo/yL6LOv4TCkRT74WkPka0z
sI21rDHuEUg+8GvPnMRam43jO7SBMoKSIh5XuMuXAm3IAiBTDv4CP9uTRRHG
DXgJJrDsP/kYJyB1Doz74lMveA/8S98Jy7ohxKygNFmHVH9tD4IU+QPsxyff
9ZcsRvSYQLuuZ2CGfOmBD0Mtc7B+BG6+pOws2jIBSsZTtBCxz2d5eMBI6kBq
4WKugNRCaJSHSr+wpRckpt4LaDMsxatlRtxhovCFpQb5RYRmgEOBz/rAemiT
DAgl+RI62mIitqsC1n8QNpQMmGQMz8QTOkHgsBnlvZ9JCyXCwahv86nhDQWh
Q1GBNmQryueyJfjbEroSzCc29S/JEDGyk4HV65THgl4CSgFpihth060N2sHP
MY2YH0SsLlDcHC/6YECWDNGmmLKzgQXtAm5w5zwAydaeBKpQ3huxf7qfQvXD
swjrfcwFIlZ4SO/68MwoonHjgu/ARuLETju+LDoxbWC0e/OEh7sIc5Q9JLaH
cBlN3I5XhVr2kKptqlVOOvpiA/AILQBHTzfcdu4D9BBvoChs0woH8J2iB9oI
7SrhBRvSz0prkFKgOFxuSWnck43HFEMVExBd6GknBSMiq3MIL0j19aGfrZFA
HNaAtwVl7xGfcg8xQtyEUA7CRgQD78DIZjywbEQTaoGknIdzD+wCx+Z7SW04
sYkW+/UOYb/KDkBHJsv+BHgr4KlhQLn5ID8KYN1UD6W19ZeOj7kJKP4ABbep
CdS0nCPi8EjNNhArNsaIHs7It7xnXlrgVs4LFNlOGJTflUu1UXpDWQCM6BBP
oMx5B7a8UV6Qb2FhGAeMC/G6kSBfRx/zlDJZW2oLLEqyqu5FRTlnTxRWl3IZ
CWWMl5lag4DSsBF/oH4hWcmvbCh0w5PwCq7y3ohFXJtB9YHpQUmCt4EBwSMm
iBoUfzoYSWh4qBnwOKgfk9hHTHkpQVmCyg+UH9XR4zZnGuYKVg1+ZPkLcKJj
vxsG1gPGIQQ7RXRxntRMgP/60GzAvIDyUvV6gMBIIf7AVxkpqXocOu6e1A40
93oEvBGa3qWVF8pa84lqc0gan+IV5YIo00lZelifqaPVBU9slzKgwH5hAuMo
30tMIOcG7ZsBG9HQ20JQLgTxiGYCaqLDjYpwZKLy/QW0CPXQqoifkE1btMJC
OWf8HRSBtCvwRueUo8/VihRxBqhJsVX5f4PickR7fNaE/b7p7BHZwbHTCV+g
N/YemGfFiV6BkxFy9w5QOzadFHBsjCTlpQLKKjHhIb5UtBr0RNxSlMJyRYZ4
ZEH9cvwdlnvXl24egY7tYzDqNa2rMcrwIdRHXqoDmQsxAYfQ8c6Ra1EvMsLd
MV9Yu9QivPEK8ISbcOHtBGXOLSh4xOlsHerRjsEeoMTJHizC/lh3bDapeGxA
wZRbshfyCrCyKkT0wChY29gqBDz5S0S5Q9u3WJhYHq3VHMAt7ZD3KDfGhRlt
SC9JAQUuvEgUKwO4g9l3tjzfc/KCyOS6BL6IYWp5/qxMu7VfiK1YOrQGMQa3
8sc6/Aw2i7kgVkb2ARtnUMPQSwvrAep5TREW7LQgzSpiWg0Dj8tdvVoFslrP
rGICdPAwkppi8ZhtSfHpKNbgdbm0PFqByChfF1EcxvxH1IsFekUM3qY4DOWJ
2RQdYfd2HAgG+5GkdsCwGRBNkH1RVCVeVw1YKaDhM1LYYIaI7FZqBYHwXMVW
Se3QGmcFtUMMee9R3sFDQ86cCuOiWBX8QmVDwFeGqX3LiN9CL8W0pjUz0YvC
eYJlguV7GIfKU2ukBbSmQbqB8lLC7AHP0nwGT4RnFgrF4YkBsa5ch2eONdHY
NGkV4jMiZw+eLYb4XObDjxywCahZEcIvbikLfYjwjcQ293IJVddhfiTSkQ9u
MzNv54LWF21t7xrCjk32RNYgliqq1dnWhqVreyiuMLZvaX1gIqBsprr3LAvh
sYLWP8GFDHeXDAViaPSFB/01cW9vgpHKgUAh3tGjdfvkrh8JzGYkt5QFuJ/a
hQdk3wlTjIAvhA6RW9YHMTC3IemjitYbd0CHdcz3dz4d3jKYLilrL72tkMVT
zCsdPO4hsBkPlvBty6lC3d3PhCfHOZgireZ2AopY+R5xBgo0vz/wY59Y6jAh
OwWeIPK/YCRhs94c1h+Btb1QBgwabyLN3hfK1+n+1GYCOnAiBCJU4FHOx8Ic
MLeoOkKpus+HqalHSclISy+gfgJ/UYTy7vfmmB/m6K2Dfq+O+eU3+PnZDVzt
+pgf7e7obkNEtfoYnzzUW79dXm/9nsrLrd/FNrqjWX176/cD7dr7d7d++xHl
POxIP2/9RihRW78Fz+SstCx3QoyZNO55K3j81TEKtOWm2Qx+46udp/kBzJi5
aqcpeaDZ++dbwYEvrzeDv94K/tW+UQ4NEw37dOywB7t6IHa4Oogl5tX8a0f6
GB04yHtlvPAqikf3nUfNYYnBJg9HyAZ5+zQrP2MOCm02sXSeF0+Penrj6cWL
OHpVqrGFq0XdaJK6ooxuxp17PYA3RqYbeDEiydwzoPxld53eFS+pBemv7VdQ
Ml/g2wPMRd9rdnkyIPV4frn7EvGoH+XNRm2gojraaKQDvoxexJ1FcfUQLSKX
CWslgvTet1frNF+9RHepM8utvD7yR6cuPVNgti3SgDd45+PM3u/GQdgNMY6s
gESxhJHkBfcKq4O5qo/lLPqbcU4/e0uJeFQ8Ym4G48ISvml1MNtvbwXX1FZw
5st04S5zY2bfPhGyjsv9wxQeAG/TdnuxzO6ZcXsUw2LHJpYfLVc7Pgk1xMFx
Cp051goG1tgLF449ov0fRrfn+dsXcPFS7dBYyoJN2GSlRZaXsYW3mhUOQxyO
U35/GAmz3mGljss6N7S3dyyy4cVxWUsSg//iD/vmmG/pwOQ+trdfAr1PR476
tK/kzx1hIF73bbs1u7CPC7sFS6yPMKgjC76tPIeTtlcHKa6PUdSHmtb4mbNJ
5gERgIfMc4v0Gwet6DzTxVGrf/GgFXnjxVGry4NWE7SBw6oWJ1QCil2hFNcH
42U6GsN2rT549NC1o464c4+JIW7kwjJiLWNhKbRIOtt4vh0kekhrAMe49Eo+
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
2/Uxm//k1q2L9Blg6827FPyAjaV0uunQO/rW7wc8qQviRUuRoJ2gnh2vF5m7
o2syRoDTs1LbG42kfgfCNa7FfuRALr48aNGTqzkcQchlSy/zi8rHzOZep3pK
J94zngqKW0GEYY4s33COcPpKwFEm/m6eDosdhbVzkNS/pB13HS89Ck6U6t5E
BwoxInAX3CAKp73JyIbWl0ouxEO4/PvUfyxmwSo7+ofPw+Tl72m4P96sqnzp
PPR2f4/iR3u9sg+g2sf+xhh9yn+7W09uj+FcRmvBfg1vhnfTffghNtdmMv/9
O4zsRMRq2vI2E3vNor5BvYgjqRs1h+A0q7UqPDOoS86p+szvzXS+pVofeCbV
nKZ7Urez/3r/3z+Cqfw9q78EAve0XuGb9GW62L3a4t90dr6f/N07i7iVKsCe
ruNP2/da9/2H/331i95/UDmR31M6kkw3oZ4vYc1mMRUmr+J1XM7oUuyf6iul
0w+r5c9Ev5p6YFQdjAp+fAL2ZUu6tFrdtnyqW795nr3/8aZzestsXxXx8lSx
QDG/+q5yVUi8vka4KQx2eddv72Pvo15Xu7/4jXF6RecGr2CzcvXSHiJXtYfR
wsHv/ffWav1c0lFluiiVqqs05SHPJVnaO5Bjdct02+4eHmq2dxLP1usV3fKb
1tceX7Xs3I7bX/C97uX3vnXVf12cuC4ndv2n09N6t6pXZEN0aHy2LudNeUmM
3Q8X9ebqq9N/+OX9D+eLtNUQn35/VZyu1genP86204+ndxq/Xr6TLk9tay+t
Z0055qYDqiY71QtTl1efCl3+j/f3VPqznu2LkosbqjhDZVyaa96vbnI+XZj6
D3z/rikqSibZ1itUj2hrL1zdA98Ut5svyYrOk9fpvX7DZV1HdRW0KrX4xqyc
v1S/8O+zSrXrafVUN4NmbTt7n88O1zXxritnN4MAsyvxVCoK1bZug+YZ6lU/
dmmK75vp1q6rKig7XjcXxNKh+7rMwiy9LDXY3i98fkz319qv6ivUz8VFX13d
3jxzQ7eRX5YlOTnh+YkdGPi0iJsb2dUdAfXl5bNT/R667JyKdaC302KOhv2t
LiumBqwp//r+p/Xs53PTL1psfPX8swAkf31d+KSZ83PZr7pihaoBooqftfcY
HOoKLHW1lGcA63u4zyv5eb4nQdUe2s3xh/m2eS9Vxnpdjms9e1nls68u36fb
+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
SJuIaLxxU2fdKaLjKSpUX4BBnaFtVoDUR/lA//juajY/IUBQ1ba3akm37lwr
dRXg6xTmagopT+4eU4nyRrl/15qIsG/e0w1W9G9ti3jAt1aEfjrVP6cSoWlN
kepxfPWGnxs28s8+R70nA3j9e2oh/kaj10JFEz8KVQhRqcKzHiqaZM12tiQr
3/zPq4in4vuSHJskRvutn340NBXKeJvmUs183RDV7Msc71ufeqdiTvvkEyZQ
45skWsPn3y4feh0I2y+rmb0w3uVsS/T8w4ZI6XSz/qDdXNDXeuZe57LRXvpk
TWHR+9XXuqKxqabNb+Xmv5EjuySwZ/rwZuJANevNMXsjDaFI9iszgS68jGP1
aspZbUFwf7oexEvWjNe0+DorTvlkvOjcwLjlS0TqKafXBDBKQROjO9SlGjfr
i4Kkc1XKkb7tR8ETEcwGwX9+axC/kSNrlxJPVSDVi9olSPL+tsx8izVAw4/v
R7VyrOPiJVGoH07fu6iTerJMuqT8Uzxt8oOtj9SmA7yKa1Bt397wAYpdFQYi
nmZvzBiGUY18cLGkUf/5P0753Dae1FEV4/B1RoL6UDv4MwG42vpY/60uhkol
Vr//ls77J/74+Lcn7g/pFc0ra9kKXKy1TR3A3tQ9NR1XTTjXtz5FF9jT+tyM
waosn5etWDyNDr6+U/evXy7FXfWUoKhhSGr9tKwrdoJCfnjyH1qAPbE6opZU
njsB6mXkrz+3IXizWU3n8Xb2OpSoFcLaCpS1fIpfVuuafxYHNblk4tn8M32s
iA8XcKWyzbVFKHbZmIHKr21mV7+jVqwvl5CJ28wvM25fAT21us2LxdSGE1pf
lt1tOVDL5r66U/6CWdXus4UKUkWUVUXzk7Vssnl1mo/X5oa2XIrN01O7v7z/
sYf/3v587toZLpqQVqfC6x0kFwiyAWPefihUXu6qWPgnFZO/asIzXdm/PS3h
rShnt3mjTb9SWxoW8Y243CDfhcZX832xx6R+J00uNfW6JroCsIf7uxqPz59s
zaBtSOfXn68FzsU+iXPE+1MucIrpX6X3miX01+B7tbyGB5z57ZuI9G+bxilV
2KSJvm0PfgUlS+PdFvV9b1xguYq4FBhOxPAbzf3TSeZ6YUq5qloXm18tpqpF
tGbNSVlNvRZ+uT1AgT8VF6+3PzTpwflGLQerjRXnZSM8gBzx3LWLHNOrPl9E
VRISjX02oQXju9yoTGA77K82LFzghpqGjxdUeL5prJ/AkMZtiSB+BYpvPPU8
m00T2ped2W5NhJq88yVlunzOxzobtj6VeD/p+XYOWz94X3Osn+rUTkmZeBqm
n+vM4+Vy/fxy/bNeDtg0CZQTLTvnUlR4vyhhf3aXU8ynHn2g4tfLi+/VVbcV
8oCtqATaBWH628eLL3F2D5Q/W5aS1wUE43atypC3ipEk3nURjiZwYMb/pkTV
a9w+U/O2XRR82jIl2zjH/9I4tLFD7XerrbCVYR8vl2PPse6a7QUZBmfzXs7W
Swrfm8uu1smMU8sunls73XyZzl/m6TM+ipaogPT1bhTtP77K9H09h2QV/zen
UHkwLY+0dCCmAFEV8fS0aHXe5Kd/7NQIXifrT31SHTh7ObHJZZPFbNPzakMI
fJnIiSpL/mplH964fNMgVOGbJi2qJsQFYKp9kg32nnKmp9F/pYMvofLkpY3z
ntClAZZf3s8+fv5Yc0XaNlCCK6gi8jSY8+S59cwmI3SV+28NaOA+nRuvcuH0
FvDgDAhC/6s+caH28OMvLVrUttBm6Ju+tei0nFHJnRjmcOVbp9lsoPNiif6i
KHyd+1eZeUqRb2eniVXDcrF0//G9T0RjtnxjawstQ1CeDhpVrfUgcCbzOqOt
tgM0K6+0irZvVHS7Oa9tHhpC+xGgGlfV/FKWbC4zEWfKeBXfKddycgo1qUrC
1pXjb297lIgn/aIrAvCymqMLq+ekXlFeN5tD1sqKT3tJpvPZ5nplI07oZdMa
3F+vbCSzGnoxLpvqzM6aOaoXmWnjyKpQ5vLxtA+i3XVBu0muU3MX+SC8QKUE
41YopGoY67efGcV5jn85GTGNzXm66tpLbSuuvWLzlRHQMvRpM/bJVGjBE5O7
/y6QKel+tadFAfyFilJTtJkVavWK1hObp5/56SxVKaGrT7QxT434eeNPO2a7
Zk+Pir/kr2dR1yzvb2cnpkq/aZ7X7JI82Sch0mnh8uOr4LOMyyYRpDRq84hm
X1rjXIRL7wm+4gKdXtboRUmp0/41zONme7kZuaZ1zQa283Kgyouvp9mcWk5J
9JPqa7GtXSE9IylZSz0MeMKnDb76/unh/k26Xq+DnyCvzhqp735nIk4UnITf
MlnB2E/J24bZx2rrznzTbKZQRrwq2rXj+hPXzOsy6XkVSBu/OEeZOlqfIXxD
Io0UR631lB1dO5P67rnjdV00DGTRDnSDzb/U6YmTqFQ0pmYS5y3xpxd//I4D
qLRLk2s5O8A1bBDuqA1nbeK0UCvMzZZmte6rgPW+XoamttWrDB+vn/oKj6+s
ZVacN2adkgBq4upRVPz58huNvjiprSvJVxPQBsPf2Gt9Md400wpYP50DgFJd
F5HoMiK0oLT5OvR8D2iUXPlKo7RLDb9cnV+olwNpF0Jj4KtmcUcl+U78fLdS
PnFpHq1/bF7pnkbwFbPT2LebjlfPm8sMWo0w7XnemiDDQeo3zJoJr9/xGm6+
in1TlcZo6UAyq7dH1RKRVroum1CSbFm3FfcoR6M26xC/W21Pc0tEqV4CO7kh
cff6ketzcK5n9hLSqrhZulNdw6eteqVPP8mrc8boOhT9M8trmeb/C+Me/Cs2
3Vp0zXT+sk2/suj/8d67INiIBGv1jXYpFC95iza92bzktOG6BtpkhahHhHBK
2wqaQP5/AB0xQFzYVAIA

-->

</rfc>

