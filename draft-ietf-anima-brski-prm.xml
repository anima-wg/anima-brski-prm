<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.34 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-09" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 116?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 124?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of the BRSKI registrar in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer site/domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer site/domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication. 
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher-request/response as known from BRSKI and the enrollment-request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.
Note that the Join Proxy is neglected in the figure.
It <bcp14>MAY</bcp14>  be used as specified in BRSKI <xref target="RFC8995"/> by the registrar-agent to connect to the registrar.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="480" width="456" viewBox="0 0 456 480" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,432" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,432" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,432 L 424,432" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">EST</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="368" y="404">Certificate</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="332" y="420">Authority)</text>
<text x="448" y="420">.</text>
<text x="128" y="436">.</text>
<text x="448" y="436">.</text>
<text x="288" y="452">.........................................</text>
<text x="236" y="468">&quot;Domain&quot;</text>
<text x="316" y="468">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  EST   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI Certificate |  .
               .           |        Authority)      |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar LDevID certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a weaker assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the LDevID by the registrar via the TLS handshake and includes that LDevID as the "proximity-registrar-cert" into the voucher request to allow for the MASA to decide whether or how to respond to the voucher-request. Until the pledge receives the voucher, the registrar certificate is accepted provisionally.
In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and takes the LDevID provided by the registrar-agent from the PVR trigger message and includes it into his PVR.
This allows not only the MASA, but also the registrar to decide whether or how to proceed with the BRSKI-PRM PVR.
In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information one the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
In this case the registrar-agent needs to the IDevID CA certificates to verify the IdevID certificate and also the proof of possession of the IDevID private key by the pledge.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its LDevID(RegAgt) when establishing a TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete LDEVID(RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar LDevID certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> section 4 with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the LDevID(RegAgt), as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the LDevID(RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA can issue the assertion "agent-proximity" as follows:
The MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided LDevID(RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
This agent-proximity is similar to the proximity assertion by the MASA when using BRSKI.
It is a stronger assertion than "logged", but it is weaker than the assertion "verified", which relies on ownership tracking.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> handle/trusts pledges IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication.
The distribution of IDevID CA certificates to the registrar-agent is out of scope of this document and may be done by a manual configuration.</t>
      <t>possesses own LDevID(RegAgt) credentials for the registrar domain (site).
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar LDevID credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to protect the interaction between the registrar-agent and the pledge.
If TLS is applied, the registrar-agent <bcp14>MUST</bcp14> use the provided product-serial-number of the pledge for verification against the X520serialnumber component of the IDevID certificate.
Based on the locally available IDevID CA certificate, the registrar-agent verifies the IDevID certificate as part of the TLS handshake.
Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the LDevID(RegAgt) certificate and the domain trust has not been established at this point of the communication.
It <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification."</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own LDevID(RegAgt) credentials of the site domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar LDevID credentials of the site domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credentials indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the LDevID(RegAgt) if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="voucher-issuance-by-masa"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar LDevID credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar LDevID certificate as well as potential intermediate CA certificates up to the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>This signature provides POP of the private key corresponding to the registrar LDevID certificate the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).
The registrar <bcp14>MUST</bcp14> use the same registrar LDevID credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This ensures that the same registrar LDevID certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".
<xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information. 
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge. 
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5b" in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5b": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher and LDevID certificate and optionally IDevID CA certificates.
The IDevID CA certificate is necessary, when the connection between the Registrar-agent and the pledge is established using TLS to enable the registrar-agent to validate the pledges' IDevID certificate during the TLS handshake as described in <xref target="exchanges_uc2_1"/>.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="368" width="528" viewBox="0 0 528 368" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,336" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 72,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="108" y="260">supply</text>
<text x="168" y="260">CAcerts</text>
<text x="244" y="260">(optional)</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply CAcerts (optional) ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status

]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="pledge-voucher-response-processing"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Validate the LDevID(Reg) certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert")</t>
  <t>Verify registrar signature of the voucher similar as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
</list></t>

<t>Step3 and step 4 have been introduced in BRSKI-PRM to enable verification of LDevID(Reg) certificate and also the proof-of-possession of the corresponding private key by the registrar, which is done in BRSKI based on the established TLS channel.
If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="pledge-voucher-status-telemetry"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "pvs-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate because 
  it starts in the future (1/1/2023).",
  "reason-context": {
    "pvs-details": "Current date: 1/1/1970"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="pledge-wrapped-ca-certificates-processing"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully processed by pledge.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5b".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used by the pledge:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the validation of the wrapping signature or another security check fails.</t>
  <t>415 Unsupported Media Type: if the Content-Type of the request is in an unknown or unsupported format.</t>
  <t>400 Bad Request: if the pledge detects errors in the encoding of the payload.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax for success case 
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Enrollment response could not be verified.",
  "reason-context": {
    "pes-details": "no matching trust anchor"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), may have a list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="pledge-status-trigger-registrar-agent-to-pledge"><name>Pledge-Status - Trigger (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="pledge-status-response-pledge-registrar-agent"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished, or a single onboarding state may expire after a certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8615'>
<front>
<title>Well-Known Uniform Resource Identifiers (URIs)</title>
<author fullname='M. Nottingham' initials='M.' surname='Nottingham'><organization/></author>
<date month='May' year='2019'/>
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.</t><t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space.  It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t></abstract>
</front>
<seriesInfo name='RFC' value='8615'/>
<seriesInfo name='DOI' value='10.17487/RFC8615'/>
</reference>



<reference anchor='RFC8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner' initials='T.' surname='Werner'>
         <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson' initials='M.' surname='Richardson'>
         <organization>Sandelman Software Works</organization>
      </author>
      <date day='22' month='February' year='2023'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that is signed using a Cryptographic Message Syntax
   (CMS) structure.  This document introduces a variant of the voucher
   artifact in which CMS is replaced by the JSON Object Signing and
   Encryption (JOSE) mechanism described in [RFC7515] to support
   deployments in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-06'/>
   
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen' initials='K.' surname='Watsen'>
         <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner' initials='S.' surname='Turner'>
         <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen' initials='K.' surname='Watsen'>
         <organization>Watsen Networks</organization>
      </author>
      <author fullname='Michael Richardson' initials='M.' surname='Richardson'>
         <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin' initials='M.' surname='Pritikin'>
         <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma' initials='Q.' surname='Ma'>
         <organization>Huawei</organization>
      </author>
      <date day='7' month='February' year='2023'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#39;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-07'/>
   
</reference>



<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author fullname='P. Saint-Andre' initials='P.' surname='Saint-Andre'><organization/></author>
<author fullname='J. Hodges' initials='J.' surname='Hodges'><organization/></author>
<date month='March' year='2011'/>
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference anchor='RFC6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8990'>
<front>
<title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='B. Carpenter' initials='B.' role='editor' surname='Carpenter'><organization/></author>
<author fullname='B. Liu' initials='B.' role='editor' surname='Liu'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t></abstract>
</front>
<seriesInfo name='RFC' value='8990'/>
<seriesInfo name='DOI' value='10.17487/RFC8990'/>
</reference>



<reference anchor='RFC9052'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t><t>This document, along with RFC 9053, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='STD' value='96'/>
<seriesInfo name='RFC' value='9052'/>
<seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>



<reference anchor='RFC9053'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052). </t><t>This document, along with RFC 9052, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='RFC' value='9053'/>
<seriesInfo name='DOI' value='10.17487/RFC9053'/>
</reference>



<reference anchor='RFC9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb' initials='D.' surname='von Oheimb'>
         <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries' initials='S.' surname='Fries'>
         <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus' initials='H.' surname='Brockhaus'>
         <organization>Siemens AG</organization>
      </author>
      <date day='13' month='March' year='2023'/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-04'/>
   
</reference>


<reference anchor='I-D.richardson-emu-eap-onboarding'>
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname='Alan DeKok' initials='A.' surname='DeKok'>
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname='Michael Richardson' initials='M.' surname='Richardson'>
         <organization>Sandelman Software Works</organization>
      </author>
      <date day='2' month='April' year='2023'/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-emu-eap-onboarding-03'/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference anchor='RFC8971'>
<front>
<title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
<author fullname='S. Pallagatti' initials='S.' role='editor' surname='Pallagatti'><organization/></author>
<author fullname='G. Mirsky' initials='G.' role='editor' surname='Mirsky'><organization/></author>
<author fullname='S. Paragiri' initials='S.' surname='Paragiri'><organization/></author>
<author fullname='V. Govindan' initials='V.' surname='Govindan'><organization/></author>
<author fullname='M. Mudigonda' initials='M.' surname='Mudigonda'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8971'/>
<seriesInfo name='DOI' value='10.17487/RFC8971'/>
</reference>




    </references>


<?line 2081?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>,  and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in {#exchanges_uc2_1}</t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR</t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on registrar-agent</t>
  <t>issue #96: updated <xref target="exchangesfig_uc2_3"/> to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in <xref target="exchanges_uc2_3"/> as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="exchanges_uc2_3"/></t>
  <t>issue #100: included negative example in <xref target="vstat"/></t>
  <t>issue #105: included negative example in <xref target="estat"/></t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
Ajq++00FT7wAHUnMWpdCvqVpfo1iwJ7uf5e5zLog7CdJZbuNQ7LnCTtRwvfm
qEIdK7HO1X0hli4nbQQpKy1l0QZ5kD2LRBWf8LKK/SUd/ugU+I5UVpBARxLV
xqzSxLhRq0Em6F3yLCNzrIlFPGtTZN4rpcdR0DHodRIyqW4DI3CQ0kFyiRMi
vMXOY6d4sS82biqJ26KMU4ELSLVFoX1AyVwyWQZkvaTQGBRFWcPFrf3m9ane
ZWxU0XDw3Xhoi+y5OmTbtIb8duiPoCxYXxmFZtCQgRPM6zDuotf7L/jJ8ry+
vhTko8TPp/3un0977onsEMGCTq/KaUZfvctewVQrtEuyo8v8vKPX3q3S26et
3pKvvctA7vSIFsFDC3p7B6qBR77Av5/fgE5X4ywWvnaaibYof58xQNSqvcH2
Rg99+CVJ/vyfd3z+nVyzO7+GZqn4pa3FP+/cb/TiK/Pi4t6u3XM9tzaf6ovB
6n2qT34afrjVc8N8py8Gs33X+oV/xxclZl2XCn5xwc99+yn75s2LvhmUhuh8
EEXWTzExMLPNxS/+gSfwp3Co/tN1dNGju7/do53jE04dWjTH+MVFq/qpXdVj
2/aSfXTdpHp0Pwl6ZHpsHwDTfAJfzM0xGkv44jrTX1xOa3Rc/qL8uIyCDffF
whc7ae6nqRdX/emm8Wt8NteyAyfGEW/ovd3LPnJyGuPF/fFjo+pb6c4J+qxM
RnLGxwizg4FAfWBvl5M/ro2Ki2YNdOtAECT5UBWZkURkWJnDG7QZbMmNl83T
dBX3yCjm1azi56mT5kUt9mKbt7UvFtBagqGKyGyC89HvcSL5kqCJVvod5Yct
QVEgo9bkVrxrLjQ+gJkAYYmSFtil4TLgW9pJ9yI4S5TLlaA0tcr3qKZ00gzR
3RcnfVv4CTLEtdBCcgUskIDacNGd5lFj4IJGdg4E4IgOImx8ln1CwQUB7Jim
3aclfsqGNWEoW9zKfhoTR59Wb5ca1pYcmWAkgY+SGuTwodAKHYBCBNlS/OaP
xZTUXxxsSjGhhtWEbmRLGmmAvZU8Y20Pm3jtN9tWJ+pKjgYqRNw4JuG0hn49
a5ydAP6Ysdk5axnygngBBVHY5Mua9ixG3joOJkIXnVkjTqrB4Ho1nQQ6qqS+
j0AAJ9d+bSKIOQMnpUo6XyFNGK3fRyekvUmUsoTyYYC+ickeJvRLtxCKdtMO
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
IVAHrcTfQRAnZmKFGttO5+GMZ8Ge6eEmNvP7CQi+nSVtUeg3gUiyRNsNYgXo
JZIwUDKF68l9UMR0FLF6M8w6fPco4sVBxNvfN63FH4c9hN7NwNbuoVX+5C+6
mh7K3+9uRobjPZkf+wdv1Rlt9Js/bz7uXWiwvZG0ssfboLtotYPA+n1/32on
rfVmv/xzv5w9fr3//N2DiMczaD9zFvEvDhD+1HHE0zfru8eqU4d09I2OwVXH
AD/INyBe3vPzr70Q7c0tae885a8f8nOH8a6/e2auHmx1bu5Ovf3ff2zuvRNz
Pzoh15yP+3L1X3kpWvNKtC9X/5WXojWvRPtydXop2vzbs3MYaLJmteiUk6J6
qdJEU9PIv3n12jNrS2e1R0JskJ5Jax5ffBZvQ75T3e7m/MVnP/Pasy9Xf/Xi
s5957dlF8kofha6rHhIF6UzPc5xpVlbJi9/xkUfHIATVmRxbUW/la88MQa89
A9T/xYvPfvzas0v1TOe+i131uq6MsX/xTD10r6dttEhlg8RL2cQYHZBA7m16
B5UXr0TLGXjaYCsEWlcMO9FjaBnxAFr1FPnixu4FL5xeORE6onMf+ZYWKikf
zTbmg2rwqEjyiZ72pyCpbqvTotpb0HK8qW888Zx1ma523UptZ3ItzhjN6Gx6
7iCJwzbBzUhBEhgnelgTQK4jsb+fbppkQ0reBJXl6i332YF1754e9puF3/0D
z7fuEUuDBzXdgFi8U/tMhm5GryBDXzoRqfI+0sp+Y3l60uV6rnDtmxLM87Fv
poG3EMtYOCMn+7YKZnf2aH9XiDzXo1zXJvLFMYxq5QvhjhTo+oV+mPpp1/FS
7oNvBItyMOxuHidmOhbj8HFiWLqthkbMWRaoRoteHPOf13nF5pZYpDDzC50H
ZtONMmflf1/n/Ssvt9AlJ/yvvtyCXuNAL7egtwPS2wIfZdjkzLJ11ZyoFKiy
vGNQWMEZhvh568kt1OyW8R2gYHMsERNHBqHPECY5a0p6MsyYLi76wL1Bewqd
w8YdhKDTFFsBN4mWNC+rqL/BZrZSAobCKCnYGKIeGitfULl2UljydRlTbtng
+nR0hY8ERtQFgzsWCd3qTX3Hn+nNfWC8vRE3vNEhnAHUOhNf7GwRtpwiZ3Fu
HYZ0hGnr5/HKMQeAuaQdmuo4Plh9WNQUrWQWIT3YRdvy9W8Hr2UMXDVUh317
zxdhCRceRnArl95P1nX1VBkVrGSZiPxFOHO0uxviyn/xtsDzQsiXq3ffAeN6
bOT71k3Sdw5gl3u0dAM+qExz8cLB9HjLaYf69gBVCSu0EeKJ6QyHPnSdkY4q
3RRawdx5uVfCR1uxOFKQzRZO6uali5nNnFb5mIydZ7QaP6jgsRrmyHA164CQ
LwXCZOwiFfm7BSU1JsCLvWD2dfQeLVO8TjtffYzX6vwpi7QXZzIqWpNO4H99
sJI/Dom4HyxFuzVdasE3d+At7u+DL1feS9/mW2W7u9sm+2dHzJ3l528P+7Uz
+Ka/5HG+6Xz//RBHNlaxl/fp2BsqdeQ4/ykm9qGiR7P1+nmaHKlLdU/K6TKx
E186XUTw/34K9/3XHpxTuJai/P+BwnFuzdyxvXM86wBUfhGHxJ0Kw/Z15yU8
/BWFyzbyDWagcPatfYhB4YJn+/Bt/28K928K928K928K928K928K999K4ZJ+
vqWkdkqR6lPSslfRwqHU9F7p7cvVeyzPTZ/8P54Nlj1/Hg8O889p52ayzG17
kcTB72bw1LqfLO9u9i/mZt6Ndvq41YdpbjEI7unWn9lzPlLN33uLiN/MvvUe
E25uYnH3kG1/+eeHn1pjY0+ygu9fBq5vZC27sGZ+9t3ArXLLz2YWctDv55bv
ZBYjr7Lb8b3sCJazN7ObyaFzWwUqbY2BA2ZcQX68pxe6OP3UmGaG22TciaL2
aNsKp4Vvn7Y6Oz5yrKLeAAo6nn628J2Fw9hkfTFO+3DYcdOCh1Ztw9KCPDER
pl+u1m6xO3+fOG3or15zt8gbngAeIc55AxxaDEZexxohJNGfL1eaSy/Nq97b
/uat7fTKufhgZNwQpZ+lTmLerbjGdq4aq2HRHseKld23DHrrai8Z8yIsQpGs
pn6SB8XdfZjla4DFPtCyvTNOniMTYJc5/agAZ5mLZvtJ9Uo+egu4M8qN6qV8
p1fydWXWwhwx/ExrbfQ2VE9plqtTmTdZ5RVdh2rgLWTuem3L6qLhFu8xKzSd
jSjaKa33BZpqTvkuqFiOocq3bZvWWCzEHLm7DHX7y5VK74rlijOYZMe341fv
xvf0rXzvst4unTE8TQ0VwJY6zXZjd96xJ55Yh2dbYl6/LDCn+rxJ9fmpuctG
RRrF9F7Zubj3etYozpMegttzilT3RbybcnjdI+bBDcZiFus2GJZhIfdbEfgc
V8pZqOyeQy2dBYgd22RzJD0hCoCHfHN7B/+WrSltF41sw1nbxTdlqucB5v4/
AyTwl+9U8Z2b5Vjc/CFun4t1377P0sR1CyswNmJyG32b91ra87gc5Obu9kno
v/dS5eMEGJsytp8vduUfykD8aexV9nk4HgwO69boj+7C/tb59u1n5aIPzQYZ
5KJL/6py/PAzgu+78vJv1318drmSd7t302hB1539L1I+Otpbrv5Od6BFa7rH
h+5e/L+u//E3KKQ/0+pLaOBxtcQ36ct0kWe5wb/J9HRp2dWVQR0d6J5xnayi
r5tr5Y/rj//nxS/u5LXYUsVe/+0P5cPpXq5//KO50m7/53Os/VmW0T//WY03
zqPV8aqm5jbV6g635sbj44U2izh/XtfXqpnss/t49jj17HEXt3LLpxTL47Xn
8nZQ0qd/Vm/i+5OugDprSPtQPYjeP7gs66mgiwbrFHJ2h+7lPd10Af1P3LLd
vBnwopP/+Mdq+vRxvczpLY3yw//4x3QXV/MoTab+859nnWxdGPdRZ0etXt8A
9frrsDldqlVZYyFfYbhEJz9Wt9oW1ZXkTeu/f2imhS7eObu37uySus379+wu
5H0+lx2/Pmv6j7OmP5xeoygvtSEzlC+rVT0EuvlZ/u7V8Oj6uvo63TcXU8qr
g+V9j3SP1dmlu5trm7uevCT1OJ7XY/h01tE79dwG9UWk62kZ0Z1/133Pe6TW
F7U/yCup6RLLyeluzPpepGp4zVDenRQ8FcNb5i/y5Z50AR5VLqYybikMZJfW
x1shj3eH+uZD9/rXyjL12zLr+EEbObUhb5vEg9mU7lVW6yoN/X/tt7PrnfAJ
eSunvJZuTRe21dd9ldUleyeraH+/zggcjpaYLpLqJlQKK1l1QUe6Ljv7zs3f
zy05XRWzxTJffttf/1pfKHj9sv5U3485TX47+2b7/JvHWKyvy+1+vrzO8+2N
uWct3f79+rms7l09mwRAtJyHFryKbjNdrlaYUPq/8mpqujv98inVpDZXLJ61
//vfa2CV19wiRugW9TxaHG85fD319MhIXtxe391bzNYA6ORVu3d/b6CLbjec
niPlV7pOEBN/efPqS1M0e/+Rp6ZVRfn7CegW02/VBYxNCVB+/4UuuzvHHVVp
/+WXpvWX8K3G5PJts1OA1frqnTzy++s88ofMI8eQ+NlAWG9mdE9gSS9frT54
DKbfztv7OlutN6dbzo4vhXXTaQnTJcd71NbNBXDVdYWPDPjVbkLsszOwP19/
A5w+T94Z1O3rQf0uByV7WgVe1Sjd51osX6LjBYfNBNbwXvWxuTKZLuWsujuj
y/riZ3kvIN1ZRiXO6ibHDw3syXs6YZGLlggBoudvZ1e+XT63SX7yorX07VuB
YZTtFI1G6/pqwykoxSz6tooKwol1gSdS749zVgdVdVnnGzO1X5vpVpqJS8eh
rjX35R6v/8NfB5Uz3iJNyQvBp4tpcn6Fe4NJ1UXPK4Kq6l53wjfAw0ziW5kv
99X1g2ixcemNTAz0WbrO8dTQ8tWFyk0SJzeUzrJ89zJbNH26ybx2q0vHc/Vu
b8Cup9Eq3zef+PUcJC/4ESb3LBrk/X7VvP72108aDL3/nie9ncWb17PYlrMI
jtvcm5lceGsavUzldar1TZnrOo02FxpW93TL2xWlw9IVzzKf0Q+nKT9nUB8a
iPpdw5M/JzSZ37tulR7zLK+xlZcz//xdws0j2nhE95iYKq/7SLAn76msiEp1
eSHG/FzdEHr6dkuaBkEv7ytt7sn+SGmmju7V7Nu3aXPz6vJ6TeaaYOwQSqQQ
5H3D9P0aF3by7vB0tXz+ltZpcn16nEKdlWngMvuSFU7XbF/esS25YePq9U2/
FzeQV6krWdY3Ay+mFf2YyKtMqy8ce3B7e5wRCqrTZa0p8h3dpA4mUUwJx3+t
7hNPPi4Xv0nEBW06u6H4K2ybLiRhoKu2o4t5vz036zHh0Ne7nzvXxnL1XFCv
m95Wifq6w9z7wcdHZh/nPpIXgDeN0kzrDdGerlYSRJLqJunGa9uf2p/U41da
dx/wvZvz73332l/SBCsk9/j1n46tte9OeNdWzkJ8sq8GuapvxKSweUYClNfY
n0j98c7YUzM3v1crea/ZxKsr1+s213SL+I98oblMu/tZ2p+06StHQ9u/nPWo
Cu5fPlz/cmpFduH4+7MPN2nn+MfpJv50tI72+/kzKdc1C4kAfRjqlOToRfck
mCv909zefPTLc7KG7kr70KNn0rzHEcpxv5n6CpXOfqOdnIFcvyfv+E0uMop0
vjpdTZbLDVm3WrCsYWS2oKefPLHVPn/ua2onX+4/+Ox8fs/FTl+qHvjntJSc
7pj0jtetUqfW0xe5XltZfP36qfVNrf88owmNzRsWSIu4Jw9uUVw+Lh+rEa8k
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
JgP5TTA7yYiPz/3tDRRdFIKjY5XvrWh4PbFX1Z6lC93Q/O0tDf541unJap3N
PkZUJ6z3In08q+Odf6ZcFR8VRdJlWyY93tUa9JF339b0r2EIp0LKMVOR9aoq
Jjr8k12R2H1WS2um6s0sVTWlqNycahtNcaGOvHVV86aUjVZkLj6L+6pw22yU
oI/yrvrpciK/IgtMohoDXgfXReFUZvCqKrmMoc8pts9Xfqv9HZctSBPvMZpq
b0qzzl+5Hxr43jrWrxR3U2p8gUSdVPynsuOrJ/xW042/+hyNnhzg9e+ph/gb
Wa9BhjpR5HItWeq9k9bJ6wrMZrogF1//j4vMJpP4cUNA861f/6YpMjJ4U7qS
3XzdEdnt87Lte5+6ktnluKOjQQHqfF0Yq7l6Dbqvvn6Z8Zovy5k9c97FdEPU
++OaGGe8Xn1Ubs+4aTVzr8vT6C99suKnGP3yrWaofaru83ta9juFr3OGeqIJ
75YEZLfetdk7BQbJoF+5CTTfedJ6vYEWYvrrpRHPaTEe00DqNK8eShWxGa1O
V2XiU0+jhiARd6eKXZ24qL5M/G0vwxc2JboblWu56A9DV9sM3NB7JDZZo/dv
71nzO0WwZvGQ1qVPGyKaxTmCAVqSWEXxEXQAi5+uh/UOCpkQz9lB1Th9zxq6
+nWVeI8uSjeIf43iZp9QHSwNz252JjZPr1kA5a0Shoji9J2pqwm3d77RRP71
78dabZNUqnQKM7ytOtAQqkB/JiCXZzyrv8kox9j/6imt60f+8PAfj9zt0yPq
R1bSFPhYiZjrs326rwROxb1lF2qVdZ5l4FerUze6F/uCj8Zp9gZfrNS95nFx
TYzkAj9SBRkcrPHjo3vfAO2RyRGbpO12E6BfWshzvXUiXq+X8ezV3ju5P1QK
XOkE0lm+Ri9wBUk5872cW/LwdPaNPpZH+zPYkqXkyiEko6y9QFbQaF/52e+o
F6vzhVyiNbPzmtobwKdeN7WviPpwRO2mTnNOfxoW9+au93NOJaNnA81Tbd9a
0ZbOxlvW6az80V7tc115bPXmA3Q//nv322lo78BGneOqgne1S+UMSeT2pY+5
LMJd7F/9KpP0m76AYFPxpVmnW1KBbv1O536nTtW04juJuobCM1UvJ/5sq0z1
TJpl6uo5Ja6B7H7QqwD69MnGH5qOtH7/7VLcnO0kOKXAn4qFY5J/U8url9pf
g/DFGhoaOHHd7yPTf8VHjnXBuij0E47hlhCzZHhaYJcqQzsDd5mLKVMcKeN3
+v2zleXTTspqEWx2sXJar6/LFSbpPdW69/l2ApkM1nLzO22XqGuCs7Vc+5X7
Yk6LRGig2lvXjOysuvRqyO+lW7kFu3LYOufA4Iu1LAQ28/Bqp8MZosh5+XRG
lmfrOhwIJsl+C6T5C7h8p9Wz4xpVF5qHXe57PVadz0nVeTufqoIY7TR+Je6b
uWwC47piYb9WFR65D5/s9dvVaZNhfFyCO6161vv86lrKkbidyioy71erq3Ka
TvFzJAM0oo/ZYrldnH0vkRVYCUW0TVkG+4lS/censy9xNgD+n1xMCu4cenKz
utgYTvpWVtyOW03qlIIZ/w8pu14j+om8N/2itERVXjldUYb/JTs0WUXu46vc
sRFqn85XYU9Z8JIPeimMs772p6sFJfb1+VCr2saxZ2ftGlV5NJm9zJJnfBId
kZnq7Q4U5e9vRPbbKSSn+O+cQRnJtDbS8ISIEkaZR/Fxveq0XU391KoQvarU
H8ckB3CKdmKZzSGTpjgvd4Egpom1ROvpm+V8BOPiXX+gBpviqJwPGwAqd9rV
WHysnB6N/0oonyPmMUjr2D2izGuA+XA9/fTtU8UmadNAATYhdzCSVWeT5yZC
X50suXCkrv14ftyBlNyaVue/pUAS+l/5iTNdiB8/NKhROUVTrK8H2aDUYhrT
bir4xUWMHae1xtKzFfr6dII8gCQrIrJIXx/MaWZY2uds5f7TtXvcQP16Ywst
R1D9DmpWrvggo05mVYFb7gaoV19pLW1X6+1mf2nTveNZBmSb2bluWZ/XLE6k
8iLxU1XmGB1ydqXY/cc/qPB8d9eW2w6pLCKZwctyRtvKnyfVqvKq3hqyku58
3EkSz6brszQkt6DQw+IK5F8vctBJHHkUajVblyfaVs9RtdBM20aWuXSXT8dt
EM2mi7PdbK/CoSI09d73Wko0W+DlnrEj1TjN8YejN5NtTtP1odq8UPfiMjzW
b5xgTQDcnA89ugote2Jydz8CNKnxL3a0SJw/30ZOX11Pc7mIVZ+2o8ZPvFUu
Drz6RJP6pMHPjp3VJtvWG3pkGqZwPam+eoX/1UnMur16l+XRPQmZjquXn17l
oEVU1BUjqWHrJupNaceTP2Q6wFiUY9CLCsWoenXcvIZpXG/OdzBXLK/evXZa
FJTV8jM4OsnCBuOaZdITopKzVGZAC1/X+Or14/3gXRpfLYYfoa8qL8nv/mAi
jtRcnhycLOHrp30hFeOP5Mad2breTyF9eJlfHDF6RcDOq6MX+bQOi1O2qZL2
CcrXpOJIiVRiUPrRZSzJ754f+pBWLWHq2tA1NH+oyhdH1SnZTEUoTjv+jw/+
UQDIskxdizkFwCVqEOzI3WZNhTWvz1DITfly9Vfian1wkfpWLT98umz1FRxf
eMs0P23LOlYJ5MRVVvye3DiqsAspWPHQGsLfOS1wZm+aaYmrX0/4L9XYWSI6
TwgNJq3fZp4fmFmqlzeSpVmP+HBxOqNaH6SdCLV/L5szyeRbR5a+XcqQOPeO
JjzWr2RQrQPz6dH0zb7l5fP6vMBWAUzzIrSKJsszOKetBc0zXqPNm8wXyzJH
QwYm02qDVKUcaQHsvAsFiZdqBWomqcRKbtghmrfcHKeW+FK1MnaMwtNBw8tj
hvLJJ0Qro3o9r3oP3QLKRS7/qUeRdaooXSaiv3K8hnD+7/Dt7n/GpRuHrnjO
v+zSrxz6/7h2zng2EsFKfqNZH8VD3iNN73ZvctxsXeHsZImkR3SQDvnO6jT+
fwPN9gV2Q4ECAA==

-->

</rfc>

