<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.34 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-09" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 116?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 124?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of the BRSKI registrar in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer site/domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer site/domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication. 
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher-request/response as known from BRSKI and the enrollment-request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.
Note that the Join Proxy is neglected in the figure.
It <bcp14>MAY</bcp14>  be used as specified in BRSKI <xref target="RFC8995"/> by the registrar-agent to connect to the registrar.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="480" width="456" viewBox="0 0 456 480" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,432" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,432" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,432 L 424,432" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">EST</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="368" y="404">Certificate</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="332" y="420">Authority)</text>
<text x="448" y="420">.</text>
<text x="128" y="436">.</text>
<text x="448" y="436">.</text>
<text x="288" y="452">.........................................</text>
<text x="236" y="468">&quot;Domain&quot;</text>
<text x="316" y="468">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  EST   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI Certificate |  .
               .           |        Authority)      |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar LDevID certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a weaker assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the LDevID by the registrar via the TLS handshake and includes that LDevID as the "proximity-registrar-cert" into the voucher request to allow for the MASA to decide whether or how to respond to the voucher-request. Until the pledge receives the voucher, the registrar certificate is accepted provisionally.
In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and takes the LDevID provided by the registrar-agent from the PVR trigger message and includes it into his PVR.
This allows not only the MASA, but also the registrar to decide whether or how to proceed with the BRSKI-PRM PVR.
In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information one the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
In this case the registrar-agent needs to the IDevID CA certificates to verify the IdevID certificate and also the proof of possession of the IDevID private key by the pledge.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its LDevID(RegAgt) when establishing a TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete LDEVID(RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar LDevID certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> section 4 with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the LDevID(RegAgt), as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the LDevID(RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA can issue the assertion "agent-proximity" as follows:
The MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided LDevID(RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
This agent-proximity is similar to the proximity assertion by the MASA when using BRSKI.
It is a stronger assertion than "logged", but it is weaker than the assertion "verified", which relies on ownership tracking.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> possess/trusts pledges IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication</t>
      <t>possesses own LDevID(RegAgt) credentials for the registrar domain (site).
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar LDevID credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to protect the interaction between the registrar-agent and the pledge.
If TLS is applied, the registrar-agent <bcp14>MUST</bcp14> use the provided product-serial-number of the pledge for verification against the X520serialnumber component of the IDevID certificate.
Based on the locally available IDevID CA certificate, the registrar-agent verifies the IDevID certificate as part of the TLS handshake.
Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the LDevID(RegAgt) certificate and the domain trust has not been established at this point of the communication.
It <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification."</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own LDevID(RegAgt) credentials of the site domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar LDevID credentials of the site domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credentials indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the LDevID(RegAgt) if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="voucher-issuance-by-masa"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar LDevID credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar LDevID certificate as well as potential intermediate CA certificates up to the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>This signature provides POP of the private key corresponding to the registrar LDevID certificate the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).
The registrar <bcp14>MUST</bcp14> use the same registrar LDevID credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This ensures that the same registrar LDevID certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".
<xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information. 
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge. 
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5b" in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5b": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="400" width="528" viewBox="0 0 528 400" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,368" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,368" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 88,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<path d="M 48,352 L 72,352" fill="none" stroke="black"/>
<path d="M 296,352 L 320,352" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,352 44,346.4 44,357.6" fill="black" transform="rotate(180,48,352)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="124" y="260">supply</text>
<text x="164" y="260">CA</text>
<text x="228" y="260">certificates</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
<text x="108" y="356">supply</text>
<text x="168" y="356">CAcerts</text>
<text x="244" y="356">(optional)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></artset></figure>
<t>The content of the response objects is defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="pledge-voucher-response-processing"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Verify registrar signature as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert").</t>
</list></t>

<t>If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="pledge-voucher-status-telemetry"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="pledge-wrapped-ca-certificates-processing"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully processed by pledge.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5b".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used by the pledge:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the validation of the wrapping signature or another security check fails.</t>
  <t>415 Unsupported Media Type: if the Content-Type of the request is in an unknown or unsupported format.</t>
  <t>400 Bad Request: if the pledge detects errors in the encoding of the payload.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="pledge-status-trigger-registrar-agent-to-pledge"><name>Pledge-Status - Trigger (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="pledge-status-response-pledge-registrar-agent"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished, or a single onboarding state may expire after a certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8615'>
<front>
<title>Well-Known Uniform Resource Identifiers (URIs)</title>
<author fullname='M. Nottingham' initials='M.' surname='Nottingham'><organization/></author>
<date month='May' year='2019'/>
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.</t><t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space.  It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t></abstract>
</front>
<seriesInfo name='RFC' value='8615'/>
<seriesInfo name='DOI' value='10.17487/RFC8615'/>
</reference>



<reference anchor='RFC8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner' initials='T.' surname='Werner'>
         <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson' initials='M.' surname='Richardson'>
         <organization>Sandelman Software Works</organization>
      </author>
      <date day='22' month='February' year='2023'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that is signed using a Cryptographic Message Syntax
   (CMS) structure.  This document introduces a variant of the voucher
   artifact in which CMS is replaced by the JSON Object Signing and
   Encryption (JOSE) mechanism described in [RFC7515] to support
   deployments in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-06'/>
   
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen' initials='K.' surname='Watsen'>
         <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley' initials='R.' surname='Housley'>
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner' initials='S.' surname='Turner'>
         <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen' initials='K.' surname='Watsen'>
         <organization>Watsen Networks</organization>
      </author>
      <author fullname='Michael Richardson' initials='M.' surname='Richardson'>
         <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin' initials='M.' surname='Pritikin'>
         <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma' initials='Q.' surname='Ma'>
         <organization>Huawei</organization>
      </author>
      <date day='7' month='February' year='2023'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#39;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-07'/>
   
</reference>



<reference anchor='RFC2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5272'>
<front>
<title>Certificate Management over CMS (CMC)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<author fullname='M. Myers' initials='M.' surname='Myers'><organization/></author>
<date month='June' year='2008'/>
<abstract><t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t><t>1.  The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t><t>2.  The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t><t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5272'/>
<seriesInfo name='DOI' value='10.17487/RFC5272'/>
</reference>



<reference anchor='RFC6125'>
<front>
<title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
<author fullname='P. Saint-Andre' initials='P.' surname='Saint-Andre'><organization/></author>
<author fullname='J. Hodges' initials='J.' surname='Hodges'><organization/></author>
<date month='March' year='2011'/>
<abstract><t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6125'/>
<seriesInfo name='DOI' value='10.17487/RFC6125'/>
</reference>



<reference anchor='RFC6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8990'>
<front>
<title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<author fullname='B. Carpenter' initials='B.' role='editor' surname='Carpenter'><organization/></author>
<author fullname='B. Liu' initials='B.' role='editor' surname='Liu'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t></abstract>
</front>
<seriesInfo name='RFC' value='8990'/>
<seriesInfo name='DOI' value='10.17487/RFC8990'/>
</reference>



<reference anchor='RFC9052'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need to be able to define basic security services for this data format.  This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.  </t><t>This document, along with RFC 9053, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='STD' value='96'/>
<seriesInfo name='RFC' value='9052'/>
<seriesInfo name='DOI' value='10.17487/RFC9052'/>
</reference>



<reference anchor='RFC9053'>
<front>
<title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='August' year='2022'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052). </t><t>This document, along with RFC 9052, obsoletes RFC 8152.</t></abstract>
</front>
<seriesInfo name='RFC' value='9053'/>
<seriesInfo name='DOI' value='10.17487/RFC9053'/>
</reference>



<reference anchor='RFC9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb' initials='D.' surname='von Oheimb'>
         <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries' initials='S.' surname='Fries'>
         <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus' initials='H.' surname='Brockhaus'>
         <organization>Siemens AG</organization>
      </author>
      <date day='13' month='March' year='2023'/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-04'/>
   
</reference>


<reference anchor='I-D.richardson-emu-eap-onboarding'>
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname='Alan DeKok' initials='A.' surname='DeKok'>
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname='Michael Richardson' initials='M.' surname='Richardson'>
         <organization>Sandelman Software Works</organization>
      </author>
      <date day='2' month='April' year='2023'/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-richardson-emu-eap-onboarding-03'/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>




<reference anchor='RFC8971'>
<front>
<title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
<author fullname='S. Pallagatti' initials='S.' role='editor' surname='Pallagatti'><organization/></author>
<author fullname='G. Mirsky' initials='G.' role='editor' surname='Mirsky'><organization/></author>
<author fullname='S. Paragiri' initials='S.' surname='Paragiri'><organization/></author>
<author fullname='V. Govindan' initials='V.' surname='Govindan'><organization/></author>
<author fullname='M. Mudigonda' initials='M.' surname='Mudigonda'><organization/></author>
<date month='December' year='2020'/>
<abstract><t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8971'/>
<seriesInfo name='DOI' value='10.17487/RFC8971'/>
</reference>




    </references>


<?line 2058?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>,  and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in {#exchanges_uc2_1}</t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
efnX7043vzwsr8vv7387+v6vx6Mf9rauzmBMhz8fXj/7+fBvvebZ/nfNs59/
ePls/+WjZ6ffw7+D+dEvuw9fl9jPk8kPrx9uPv3rVzdn93+Y/vD1qzf8++X0
7PVoszjZuvnh9fBvveng/vHN97AO32+/uhnuQftvtr49eXm4mb852v/u1Wj6
w+aT+ycvv/3qh83RN9+9uvzh6Jdvy+9H06PvXn/5zXebR2+Pt47+1js62h/t
ffdya//05fGr4uDVo+9efbv3w+bD19+9eXJ1+vJo9uz01fHZ6IdH378abJ19
/eyX079eHrw6ePLsu/Hw+as33371/ebW33p7x28eXv9wMIQWjh999/KhtnB0
+vLb+uX47c/Ptr49ePnq+KsfXv5w/9k3o6Pjg1cPocefh5sP/3F8enz06mD6
t97l8WRwXbzZOjj+Kzzx9dH90/H0ydHB1suT8ZOj4/3jB8d/nX718s23k1NY
U5jF0Xfb9dv/t723bW5UybaEv/tXOE5/OWeiqi4gy+f4TsxElGRAQgZZCZkI
pp44gUBVSICEJdl66ej/PmsnoBfbVaf63jsT8TxPR3R3tW0pydy599pr7cwk
HWE8i0WZioNYBwcaEfrAR3zX9GGOPpjeopMxVdwwhXWEUrfAVbTacZPCGrNF
ZzbRy7U/t9bTgn256rtFOo8yK8K3HaZY7ZgnnueN2iM/MZji3B9/HieGq+tb
lxvdUYH+ZOuXyIvbE9X6crVyDyKER43CQyq42r95aImD7bOR8PPI1VVlom28
sGc8oPfFJE8Oo2K0ioVlO2rihkWYC23z5aoNv51NlLJw/d06GVvzyOuridZe
RvzOHynJUzguuw5Xu7aedGwhMjc3mFDULufJ/ajlYPaNL1eCZVYLo+mGWrLH
7Bn4mQUK6zPdeKxmM2VDHf4yTw2au5HSVzA6D76ki7y/heW/XBlsnIwcPc8C
TfUnhRF48858wsO2Z6Qu+Qcfi7ld7NZBnviI1Lbt59noIFQ/T72Rkj67xe7L
VYRP3IZ6OohMp7S9TuTrN1uvyNRpYYzFgkWwx61nJANb320cf5ehjw/o4yL2
01WU3Y04jUjHXAxhd32UhZ2IWzcTk3Ujo9zZutAcXtp23tkLxVGmwtYinYXi
YLRHyh8vvDDUYNG5d8h3U5ezheunHc9wBkGR2JMiWQYF7HDoZIGamEKELw9a
0vPmn1+QU25dwDDXtvsIHumKdGW7iOmzuHXKUGtT1GeI/pTQIhzng0TNg0nP
mdlZuHL98iUSZTDRN3N4Xih8ZecJxLQZ31sRK9hjMDe2vnACXpQzkS8VPwsz
oYkNz5jjm+wpyFnHhoVDczNjSqkKkbpRpm6mPfHlKpx4xjjwOje+ITaRuXFt
I9yK+z5Z149apTcZp5FQwkGsJivEczbh5ZarLEKcrSb3DhetzperQajzHRMi
4Fk7nfQ6vjCEK7L2yuYinOblI8+Ebwu24rk1RJ/RQjp0C2vljJ3QnhuHgGNE
A6argSg2/jRDH7TdEs8Qw3HHwyjgcWLt5NRC6EQHrvmL0kcLQARhReOkDA7W
elLA6zZs3sl8xGfQyi2g+iHW8rmrlxowx48K1sMTrKi4K+Fla1dzNixPBZ42
CoTYwgG3UQ99mdvC8kOduZFwDDdz+GTceQn8XYQZXoVG6As9jESxWwY+8708
EUAlXyiJ4whnDLukgnw3CHmsYhQbjEJMjHIYIrKFSMYTUxVcyQ+u3x7GxnLv
+GnmGmHbzx3LyfJV0Cp9W0t7XEFffNtIzJHHZqyVeqLIto7Pxu4i56zY7bjW
jniecx8IwA8GQx9NP2sb1KLt/6EGmLvIhNftp/qdN/FywytUF30ZJz3hiXlu
otfRtBC+n7NwUtiK8DpDWNqPdXUGVFtykfoTzRChAdzl+I3r+je70AzZo6dQ
Tmxy5SHyk+cHnzLpaDbM1zMP0z2aI+YUp+P3jAUQwgJafLlauPCLCfDIU1nH
BcaGLWMZafATw2CI36eRu3F4praYMEKG/3C+0UfjDuwnBrZv7yfku0CC9q0n
9G2iOC2fMx+RTgjlCtNANOwcXiQtViR1C0wfeTnANB3ahuhTHmAe+qL5WeLH
qr4FWvWBMUPPLy3kGqgSoLmhb/GzM80R50rbmWZ5y8uYZSPzcK/jII5uhQa7
dIZcdT3gO5cIaDAX2SPW27ngyx35ZoIY9halg2+1Rq2mT6mOHMoDROREB764
QSsxmxaYzjrwpkhobIts5U5FHrjIMnYeqvDMrp+pXY8n3enYgJ8oypAbC0Zx
BBw//qbFeNqx9bwzypKbSc8ahsXyEAlr5uzvuty/y8R+rWLqX7xWuRxoGHkv
3yUCcWR5+7vxdJ6EEzU+IMJ09MGcmqLlGWExzZy9w9sau9cPfmGYwTwp4sJ4
HrRG7UmLhY5I7EhfwrpRXt6OMBfw397IgxfpDH3qvySqYZA/uGYCbA5lBnYN
x8EIYJNkMcotbaKOwNqQYXO7CDRPFywyeMvV06dBKxw8aKOWiywf6jJH97nH
DMw2YCjdTvFEt5WuY13XhiasyMMvV4CKVCRF2xL3IUtaiQGcldlqgkyGn+9D
NbdczM0I2U7AbomSt0ZaErp88+Jn+W00B9bJXjPD6eBfl/N8gdltO4sUFmQv
HBzGXTiLiX5n2yK8cfXkJVZZO9bFjhfhrW0YmkNxZPBeoMBvLc4df+r392ye
34q58zz0+Gqi7RZhFg5CteRCEbeOybyAB4eoV7rc7x/8heja8xwjqiPQcXne
nWbsfqQYAdMS6jlYD/op0iDK0u07ORFWLzs2J6/7T/otGxJi6ud+6+dC5ml8
y0iUVMaOMDctxLsxBUuD7R6ZruyFls69TH2KWsmj0BHTN6CQ6P2d7nnWOMr0
FeDdSRTB6vh+wEiQ/YVw5wZxB+IKQ/BAZveS+2o+EdPMRR94zlLfsNZoYZEo
4aJuQWe63hY0qnlHAHNvA853SV72xMJhYAMtAUwSOiJgEZxQCbh1gVLOiBhS
Bi8QbM0OnSJRRwdbu8un+XKXFJs+960cfABqYuIvV6Pizh+opRlr5TzMjZad
s8dIKUeRfrfytLATLHg7yO1dLMpy2MtTJoKbCbi6q21fnBz+EgRFeONpajda
WG5cOMHkYIWJWmIenDp2LPTJKIa6uIeNiMf1HxRCBKOJPfC619E3UqzvRB8j
jwfuGVmsjF6i2R+rUP324mhgzV13IeZu9y6Y+O9En9/XmJfPJnmqTGabEjrB
EtndzfR+9BIv8sLWwObHhFIy2rS7CDH8BLuTz+pcNTqJakmOxc121+7FO1hZ
jYsUXL1sJVr4BExaMDMvpyb4rvD5DuR82Q75TTvS7pZIcCLKjBLjbjlG1pr0
2I3Q8lGibBSbL9uTomyHGRtO7oWTcKGPCsTRZmr0od9SjHnT42NLPLpW8nWs
NEcRzw+U/q/3jpKS6LxxfPuU9mYbTmkv4E6T9pD0ko5vtv1oAUBCKlU7EyU5
A2urAxFFMuNm1Co7biNeRM5H/sZEOnTFuAGtKlCnCLsNyZlnrqkI1eXWW4Tz
SWbcsEXZEdmZeDE329i0NmH9eYGkB/FieBnc5ssVwYbBLISm7o+TIUIEZmfh
VG+bEzxvWqxVhO4Kf38CCUTaAwlVmQDMP41yx+Fjp4VW1CZZo5dK2RWCGaJK
UiQ1DEBpyxPOBsk7snudbVCoGTP7B3eRnJI9oJFaCI1Eu8On0aesrQvPGk6L
WEUoQwaG7CyUVVczxo7f9iY+wGDegbBgmwnocRkhiP85SXaAFDPzlBdOF2lr
jr5wESSHZC98kcLpem5mqO4920YHZjn3lhag9VjlOwgXm+nOvWdu/KiHDDTv
7ybjMHUVR/O+XI2/7X1343l+woZmWCTKdm+3lgeh5/4ohyQzGMBbvY+VowST
Aoz5SXc0T8euEe8ijMjeszGDNA0hh+zvyx/zDxVzx9Bid9iIvHECg6ndACMy
TJYbdpS1b7mxfeHq9gVho0YApQgWRo5Emkjmvk9wotYpG9EEH6qLAQdG/oIE
GXYThYoBusIUfSd8pgOou+PuXYtzGc79UHmX3i28LO2gFd0yRn7eTTynBcFo
xwrSzL04eN7nlq1/W+EJ+ylvC6dIHqbZ7hHzYk6F5XrabhfztAyVfOGjFWfj
Zjs+hUBIstE+Nu8enILdOMV2h76oU1/lEAaUlgoIyhS0N7Bz68VT+F0/V0iM
rUEO9lQUEZ4951p/obx75vuX4M9lGpWL4mWynT8881k87PzufC4gZX+ffet8
LXmeDfiz6yTmx+l9/6aDkNg/j0Mt2t61DmE/uWmz38e7z4OPqhYM+rvbp4f5
7HFub+Xh64s3mNW1wKo2V1cC60Lg19k3uZ52ebT5R0XDH72v7FR1jFaT5YwW
Kk775t+2xo4lyNOnNku5ub4uPdILF6jiXTcmLz2QpeCvy2VyfBFXVROX+/jj
5TKbJp/oErPLtaxN09qpjejVC2yOa2e/Ypi/1a2n0fpqUm0era8wqHfPHbt8
fPft4nTt98VN3xefvv71l6qPv/x2vC5gsdzWG9G/LlfbaFUfq6DvnR00+F4Z
9tT0m3EwGsepPHvZkbMn/GRh9vKahWbvoizL1tsC1jT45lBp/XIC2OQXuS2o
2RTxqps/qviyuuKrtrT27//fLfkGmlGEBd8MvW8t557T575cPU+09jx0gSSF
rYLOPk60O8fT26mjOzcPKl8JfbccteK7RyoSLzr7yL/bnxWBtEkLhHEemQK/
tfJ4LPK4NaK+5VNetpCE1rEGqXBZwDBjIxcTz3CEEm7tvDRD/Q4jssedkKup
GxWW788ZlYrGoa+6VGQJzXImdH3vZ/HW4aoftUA5W+lTIMQKLVCxKWVU8LoV
pnqDFiBqkjDKsm0geDs2nE1kGs7EWO78TDhTc7T3FuxRGNYSstoELTWinpWK
capzrf3lCt9KjLiXjEUxOoR6MkhE+MxzWa5SuZpsE1lsyl2MIg3y0LeNEeRS
27HvkQrzBBReRyvxvUF92AX+bisMh/sZWvA6N1QyEqroueP8UXhCgPj7E7AV
0M4hRP2NyNOBUK0g6gHnhdDbT54adtFC4MkWuCo05E1FhSVTAclQQvK7sTHa
T/QyF55hwI7oA/L0XHCWW1TwEmEEvsK9vJNGB10T99Z2lLWNac9wQWMegyyG
nYhfwZLFXVsU4H2qccvmVPD6rHo+rGtS0W1qGsjVwcH3+piLdo/lqePr1opD
HtpGtrdFMpvwMBRm2cVMCJ/6QGW/LBkmAv4ynhgd2LqDsRt+rFqmmyUiUpEn
uYhiI9TdYsMmwmgFmRjyPNjzbAOKbPWEGma+YM8YFxWZxHIvstBnGluDL3C0
8ATbu0KEJpXt8Lc9Bw/kVHTP0ojp7RdOpZPcWiWGNRNUxB6JQlVcFRnVQB+U
cunxEHMVmiDWHvUBczXwjdB389QXJLr0cACLPnu5gDeUY5HF4JGBb/ihHlK5
Kgowm1NRCgEfQR/Gwt8MA66CA6dCtFgv9HeuyMXKz9o+oxYMZgY++LU5uUcL
WXvp+ZvIF2LjjJ0ZPmGKYkeFWrA0h+xghjyMRB6uvGLjgBlY6GM00Wz4dgpx
PDF3fpCnS/gMsW/H5qXlZ+GWq9YakYBRhCD8GKFpGEP0e9LrjHyvk4Ewmf7C
EhNarhhzCOJYRR/8MrPh4XBTELKkN9XvMFdlz/MMF8hlQHr70l5gbUzt7/k8
ZOCiAk+hAqla+ogqjDcM/YyDrer75J75EHVeMDfWYNsiMsAStdTw80Rhqr1j
4IgQZFTk3Y5UMMCdnztswiF0td2QypmxvsFsWmMO9ghLrqm8iT45sDS8wd7x
BeLJKEVQ7LaxEWxFtiF88XeKh8iaGJYf67AmlXk94yWBlAwNK7WNpUb+5BWj
LTgotTBEDG0TNQnwxLmdkdwPsnAtTGPtZ3ewJFiZZ2CU0rIuLOlhpIhlCzOb
zDEKKqtuuZFtQ8PxMJdhwNHKEnMh/DwX4mCsxL0RxbmzcnNBRVqTStEsoxqX
IG8YAle6vsH3tsdCRIwSchYFVPAaR/ouBIt9DNQQQt0BoFrpNAstIWI11oTp
jlMeHcQjvP5mpJLySTyWwY5me8kVVTj8jgqkqnXgvsoSNVyRbRgvH2Bl31Ud
zA9wtkhXImcm+vcMrurZwuoLbQMPxIM8g9s+vC4N7z/vgJJowSF/2OEbw1iz
qCSPUbUFn1tuINgq0q0cnN3kBVIREMzN7oAHlullHDPt4hN+gX9U6wZzMbR1
BUiNWDasR1rEA7b4kX6Xs/FII7t4uUWeKigqvZxK1bAu97K2y0SpCL8EjiZA
g8SF2npC/HR9UY4TfROi9/DnNIMdDDGHv5jM4wdELOYyMtAK/Baz6ZddT7V6
3jiJYBcfsxm5hoB+2/CJDnzRFDXgyjbW2RiROeZzwwSibcgbhAa7yLh1kEYn
rWQoCsiSYiNstJDoCZA8R2xvgHGY0wx9b0FQ00xozJB4k5UBEA2ZZATNxhYW
5qpcQZ3OE/wMj4J3sT75g5+HG8RRGGnsETgUJXp7HBmIO6N/ECo0qUEFdfhm
7hoSGeFBbBz3oN6LTQs5MYvUAHEmOOzQQs7cxcJ4gnWdCXyKcNo22Trswetm
zCiXgb+B1ws/MoGSOlDR3Axg5R5lMjzlgNg2hWoAjzu0/DhEC5SvfLGwfIkv
T0CohS1yZJONw/K+BssOIxEG0LehKFJYXjWdvDSGIkU0lPioWAoNrWc5iw65
CMZUxJ4i8vmC0AH/Fu01fFk4XsfH7K98EbqisAzKR8zT9/BKyjaI63TOtN2T
J7jq5lRMccYJLRMFwdzJ0Otb+GyEPgwCTXVoLhKzZLba3wkjBYqK9SgXDlqg
EuN2grhyaY7wTUv3RLqNDGSsuTGGJV3MxRYWR+SVwjbXe67GOwG88RYigl0C
PneWTp6MgS+uxBfkvNSMuAq7pLD5SIFnr4BAyHkper6k3CSm6JG7EMw3d0Hg
Gds4R87Mypwp7R7wCTkAnGAV99KxaKVwI64yoENoGi5m8+D78GHYAfMFDsWW
QS62sK6PLDsGQiFq2gO/AH9B3t1FMkOpoZ+YwBc/B1KDn8yNeQJ88ce568Mv
eKEuhZqvQ/NuPkHsEy5HubUG+0A0Tsy0FSBjJSbTfVoMy/hWzK2bCBaFHejv
yLrMsI1kFbRSz87a8Ked75v6YVTchYLK8gdkzQjZpA+vnyEuerBDJCgK9MSD
P4zJDrYabqboJfqwDxTeBi9diXFOeduDN8AuseqskE3SSK1jWdV3sS7cyZg9
EVdA/3pJL0mFEsAj21tkfmNyz8IpnsiVcBjnGNHKoTJyrwOOpKgJcp6XJZGr
A1PztDtRwzU8MkMGacMbMt+0TGrBNuHTSjIAsoODUZmV5XwnMKpYaa8R24/o
5ZAvysUU/gOsd8mnQy5cYVrPVI6NstJDPsqEZgAt2759D8TcVn1wNgz+AIxD
z5MbzyjhD3cZ8o8AnphCUXV4mm8vgOT0c3YXjHI28830IJf9liNwKHhYVvsD
LDvaRbrjM0XcBEqYBSI48EUeCVF6xIdZ4fSQ+V1bS5CVN8h48JfdxEjIH5ah
v9kC95684i7DXCihnm7x79qnKFikHtj1gDJebCSpLUqOfLUTyNvwafBdZIMS
GAKfBH8xjflEhAeKPHjULWKXEwvzil3mg314RTpj/lYFxg0jNRQ2T9woA4NH
/KpuZKCFnjNnqtEG+9x6BTj1vTEWh84Nn3/eAcnXE0Pa4cEXUBa+Ay0iCF/W
El/WZAe/uBN2VsKjEtMvLGI+EeJqiIwH6hOugdQuOBZHVLhMDfZsnM5sDf6U
h8TigHVskXDY+QB+osCjOEZBdhjjG7RwB4YuXHByxR+XyIujrSMSmkuPfB7c
68mlZRx8AvMOugSPCuBpwPq0G96DixtiNfRTZ6IHCrKFklRIThkt4JmQeBTj
2TYtTKkyNoXVS5Dr/B44ONgHkOvZLaC8Wh0minI40sQ6aqWR2+usxbyzBkJx
d+EQ390B4ZEb3cIIwl4H+oitYFnoI0HL+c5knIK4qCtoBDCi3ENOHAR+uxsJ
ZxwjtifEFs2Nwol7g38g50EZgM++JGDvHmWPcedeaGUXSL2G3+SuHkIXMJMR
O5p3mO3ftcFzlxEyG18gw/pMD+8RRz5xaowitXudW8pwjLYUQBcg3yCLhpLF
+xkxoBJcVCi8sEzEOy1zf7l6BOKYpAwiYkDgCNSip1nUwpzloURqJpEaOKsa
xAOJYZuSB7bSsUfLFQOwC/OcCTrUWg4OdWSCzPeBDmAfKkUm2MczVN5Y6FCJ
morPkr/44CbANx126NgioMwPhOqAsYrtlFaWcrCgA5jgvSPxBfoJylvcSDYL
LetSBBB/7SEKl5Gi7MTCEdAFJS92g4kabKFu5og8H7icTUxw0Yw8lHJFCK6Q
PEOFEQ/8ctXzM9adaP1dRPzFE0uw8nAK9QCcBO4Kk3SBnymHUXaHqGAmPDKc
+kYvNgS4KN8Lwt1lpDIgFLFTi5TBIIaF4Q9DcCgg1G4ZmTrUcof0EPQRcVG2
PjEgzCVt5wIDzSNoBRe2j4j3w/YVCys2wN6QFARmE1q2IA7lmIIiU0vBRJKt
W4geH6eEu0X6SP5B+mha6aPwUh8hd5A+8k/6iLJNDPbBCWVpadbz/PYyobjw
JEKZYIoR8TioIFoG3AligjkxQUE+3UYLYLXhyh6zDOgQyDwNDpWQHRhyP7Ew
cFigJNQw5mIFj0KmB0KZuQsffoH3Ry6pvDwEJ2drwmmmUjRGJkhBlt8IrU2o
uYl0KCjdAMZZxhQcyodOhI8OxLi0HJH7Xk4bTELwTq6OkNvhkRjRRFfbHm0J
MpL+aAGcFdCJiALfYCvyZShNijPXl/oofHT1Emm13WUiB+PeuFLxqcAwUru9
pJUj3zAfbBUcmPFRYbiITA3/fwg2YrrzEDkzpMrFagqN79C6hwrtQpsTIq5Z
a3jxeLLopDT/Tm5sIP0o8w98qWYs0pUCf18JYh/wZR/IBSSzwOq3nBhZD+hH
jDiF/rESlXSimCHzM+DHFlmX4ihCZhek2IGsT4hv8ob+yRvkiooo77nEl+UB
kQmdWHqV0qRPhMBl4Qa+unRJIWcJ+YsZZGxIM0FqGRqP+uLvBnFh3QLjCIEQ
cWw4UuFRWQ5GbAVowY1p5SxLEJkhRWbkZeqGZ8jCBXsKTeTpYQy9TOoG47yX
DEjTdy7VNrJy7HGxZch4NgciISyFwbqRb9yywohoI06AHsj6C7DemEXaXVuY
5RB8ZeX0EDcZZd1kOaWNNnpClQuFFDuesIceIk4FpSVrH6upQToAfVB9z1Jc
mivk6ggWFfPPKiE10IHBn1qNPvIXIXhc2RLgNKSW3Rz6SGCmVZElSqwamO3Q
w1y5xAylstAdz75ntwFPM+FbxDVJWbS4AiUEz4A3uLa53QuN+AvXDGGPDWRu
wwPGAXfZBhyKWBhxzy6U5gpeHsJf7hGZmS+WB1jUQ18MUjfgM8j2fI5YMIA4
mH+gtvDm8L4MfFZlrlegj+MU2oT1aBS0UA8m6YLFq6TxbL8PRSZ5XcG8APgx
FfnY4ZscCq+FrDoAjwPP63DG2w/INkPSJjx3HPi0gajoMowhbuWRxF1SeTcM
dg8rhTWGHYaEkrAP4SzVocwECO/4pW8XKUyfHBx4IFXAwIRgR1r4hnbhI4oT
rt4CX9zKJ0MfebqHWEZUhJR1KWeOq6ok1c4wEwq4JhewY0gsCG2y4o5aUDDr
m6hXCszVANi9qzJekk8MQYodjDqknAm22j7PuhRHGbGb0sVs+j6wnbU6PaGp
gxifBPdMgS+3VEXyNGD8uEwZuBWyTcShlm3obZv8BYp7AwSgih4LwV+QfxAF
wnmmqIAP+0KqG7aGF6bMhwLOiM2KNfzMsXOqKWJEmL3+gdghGM2L8Cyq4KAP
zhj/DmQfwPvAseaYixWxj6nB8bNDXKKPqMFTqHo+Av4jy66gdlfgccIB/7aN
nNhHBk6+cniIKUEce9YNR1xBrQJ+8zZ4GrSuBd6HOYK2aK94FvpCs6h2PAP7
kHUHgbztLSyPtr4Rl6S6psg2iKu8hb4tSZVhRsaS7674AVGuGX0PPom4UIEO
yLrJ2p/LrX/IKODktP2CMM5nZKeMaoh+1hbwl54ndWMClg4vJn2UgscdbH+0
g+qv1A1i2yasL+4ok1FttQ0Ohb514E/sAQgHK6jgdWDleaTCH4qdi4y1BSsn
DuVRBgPO0mwiNuE9UGAcrB05A/kqfEB/MtcUyNsl8Rc/5b6/wew5yFACmh0K
Cog+FcE+MTe+nak3sENGVUme5z6NAi3IqIhNGRVfrs7iIpwh8twAvpyIbCe1
Kg/3xOGErL8wILWgapwBLroCoqW2YunQV1BZYAXrWA8zppNXM4FZhu2dIZAI
GavdRb6CJVWKTC+gze4GVdsEVfweYav51BxRdWvhEI8DICZDINQ4Njcp8FRB
H4Y+bS6FimC6lQpTHSY6CGKOnCiAHKR+MmVreyHp6XFniIxFuUeE+t0ccQMe
1l4j0sSklVPefvR4GE6ruoMPzHnhrXKAuAL7cGYYA23P8YwBcj/yzWYGxXWA
iluLAtmC7FAw5J5wgJGuqE4msw3VNQuKK2QbgSgmHWCOaNWi2BDujqmSzlUH
WRdZRlur4C9kdXDyjYP8A4xL8Hfogh58GvkJkbh1iTMQQrnk1ciqA2hV2ggM
dZ62oKv9RJDmD2dApCFVDzATkv8iy0oGlOQMKIsRIa+SIodHUf0FOZFQEqMk
fzCGAkqTqkomYVx/N2mltKW0DKD5Y2RheJcLrSvXj0qoLOSbOeLJhz72dwZY
IkZhEAs7UGWU0eajTKRgQEAH+B84Ohg2Z0oOtYxWtuDU46HnEBslvTgktsrJ
kgLokAPZSbFnISmuJ08kN/TaUx8qkSkqoQMyHq0fOR7yymK0haV8xIVBeRhZ
c0hbjUdQeeCWhBYCFne5kct6HbKZIA2HOb3FXIFLMcqasAOUguHmpSN9EnYS
YPUuIdiig0hUXSi7dWTegYMTLqaZbzgG8ruPucJMwx+QNRNgnqyeUN2BVn+Q
E8s5M6xHoaRdDq93s7t8IvoaUHPtFpbOPBFNdECaDqwb0B4QRGkI/JV6Z5rl
T7FZrRYGmtIGtxoj6yLmQbK0fDABd5wcOlSVHMqVPM1GDpiQHVrpA2XNiUab
ixMO/4ioogffq6uShFAK4eCYOJRtshfM1Q686Dk28y9XDulGHzgbYbaRb1zo
abBV1kmA/RJnod2EuVaBUJvk0KF1uBYwbhjnDug0LL+AKtcJ32MgMWxN9RZO
lXJaD6Gt6cSZAswlITu4goD6ofruEPxmE0F5iOKuhXz+5eomytSxWFgS+wPP
ImXp8+KO2GiPk258pU2E5hhUv7PvhS4kRvaBL5yUpijl2g3+22RNmTPRT1lj
RuZvBQdjDXzxvWIzA1NsEweTOZO2udH6EXGogauWolq7scIgo2oa2Mc4JTYK
XqeCIbbBTnJSFtDR8W6aqT4nrpFR5QTehKxJdoBGI5zlyFhc9d0mZwJ3E9Mw
HBGOwYhvMZcm1NCatOyEtqYTg3cZZaxFQutlrWqclkRqWHbF/fWOFJUvq9TG
LdSNKQoxBh/OmbYbgxm8IHJpPYA2SvLwwLWS8s0KPopAtO65AksKyePAmNkt
aV3krQ364MLrfeIOYNQrQbpRgJVT3SCCuhmfcahBnFOla+MiW0Djl2aiQQX3
HO6b7BHeAMSk9SOn4i+0lrckvojZvFjLc6u1vBH+7gfgkuDDDq3LUiWs4g4J
Itei1UTEUQTHptoFbN+SlQu5jmbNJuNvtOph0t43h8NHeZkiF0Qg20D6u5yR
SjRpbxy8rjfVnWodjXKgMFYxefyY1K5wKa78cZK7vc6QIyKTXNyOijuqaquI
/XYkQigL2mDP9PIJSA31ItaRwRymJW2qO4CTm3HPobqVKzzHhT+ZsCS3s7Dv
iVgF/wJC5bRBH32ROU9YG4C8b8sDGawbowVwKR7laG1RmhFYGDQ/WH1fE5oC
COMHb5yDe6cIXURjCzi6Qu5PbdXSSDdyRQV3wDyM0yVl/qBCh5lQCB3akeQv
CxFCqT4E8HnpdSuP1C5FFikDlWphtDbcfoK/DAIRbPH7mS2sHpQFeFyf8jLl
q3EAj4TaBQcrSQeAU9LRFo+YoZBrDsPA3xhT2tSKsJH1PMGoagCvP1YNgA6s
8sisrNaPfNug9aM8cs2d5C+EH4m+ERNzU+VMuZponFYTC8N0845b1dJUykcq
aQ9LalXw+lVSrd1wqrE2CDW5xzNb4HES6UsjMZgv/Uvb+JFG60fwydw1woBW
l2MjX/vZxkEf2gEiLzKt3tTAbGqwg0gGyGAHMEl3Kisb4HUF2VHyOsS7B71s
qwkiU2asA1XTgLeGX6QVj/uxugEyADeR84Dn8Dxa6UcvB/Aosqqg+i7iik0L
p49sBqWOPK6GWVQIWnkRk7xcybr3IKEqUnGXExKDmQ7BodZs7ggoixc80wUm
6QL8dkq+AfxJaP2o59AaOUcPkIXRl549LmmdrE88DgCzJlYuCnsH/3B9WjcR
VBf/tqWVFwF14+apB5RMaRXNQeaPTOPL1RxZshUsSihNi2pC/sRMe0BJP8Yn
wIAEomIFnxy6mtEDxoV2UR0BYmoIfClhR2IewLhVxHf3Lh0b1BhgOnVt39nA
QR4joIHvGVvoggBZdWZzKIm5NYiVO+4vkF7MXejTUdAMrCqAPhbgS8SIugnG
QEcdhZHtBTRZ7NOqGPBELV1/7ljIrrS7ZSh06CdSGLR+tAN7AEfCqERMG9Y3
tPcE6AOEUocu5akCvT4Yz2GvpHXZtjvPA//+8/kBU/C6V0dMN/Y9/ju3uH0f
39oH+9ae82f8bnt5wJT2KN00x0fB6/y9PHRw71aHDuaxf3HoYB1ljvOdQwdd
OjIQt2gL+PHIgCJaLtUygREetzpyPykX92ErIba+ZmZ/b9NK5oHTHmAwX9Ec
+PlyZVNtziNfnBvhJGtvoY/hA85z1Er1aWYMz46fdqODrkKhrsGM8H3Dwd/q
rfG0YRz+iDyzqw42nA4JvXdECKNVn1yP0eHTW29cdmzKjfUhIaNFh4gcXdWD
Vomfkek1jJvLcf/VqGlr/F+P+69G/eXqB+O2MO6N3Ntbjdr53qiBL7FqBOAM
cmUb4w9d/XgY5p4KuWeHY3T8DPZqLEaca/a98TjQ7p5GdCx1D07bcrTEgt8a
jpkdHJPNIt2BvIhbUXFHdfat00u1aRYqnhlrwoi3kd7O3F44YoaDT8EuAW/l
4+GY7W3FaI20XTHS7nTwpp3XittTrgZO1n72eAI7seq4x7wzqg5CWB0OLhpq
aKXj8f5NvWPZSlQjhO3TEQ8HjpIqvJVsPX2HjL4Eg950JobRR7bFiNTFg1I6
o3nndJRiwUXSHeXWXNxzjKjt+OOQB0qoRFq4T+bJjfASPfLVfkS78ZuDEuDQ
dETGVeiISdiiI9TCHOWwHB184xs6dLtDNnny1A6TvVba1oizLquONWxdtBzr
bZHkxoAdkKeHkb6bPWhCCRDTng497YXEb/veIUlD/4+tyPMbu5e2RkreGSh/
qA9qBlb1bRVk/f3wvq8kPhh86qlGCl6jhYoxjIysTXWXgVbu48IxkqxUCEfk
2QYlqc42zDZnZxtEMDFpD8EDnV1470hfUZ8TeOeUAHhFd3Q6JQDm4QIxJzqb
2XOj5YPdOPzy9ANG2ZnSMaXsZufLQ5RlDwg/nxSbG9YrOx6xoPrwt+PIw9aC
7yf30EI65Wz9po42OvhlUazVhwblESDXrI4ljYjBO1GWKXQAfcrbt8gKY4kA
4wsEaHuLsjoNQccO347yy9V74/xnR0kV67fj/N4owVStxdko3XqUFEfF7kdH
n37m4BNmeiSswSgPX2KNPaDHw6mZj6Z6qkU83LmtUp/c50VCseQbm1gPWaCm
LdvrtwLefgFTPLjdO1LCY2szzZyOe2+3nIN9CA7WS5B35pNe6MV53k2AM7AI
S0xdC9zN/J2DT5ijvzj69DMHn+iQuDz6ZNxOe2UL7H3r9bIX0gL+uEyje+tg
e04uvHxBp2veHnxqH0JCBhuId0i8kTpZsDYd7xv5jIfc6Ez56CZqjhm+Pvik
yINPjA4+uWOqY0KrR27LeWJZ+z5WyodQdNZMUTueKbai4G3Gty2vuFMcT1eT
VroRCzGAFcoRreNDlkd0nM6Lld2Y34sbrhrCNtLdNA93QyPHHAW7AHM3zZLb
6b249YpkHsudyaeDT+8de/rxoad5Wp31LYzLQ086JDjfIFWAPL9/6GmRfPfQ
k4uAGJ2dTpxQwS0XvK2BOHdBlCnlmUI3eJPwYkXVETtIeI4f0Wlhc5NCorRD
CkFd7dTvPqCznIukBYEQTIzjWUGEK2udDhgZS5lk5TshwlfvpTDaSPMYEb2Z
YjTOARTt43spqp8Nei8FJl6FpDUc19x8b5Sg4O+M858dJUD8nXG+M0pbSZRd
5zRKx+dqOQ57HXr7hizzplaohpuhZ4AYp+tAy7v4RMDmhjzX6UKqyXPr485s
4jsLfrB8gJcZVadq+3DvL1e1gzsdEJ4zh2cd7js6B2Fk3MLjty+xahXefb52
F8KciO1LoN1QcaEXk3VH4+7dLll0Vs5+s3S9/naot5ciYy+QIfHDIXng3Y0G
OA6myKsjd/PE5+HKWVip5/Vvwnz7Is+KGwM1VaOe2DqQ21MIbnigM8nU+xPc
fv8c8LQH+5kACIJ01zY6IBN49olUwIeNl4tjZfKdGPoWqdRhQty7PB0OWqIz
ocWoPBFpHqvbl6k/2iWqrdj5UmFGOnD0cmP7+io8OEGklotwnvLI3D2PoEZH
445IvPAQLvI5o6LFy/QeMihPN+Fs8zDsxUp8Hx54nuyjQt9xYW197/PemY92
rpHdHVP3MULFQia3NzE6yr5zLPH7Efp/2Xd/GKHyHPKbGP3pCK1HiZj+SST6
0SjRyk8i0Y9GCQr+HST63hsA3jv/T+k6y59HLUELXYdQc4bOwXiBHxxsHvYo
xiCKF57ovESKug1ze4+/xyCVbdd38C+INr1dw2FZeh8UQnPnYJnet93QE8NA
lA9e7ry4xucD4saejkU3uk81G5YeilKNcouPMoYknR/Js0DPrPihlTBkBSCR
fJcMCQrjNXlH3zALJB0hLU9vroGsRkwyoVhdPi5vpotkyxcdewr8+F7KfoeW
Ekmkw4j1UcTQtPpcU7XAv3uK7jtl6G8iCJyhOKTMNnfexOyrA4VhtLCN0n4I
1H4r8XcQxImZWKHGttN5OONZsGd6uInNfDABwbezpC0K/SYQSZZou36sAL1E
EgZKpnA9GQRFTEcRqzfDrMN3jyJeHES8/X3TWvxx2EPo3fRtbQCt8id/0dX0
UP5+dzMyHO/J/Ng7eKvOaKPf/Hnzce9Cg+2NpJU93gbdRasdBNbv+0GrnbTW
m/3yz/1y9vh18Pm7BxGPZ9B+5iziXxwg/KnjiKdv1nePVacO6egbHYOrjgF+
kG9AvLzn5597IdqbW9LeecpfP+TnDuNdf/fMXD3Y6tzcnXr7f/7Y3Hsn5n50
Qq45H/fl6j/zUrTmlWhfrv4zL0VrXon25er0UrT5t2fn0NdkzWrRKSdF9VKl
iaamkX/z6rVn1pbOao+E2CA9k9Y8vvgs3oZ8p7rdzfmLz37mtWdfrv7qxWc/
89qzi+SVPgpdVz0kCtKZnuc406yskhe/4yOPjkEIqjM5tqLeyteeGYJeewao
/4sXn/34tWeX6pnOfRe76nVdGWP/5Jl66F5P22iRyvqJl7KJMToggQxsegeV
F69Ey+l7Wn8rBFpXDDvRY2gZ8QBa9RT54sa+D144vXIidERnEPmWFiopH802
5oNq8KhI8ome9qYgqW6r06LaW9ByvKlvPPGcdZmudt1KbWdyLc4Yzehseu4g
icM2wc1IQRIYJ3pYE0CuI7G/n26aZENK3gSV5eot99mBde+eHvabhd/9A8+3
Boil/oOabkAs3ql9JkM3o1eQoS+diFR5D2llv7E8PelyPVe49k0J5vnYN9PA
W4hlLJyRk31bBbM7e7S/K0Se61GuaxP54hhGtfKFcEcKdP1CP0z9tOt4KffB
N4JF2R92N48TMx2Lcfg4MSzdVkMj5iwLVKNFL475j+u8YnNLLFKY+YXOA7Pp
Rpmz8r+v8/6Zl1vokhP+Z19uQa9xoJdb0NsB6W2BjzJscmbZumpOVApUWd4x
KKzgDEP8vPXkFmp2y/gOULA5loiJI4PQZwiTnDUlPRlmTBcXfeBevz2FzmHj
DkLQaYqtgJtES5qXVdTfYDNbKQFDYZQUbAxRD42VL6hcOyks+bqMKbdscH06
usJHAiPqgsEdi4Ru9aa+48/05j4w3vsRN7zRIZwB1DoTX+xsEbacImdxbh2G
dIRp6+fxyjH7gLmkHZrqOD5YPVjUFK1kFiE92EXb8vVvB69l9F01VIc9e88X
YQkXHkZwK5feT9Z19VQZFaxkmYj8RThztLsb4sp/8bbA80LIl6t33wHjemzk
+9ZN0nMOYJd7tHQDPqhMc/HCwfR4y2mH+vYAVQkrtBHiiekMhz50nZGOKt0U
WsHceRko4aOtWBwpyGYLJ3Xz0sXMZk6rfEzGzjNajR9U8FgNc2S4mnVAyJcC
YTJ2kYr83YKSGhPgxV4w+zp6j5YpXqedrz7Ga3X+lEXaizMZFa1JJ/C/PljJ
H4dEDPpL0W5Nl1rwze17i8Eg+HLlvfRsvlW2u7ttsn92xNxZfv72sF87/W/6
Sx7nm8733w9xZGMVe3mfjr2hUkeO8x9iYh8qejRbr5+nyZG6VPeknC4TO/Gl
00UE/++ncN9/7cE5hWspyv8fKBzn1swd2zvHsw5A5RdxSNypMGxfd17Cw19R
uGwj32AGCmff2ocYFC54tg/f9v+icP+icP+icP+icP+icP+icP+lFC7p5VtK
aqcUqT4lLXsVLRxKTe+V3r5cvcfy3PTJ/+PZYNnz53H/MP+cdm4my9y2F0kc
/G4GT63BZHl3s38xN/NutNPHrR5Mc4tBcE+3/sye85Fq/n6/iPjN7Nv9Y8LN
TSzuHrLtL//48FNrbOxJVvD9y8D1jaxlF9bMz74buFVu+dnMQg76/dzyncxi
5FV2O76XHcFy9mZ2Mzl0bqtApa0xcMCMK8iPA3qhi9NLjWlmuE3GnSjqPW1b
4bTw7dNWZ8dHjlXUG0BBx9PPFr6zcBibrCfGaQ8OO25a8NCqbVhakCcmwvTL
1dotdufvE6cN/dVr7hZ5wxPAI8Q5b4BDi/7I61gjhCT68+VKc+mledV729+8
tZ1eORcfjIwbovSz1EnMuxXX2M5VYzUs2uNYsbJBy6C3rt4nY16ERSiS1dRP
8qC4G4RZvgZY7AMt2zvj5DkyAXaZ04sKcJa5aLafVK/ko7eAO6PcqF7Kd3ol
X1dmLcwRw8+01kZvQ/WUZrk6lXmTVV7RdagG3kLmrte2rC4abvF7ZoWmsxFF
O6X1vkBTzSnfBRXLMVT5tm3TGouFmCN3l6Fuf7lS6V2xXHH6k+z4dvzq3fie
vpXvXdbbpTOGp6mhAthSp9lu7M479sQT6/BsS8zrlwXmVJ83qT4/NXfZqEij
mN4rOxcD794axXlyj+D2nCLVfRHvphxe94h5cIOxmMW6DYZlWMj9VgQ+x5Vy
Fiq751BLZwFixzbZHElPiALgId/c3sG/ZWtK20Uj23DWdvFNmep5gLn/jwAJ
/OU7VXznZjkWN3+I2+di3bMHWZq4bmEFxkZMbqNv8/uW9jwu+7m5u30S+u/3
qfJxAoxNGdvPF7vyD6Uv/jT2Kvs8HPf7h3Vr9Ed3YX/rfPv2s3LRh2aDDHLR
pX9WOX74GcH3XXn5t+sePrtcybvdu2m0oOvO/hcpHx3tLVf/TnegRWu6x4fu
Xvx/rv/+NyikP9PqS2jgcbXEN+nLdJFnucG/yfR0adnVlUEd7euecZ2soq+b
a+WP64//8+IXd/JabKlir//2h/LhdC/X3//eXGm3//M51v4sy+gf/6jGG+fR
6nhVU3ObanWHW3Pj8fFCm0WcP6/ra9VM9tl9PHuceva4i1u55VOK5fHac3k7
KOnTP6s38f1JV0CdNaR9qB5E7x9clvVU0EWDdQo5u0P38p5uuoD+J27Zbt4M
eNHJv/99NX36uF7m9JZG+eG//326i6t5lCZT//GPs062Loz7qLOjVq9vgHr9
ddicLtWqrLGQrzBcopMfq1tti+pK8qb13z8000IX75zdW3d2Sd3m/Xt2F/I+
n8uOX581/cdZ0x9Or1GUl9qQGcqX1aoeAt38LH/3anh0fV19ne6biynl1cHy
vke6x+rs0t3Ntc1dT16SehzP6zF8OuvonXpug/oi0vW0jOjOv+ue5z1S64va
H+SV1HSJ5eR0N2Z9L1I1vGYo704KnorhLfMX+XJPugCPKhdTGbcUBrJL6+Ot
kMe7Q33zoXv9a2WZ+m2ZdfygjZzakLdN4sFsSvcqq3WVhv6/9tvZ9U74hLyV
U15Lt6YL2+rrvsrqkr3/dv1cVpeWyveGTuF266t3EOH314jwh0SE4+B+dkjr
zYxufCvpNZrVB49m+e28va+z1Xpzuq/q+HpPN52WANnkeCPWurnKq7p47pHB
E9uNsT47ffvz9TcExvPknUHdvh7U73JQsqeVCatG6WbOYvkSHa+qq6toTaBW
fWwuv6XrFavuzujatfhZ3vBGt09Rsaq6k+9D48DyxkVY5KIlmsvo+dvZ5V2X
z21gTF6Zlb59vyuMsp2i0WhdX1I3RXKYRd9WUUEzvi7wROr9cc7i5WpV+fv6
HTO1X5vpVpqJS8ehrjU3nx4vcsNf+1Ww3QJw5NXO00V9130NldNFIu/Zra7s
XVH4VTd0k6ciZGfSU8t8ua8ukkOLDXRvZIjTZ+livlNDy1dX4zZwTG4onWX5
7rWkaPp0J3XtVpeO5+rd+z67nkYreY+9/MSv9LLd2WKZL7/tLzMdJvcsGuRN
bdW8/vbXT+oPvf+aJ72dxZvXs9iWswi20tyAmFx4axq9TOXFmPWdh+saEJur
6aobl+U9edJh6bJeiUz0w2nKz3PhhwaCf9fw5M8JTeb3Ls6kxzzLC0nlNbs/
fyts84g2HtE9wnzldR/pikd542CVcqpr6DDm5+qux9O3W9I0CHp582Rz4/FH
Skh1dK9m375Nmzs0l9drMtcEYwflJa4nb46l79e4sJO3QKer5fO3tCYf69Pj
FOqsTB/J9fl0kxVOFyZf3pYss3zj6vWdrRd3SSP8kRyTZX3H62JaJZKJvJSy
+sKxB7e3xxmhoDpdu5lOo4TuxEZ2LKaE479WN0MnH5eL3yTiIgGe3TX7FbZN
F3T3tLw0ObqY99tzsx4TDn29+7lzbSxXzwX1uunttLpZXN62/vGR2ce5j+RV
zk2jNNN6Q5mmq5UEkaS6E7jx2van9if1+JXW3Qd87+b8e9+9wJXY3QoMM379
p2Nr7bsT3rWVywvu5SBX9d2GFDbVjffU0SM9O97+eWrm5vdqTaa6xDo+3jj8
6vLsus013Qf9I19orkXufpb2J5XxytHQ9i9nPaqC+5cP17+cWpFdOP7+7MNN
2jn+cbqJPx2to/1+/kzKdc2SEEAfhjolOXplOUmfisk29/Ae/XK6K/NocTSF
tE91XT2Z9zhCOe43U1+h0tlvtJMzkOvfy9tak4uMIp2vTleX18fXMDJb0NNP
nthqnz/3NSWUr2nvf3Y+v+dipy9VD/xzWkr2eEx6x4szqVPr6YtceWtuvX/1
1PrOzX+c0YTG5s06IC3HnTy4RXH5uHysRkzeDp/JpvtLjDl3qKOOQrgWGEBE
WvNDw+n+1tLkqP52cxYarbe8u7rA/AjPFdmOJYGJ8xk849/oynOADvXra30V
K2jxbxfapokZ7U37J5lNcCI97Oza+zfJoFLpC4rNtRT4tYbZo2ObuLpePYI9
N9eImevLJdTTq+aX1MvtDH+YbernJqtleU5+6nvFl9n0tcw5G07rzXDOWlin
FEl0b61sQELy9WZWTM/vJq4yVDP19W3o8kNpjbLyZf7r/SJGYloQLH243k83
n9ALt3axM5JYlx4qA53RVVgV7kA3D5On4d8kmszoKvVP79CQ1msaciNpSL++
6JZVnAfIeboMN0eL8iG1c2nax7/dwpmqCwwog9PlApjOaVmZfbGZfiMxl9A4
6F7byobyZmZ5LbMsw8h7rSuW/T0iXd3dQLT97o5iG49AVyTTrdohhSXN9Rai
JE86Q9hfGlj5pdKRkpyeKYRjMKqnVHxZQZE+8FqWV5IZfB5hQ1IbT6WMjH8m
cER6ynIBqH0+JWH192P70enO66r1BVWIcpm9a4lD7RNjiKlyRP7RtPLHpXGP
LPISjEALPk4XLwR9zRfvzjjAfDmTl0ns9pWIBk5WxbW6UBBdmJVqYJvp7mQq
TTkO5UzV0gTVfK/7mWJrfYL0MkfEN0hypKz0BanpJX+tthigzTqZnCCiSbin
cs/3wL71j3/896puEB1JVZWsJPNpYOnYr1+/15BWW+KdxPHbkYuvzi+9aKoT
PxjHyYAqVQAaSpLUSTCaTEh71OmpVlFHbXAqJZyRME27ZBa7DcmxY2nw8o7n
5jst+qHy8f01PllOL5TEmUaosOhS/IBtUxwtF6+l1Duoo71GndaZhD1LrkRk
KSKuf6HGb28kCZkmoLLP0//xP36RBt+14+tlDLZYV0uOSboqE6IJV5jXAKAS
+ESp7Fu9T6bRoReqq3a/IzWRl79AjWzoupUZvreK0/05Ua296FQpOCuAzi7K
je+i+LlM/GcsqL62oFbhdh3U7TNGcCpzn3Yz4RkNokhQvRDpf+X7p79H3zZ/
lqsdxnYtN4i/5scFlb0qftOs8NMGqNMN9z8O2atzxnVJT+XU/3jHk/xI40oX
TVWi5EQ0pAkaEPlKPGFW5WNZ2aCgqBJ61HzodWKiQvfi+h0O/oPxqdX4Gug9
1eBoMqIqOM8R8WjLrsuarH/2vGYsSeXDBBGXJLmuPslsS9fcR6tv0w2Ntbpc
ByBFBf/6YVEVJQiYt+qlOgvQgNMRMutyzzl1PK/T0mSAmSJLVorm6xH2z5pe
v0dRlNeurr5y9YaQvFm5wJxU0r5ailh8JxZelaGakTQBcryJ6YJYYmBfl1WN
bBsdofS9Sv2ZGn8dH4/DxzePX18w/p8Ix3cC5xMZqNOgSZPpwdGiS0W1pXpt
PZHvJq/pQoZAMs1nMm/UnW0y2TsefzRS7Qi/YgRUXF1Fa2kKUAeqUgy67t9U
RQ5vJhVQ1dRvsuf303i2rhepmuUM+i6F5DGdfm82q8k79ey0t7IukdVXZJ0t
Rnxev/rOiWFsZX18kV8uhPw4OAAeMTHShQy0yfMsT6oHEL5faCe0KflV7RDP
m3WzjtGE6alP37PM741lGie7BIrv4YGsRx0Tzo8H9Tqwq05djuQyiKnWt1xf
wtrf2mfI9joSZtPN14+HTflxsy+BYs9SIqGH1ecgHa7lNtiI5n/59SP+E9er
p+cR8mZBTHaltwQCZZAzePC/n8qIOUmj/Vl96HwZRNKO5Ei2JPAkM6rK5/tP
V2/IFT4nHf9iqZECv+5ZzX+bFaTVxwI8hpoxZju08ctF0fSXY7FFFvQE+zcm
2NWRfv3ocrPTZWhNffAVEccfYcoTRL3z/XdwRo5YXsdW0ef3P0W5c/08Acuv
CrmE+6eVRzxWrmtIC1RjOy1yztZ1KbQO79cX0tXJuwH2fFbMah7QWPjXRonn
mOgqPx6LDGh3G2XSiZ7LT822atqJTb9GhL7VcQ0BaJYwf7v+tUk4SgVSn+Ez
K3q0dNmqVIZ+y6JFkzpoQdDoHheZqh0BRGVyKYevz13u0/EJN79dsJXT+spp
bWX2qjQl/zyZbjYyX50r/gsGddxD/rxJwT9rnoSuxpls4bUVKvAgcvfgSjKy
Tslgf5GVAKiU+Y/L5pWERCtnn8Xvjm4jTVYVc867RQUEwiZ6dg7inMvRHIn3
K8f+pweH/lzA32lZAWEllxF+ZpRo5dU4/wOjJEc4YsTriDwNvVmRuOipLK9S
qRb5cLWK9lXZllaBquJhI6NroKYovKgbnmIwn9X1L/JH+kpTvG2YwWW1+01L
13FU179WF4cV3uNEcjUrmX2VSw40Fadnrl+hy7kNf22ojIYYvK5SrWSZRy3f
VMVqHJQ1JmDts9xUgWb7H+8/yVwTLWZF9HH1Na6js2Ljn4/JQH4TzE4y4uNz
f3sDRReF4OhY5XsrGl5P7FW1++RCNzR/e0uDP551erJaZ7OPEdUJ610lH8/q
eOefKVfFR0WRdNmWSY93tQZ95C2mNf1rGMKpkHLMVGS9qoqJDv9kVyR2n9XS
mql6M0tVTSkqN6faRlNcqCNvXdW8KWWjFZmLz+K+Ktw2GyXoo7yrfrqcyK/I
ApOoxoDXwXVROJUZvKpKLmPoc4rt85Vf6UCvWpAm3mM0RMZP6/yV+6GB761j
/UpxN6XGF0jUScV/Kju+esJvNd34q8/R6MkBXv+eeoi/kfUaZKgTRS7XkqXe
O2mdvK7AbKYLcvH1f7/IbDKJHzcENN/69W+aIiODN6Ur2c3XHZHdPi/bvvep
K5ldjjs6GhSgzteFsZqr16D76uuXGa/5spzZM+ddTDdEvT+uiXHG69VH5faM
m1Yz97o8jf7SJyt+itEv32qG2qfqPr+nZb9T+DpnqCea8G5JQHbrXZu9U2CQ
DPqVm0DznSet11shIaa/XhrxnBbjMQ2kTvPqoVQRm9HqdFUmPvU0aggScXeq
2NWJi+rLxN/2MnxhU6K7UbmWi/4wdLXNwA29R2KTNXr/9p41v1MEaxYPaV36
tCGiWZwjGKAliVUUH0EHsPjpeljvoJAJ8ZwdVI3T96yhq19XiffoonQX9Nco
bvYJ1cHS8Oxmj1nz9JoFUN4qYYgoTt+Zuppwe+cbTeRf//1Yq22SSpVOYYa3
VQcaQhXozwTk8rRe9TcZ5Rj7Xz2ldf3IHx7+7ZG7PXpE/chKmgIfKxFzfbbj
8pXAqbi37EKtss6zDPxqdepG92KH59E4zS7Pi5W61zwuromRXOBHqiCDgzV+
fHQHDdAemRyxSYQBOPVsnRbyhGadiNfrZTx7tfdO7vSTAlc6gXSWr9ELXEFS
znwv55Y8PJ19o4/l0f4MtmQpuXIIyShrL5AVNNohfPY76sXqfCGXaM3svKb2
BvCp103tK6I+HFG7qdOc05+Gxb25tfucU8no2UDzVNu3Vs/rk7es01n5o123
57ry2OrNB+h+/Pfut9PQ3oGNOsdVBe9ql8oZksjtSx9zWYQ7LzTQmC7UbN2X
Z7odfXNcp1tSgW79Tud+p07VtOI7ibqGwjNVLyf+bKtM9UyaZerqOSWugWzQ
v68A+vTJxh+ajrR+/+1S3JztJDilwJ+KhWOSf1PLq5faX4PwxRoaGjhx3e8j
03/GR451wboo9BOO4ZYQs2R4WmCXKkM7A3eZiylTHCnjd/r9s5Xl007KahFs
drFyWq+vyxUm6T3Vuvf5dgKZDNZyGzNtl6hrgrO1XPuV+2JOi0RooNpb14zs
rLr0asjvpVvSGbXD1jkHBl+sZSGwmYdXOx3OEEXOy6czsjxb1+FAMEn2WyDN
X8DlO62ebbyvutA87HLf67HqfE6qztv5VBXEaKfxK3HfzGUTGNcVC/u1qvDI
HdVkr9+uTpsM4+MS3GnVs97nV9dSjsTtVFaReb9aXZXTdIqfIxmgEX3MFsvt
4ux7iazASiiibcoy2E+U6t8+nX2Jsz7w/+RiUnDn0JObldzz2AhK0rey4nbc
alKnFMz4v0nZ9RrRT+S96RelJaryyumKMvwv2aHJKnIfX+WOjVD7dL4Ke8qC
l3zQS2Gc9bU/XS0osa/Ph1rVNo49O2vXqMqjyexlljzjk+iIzFRvd6Ao//5G
ZL+dQnKK/8oZlJFMayMNT4goYZR5FB/Xq07b1dRPrQrRq0r9cUxyAKdoJ5bZ
HBdoivNyFwhimlhLtJ6+Wc5HMC7e9QdqsCmOyvmwAaByp12NxcfK6dH4r4Ty
OWIeg7SO3SPKvAaYD9fTT98+VWySNg0UYBNyByNZdTZ5biK0rhVdLAE0jtS1
H0+jkGVxehyIcgokof+VnzjThfjxQ4MalVM0xfp6kA1KLaYx7aaCX1zE2HFa
ayw9W6GvTyfIoySyIiKL9PVhk2aGpX3OVu4/XbvHDdSvN7bQcgTV76Bm5YoP
MupkVhW45W6AevWV1tJ2td5u9pc23TueZUC2mZ3rlvV5zeJEKi8SP1VljtEh
Z1eK3b//nQrPd3dtue2QyiKSGbwsZ7St/HlSrSqv6q0hK+nOx50k8Wy6PktD
cgsKPSyuQP71IsdkWh9qWc3W5Ym21XNULTTTtpFlLt3l03EbRLPp4mw326tw
qAhNvfe9lhLNFni5Z+xINU5z/OHozWSb03R9qDYv1L24DI/1GydYEwA3J/2O
rkLLnpjc3Y8ATWr8ix0tEufPt5HTV9fTXC5i1eemqPETb5WLA68+0aQ+afCz
A0S1ybb1hh6ZhilcT6qvXuF/daaubq/eZXl0T0Km4+rlp1c5aBEVdcVIati6
iXpT2vHkD5kOMBblGPSiQjGqXh03r2Ea15vzHcwVy6t3r50WBWW1/AyOTrKw
wbhmmfSEqOQslRnQwtc1vnr9OOi/S+OrxfAj9FXlJfndH0zEkZrLM2CTJXz9
tC+kYvyR3LgzW9f7KaQPL/OLI0avCNh5dfQin9Zhcco2VdI+QfmaVBwpkUoM
Sj+6jCX53fNDH9KqJUxdG7qG5g9V+eKoOiWbqQjFacf/8cE/CgBZlqlrMacA
uEQNgh2526ypsOb1GQq5KV+u/kpc7VeL0dS3avnh02Wrr+D4wlum+Wlb1rFK
ICeusuL35MZRhV1IwYqH1hD+zmmBM3vTTEtc/XrCf6nGzhLReUJoMGn9NvP8
wMxSvbyRLM16xIeL0xnV+iDtRKj9e9mcLiXfOrL07VKGxLl3NOGxfiWDah2Y
T4+mb/YtL5/X5wW2CmCaV1pVNFmewTltLWie8Rpt3mS+WJY5GjIwmVYbpCrl
SAtg510oSLxUK1AzSSVWcsMO0bzl5ji1xJeqlbFjFJ4OGl4eM5RPPiFaGdXr
edUbxRZQLnL5Tz2KrFNF6TIR/ZXjNYTz/4Rvd/8jLt04dMVz/mmXfuXQ/+3a
OePZSAQr+Y1mfRQPeY80vdu9yXGzdYWzkyWSHtHBmPYY1Gn8fwM6cbFQrnoC
AA==

-->

</rfc>

