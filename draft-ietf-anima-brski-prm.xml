<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-11" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 130?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 138?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer site) domain.
This includes the discovery of the BRSKI registrar in the customer domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer domain, specifically the customer domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
  <dt>site:</dt>
  <dd>
    <t>In the context of this document the term site is considered as synonymously to domain as defined in <xref target="RFC8995"/>.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer domain does not offer enough physical security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication.
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer domain, this document specifies the exchange of authenticated self-contained objects with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.</t>

<t>Note that the Join Proxy is not shown in the figure, having been replaced by the Registrar Agent.
The Join Proxy may still be present, and there <bcp14>MAY</bcp14> be some situations in which the Join Proxy can be used by the Registrar-Agent to connect to the Registrar.
For example, the Registrar-Agent application on a smartphone often can connect to local wifi without giving up their LTE connection <xref target="androidnsd"/>, but only can make link-local connections.</t>

<t>The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="456" viewBox="0 0 456 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,416" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,416" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,416 L 424,416" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">PRM</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="336" y="404">CA)</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="448" y="420">.</text>
<text x="288" y="436">.........................................</text>
<text x="236" y="452">&quot;Domain&quot;</text>
<text x="316" y="452">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  PRM   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI CA)         |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols (including HTTPS) can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a store and forward communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges.
It can then perform a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar EE certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that this registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer site) domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a different assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
"Agent-proximity" is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the registrar via the TLS handshake and pins that public key as the "proximity-registrar-cert" into the voucher request.
This allows the MASA to verify the proximity of the pledge and registrar, facilitating a decision to assign the pledge to that domain owner.
In BRSKI, the TLS connection is considered provisional until the pledge receives the voucher.</t>

<t>In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and must take the Registrar-Agent LDevID provisionally.
The registrar-agent has included its LDevID, a certificate signed by the domain owner, into the PVR trigger message.
The registrar-agent identity is therefore included into the Pledge Voucher Request (PVR).</t>

<t>Akin to the BRSKI case, the pledge has provided proximity evidence to the MASA.
But additionally, this allows the Registrar to be sure that the PVR collected by the Registrar-Agent was in fact collected by the Registrar-Agent to which the Registrar is connected to.</t>

<t>In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information once the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.</t>

<t>The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
The details of doing TLS validation are <xref target="pledgehttps"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar - Returns enrollment-response</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its EE (RegAgt) certificate.
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its EE certificate when establishing a TLS session with the domain registrar for TLS client authentication.
The EE (RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete EE (RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the EE (RegAgt) certificate allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the EE (RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the EE (RegAgt) certificate, the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>EE (RegAgt) certificate and corresponding private key: own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar EE certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>As a registrar-agent acts as representative of the domain registrar towards the pledge or may even be collocated with the domain registrar, a separate discovery of the registrar is likely not needed as registrar-agent and registrar are domain components and have a trust relation.
Nevertheless, a registrar-agent may discover a registrar using the basic mechanism specified in section 4 and the appendix A.2 of <xref target="RFC8995"/>.
Note that this discovery, does not provide information on specific capabilities of registrars.
As a more general solution, the BRSKI discovery mechanism can be extended to provide upfront information on the capabilities of registrars, such as the mode of operation (pledge-responder-mode or registrar-responder-mode).
Defining discovery extensions is out of scope of this document.
This may be provided in <xref target="I-D.eckert-anima-brski-discovery"/>.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
Note that <xref target="RFC6762"/> Section 9 provides support for conflict resolution in situations when an mDNS responder receives a mDNS response with inconsistent rdata.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.
Note that <xref target="RFC8990"/> does not support conflict resolution as mDNS, which may be a limitation for its application.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the private key corresponding to the EE (RegAgt) certificate, as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the EE (RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA <bcp14>MAY</bcp14> issue the assertion "agent-proximity" as follows:
The MASA verifies the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided EE (RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
The assertion of "agent-proximity" is similar to the proximity assertion by the MASA when using BRSKI.
Note that the different assertions do not provide a metric of strength as the security properties are not comparable.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> handle/trusts pledge's IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication.
The distribution of IDevID CA certificates to the registrar-agent is out of scope of this document and may be done by a manual configuration.</t>
      <t>possesses own credentials (EE (RegAgt) certificate and corresponding private key) for the registrar domain (site).
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar EE credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to provide privacy for the interaction between the registrar-agent and the pledge, see <xref target="pledgehttps"/>.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the EE (RegAgt) certificate and the domain trust has not been established at this point of the communication.
Verification <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the EE (RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification.</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own credentials (EE (RegAgt) certificate and corresponding private key) of the domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar EE credentials of the domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent EE credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar based on the TLS client authentication.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the private key corresponding to the EE (RegAgt) certificate indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the EE (RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the EE (RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the EE (RegAgt) certificate if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: EE (RegAgt) certificate or the EE (RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>This document uses the JSON-in-JWS format throughout the definition of exchanges and in the examples.
Nevertheless, alternative encodings of the voucher as used in BRSKI <xref target="RFC8995"/> with JSON-in-CMS or CBOR-in-COSE_Sign <xref target="RFC8152"/> for constraint environments are possible as well.
The assumption is that a pledge typically supports a single encoding variant and creates the PVR in the supported format.
To ensure that the pledge is able to process the voucher, the registrar <bcp14>MUST</bcp14> use the media type for Accept header in the RVR based on the media type used for the PVR.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The EE (RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding EE (RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the EE (RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="exchanges_uc2_2_vc"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The pinned-domain certificate to be put into the voucher is determined by the MASA as described in section 5.5 of <xref target="RFC8995"/>.
The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar EE credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar EE credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar EE certificate as well as potential subordinate CA certificates up to (but not including) the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>(For many installations, with a single registrar credential, the registrar credential is what is pinned)</t>

<t>In <xref target="RFC8995"/>, the Registrar proved possession of the it's credential when the TLS session was setup.
While the pledge could not, at the time, validate the certificate truly belonged the registrar, it did validate that the certificate it was provided was able to authenticate the TLS connection.</t>

<t>In the BRSKI-PRM mode, with the Registrar agent mediating all communication, the Pledge has not as yet been able to witness that the intended Registrar really does possess the relevant private key.
This second signature provides for the same level of assurance to the pledge, and that it matches the public key that the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).</t>

<t>The registrar <bcp14>MUST</bcp14> use the same registrar EE credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This has some operational implications when the registrar may be part of a scalable framework as described in <xref section="1.3.1" sectionFormat="comma" target="I-D.richardson-anima-registrar-considerations"/>.</t>

<t>The second signature <bcp14>MUST</bcp14> either be done with the private key associated with the registrar EE certificate provided to the Registrar-Agent, or the use of a certificate chain is necessary.
This ensures that the same registrar EE certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".</t>

<t><xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": BASE64URL(JWS Signature)
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information.
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge.
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the EE (RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5bag" (see definition in <xref target="RFC9360"/>) in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5bag": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher and LDevID certificate and optionally IDevID CA certificates.
The IDevID CA certificate is necessary, when the connection between the Registrar-agent and the pledge is established using TLS to enable the registrar-agent to validate the pledges' IDevID certificate during the TLS handshake as described in <xref target="exchanges_uc2_1"/>.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="368" width="528" viewBox="0 0 528 368" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,336" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 72,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="108" y="260">supply</text>
<text x="168" y="260">CAcerts</text>
<text x="244" y="260">(optional)</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply CAcerts (optional) ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status

]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="exchanges_uc2_3a"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Validate the LDevID(Reg) certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert")</t>
  <t>Verify registrar signature of the voucher similar as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
</list></t>

<t>Step3 and step 4 have been introduced in BRSKI-PRM to enable verification of LDevID(Reg) certificate and also the proof-of-possession of the corresponding private key by the registrar, which is done in BRSKI based on the established TLS channel.
If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="exchanges_uc2_3b"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "pvs-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate because
  it starts in the future (1/1/2023).",
  "reason-context": {
    "pvs-details": "Current date: 1/1/1970"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>If the pledge did not did not provide voucher status telemetry information after processing the voucher, the registrar agent <bcp14>MAY</bcp14> query the pledge status explicitly as described in <xref target="exchanges_uc2_5"/> and <bcp14>MAY</bcp14> re-sent the voucher depending on the Pledge status following the procedure described in <xref target="exchanges_uc2_3a"/>.</t>

</section>
<section anchor="exchanges_uc2_3c"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHOULD</bcp14> only be done, if the voucher-response has been successfully processed by pledge as reflected in the voucher status telemetry.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5bag".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The verification comprises the following steps the pledge <bcp14>MUST</bcp14> perform. Maintaining the order of versification steps as indicated allows to determine, which verification has already been passed:</t>

<t><list style="numbers">
  <t>Check content-type of the CA certificates message. If no Content-Type is contained in the HTTP header, the default Content-Type utilized in this document (JSON-in-JWS) is used. If the Content-Type of the response is in an unknown or unsupported format, the pledge <bcp14>SHOULD</bcp14> reply with a 415 Unsupported media type error code.</t>
  <t>Check the encoding of the payload. If the pledge detects errors in the encoding of the payload, it <bcp14>SHOULD</bcp14> reply with 400 Bad Request error code.</t>
  <t>Verify that the wrapped CA certificate object is signed using the registrar certificate against the pinned-domain certificate. This <bcp14>MAY</bcp14> be done by comparing the hash that is indicating the certificate used to sign the message is that of the pinned-domain certificate. If the validation against the pinned domain-certificate fails, the client <bcp14>SHOULD</bcp14> reply with a 401 Unauthorized error code. It signals that the authentication has failed and therefore the object was not accepted.</t>
  <t>Verify signature of the the received wrapped CA certificate object. If the validation of the signature fails, the pledge <bcp14>SHOULD</bcp14> reply with a 406 Not Acceptable. It signals that the object has not been accepted.</t>
  <t>If the received CA certificates are not self-signed, i.e., an intermediate CA certificate, verify them against an already installed trust anchor, as described in section 4.1.3 of <xref target="RFC7030"></xref>.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "pes-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Enrollment response could not be verified.",
  "reason-context": {
    "pes-details": "no matching trust anchor"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHOULD</bcp14> log the transaction provided for a pledge via registrar-agent and include the identity of the registrar-agent in these logs. For log analysis the following may be considered:</t>

<t><list style="symbols">
  <t>The registrar knows the interacting registrar-agent from the authentication of the registrar-agent towards the registrar using LDevID (RegAgt) and can log it accordingly.</t>
  <t>The telemetry information from the pledge can be correlated to the voucher response provided from the registrar to the registrar-agent and further to the pledge.</t>
  <t>The telemetry information, when provided to the registrar is provided via the registrar-agent and can thus be correlated.</t>
</list></t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
An example case for the registrar revoking the issued LDevID for the pledge is when the pledge was not able to verify the received LDevID certificate and therefore did send a 406 (Not Acceptable) response.
In this case the registrar may revoke the LDevID certificate as the pledge did no accepted it for installation.</t>

<t>The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), may have a list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="exchanges_uc2_5a"><name>Pledge-Status - Request (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the private key corresponding to the EE (RegAgt) certificate.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="exchanges_uc2_5b"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

<t>The pledge <bcp14>SHOULD</bcp14> by default only respond to requests from nodes it can authenticate (such as registrar
agent), once the pledge is enrolled with CA certificates and a matching domain certificate.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-con"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
<section anchor="dns-service-names"><name>DNS Service Names</name>

<t>IANA has registered the following service names:</t>

<t><strong>Service Name:</strong> brski-pledge<br />
<strong>Transport Protocol(s):</strong> tcp<br />
<strong>Assignee:</strong> IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref><br />
<strong>Contact:</strong> IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref><br />
<strong>Description:</strong> The Bootstrapping Remote Secure Key Infrastructure Pledge<br />
<strong>Reference:</strong> [THISRFC]</t>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="sec_cons-dos"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.
Because in BRSKI-PRM, the pledge responds to requests from real or illicit registrar-agents, pledges are more subject to DoS attacks from registrar-agents in BRSKI-PRM than they are from illicit registrars in <xref target="RFC8995"/>, where pledges do initiate the connections.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due changing state on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished.
An alternative may be that the onboarding state may expire after a certain time, if no further interaction has happened.</t>

<t>In addition, the pledge may assume that repeated triggering for PVR are the result of a communication error with the registrar-agent.
In that case the pledge <bcp14>MAY</bcp14> simply resent the PVR previously sent.
Note that in case of resending, a contained nonce and also the contained agent-signed-data in the PVR would consequently be reused.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the EE (RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid EE (RegAgt) certificate may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The EE (RegAgt) certificate may have been acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the EE (RegAgt) certificate may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the EE (RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the EE (RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the EE (RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC6762">
  <front>
    <title>Multicast DNS</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6762"/>
  <seriesInfo name="DOI" value="10.17487/RFC6762"/>
</reference>

<reference anchor="RFC6763">
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6763"/>
  <seriesInfo name="DOI" value="10.17487/RFC6763"/>
</reference>

<reference anchor="RFC7030">
  <front>
    <title>Enrollment over Secure Transport</title>
    <author fullname="M. Pritikin" initials="M." role="editor" surname="Pritikin"/>
    <author fullname="P. Yee" initials="P." role="editor" surname="Yee"/>
    <author fullname="D. Harkins" initials="D." role="editor" surname="Harkins"/>
    <date month="October" year="2013"/>
    <abstract>
      <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport. This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates. It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7030"/>
  <seriesInfo name="DOI" value="10.17487/RFC7030"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC8040">
  <front>
    <title>RESTCONF Protocol</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="January" year="2017"/>
    <abstract>
      <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8040"/>
  <seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>

<reference anchor="RFC8366">
  <front>
    <title>A Voucher Artifact for Bootstrapping Protocols</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer. This artifact is known as a "voucher".</t>
      <t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure. Other YANG-derived formats are possible. The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t>
      <t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8366"/>
  <seriesInfo name="DOI" value="10.17487/RFC8366"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8615">
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <date month="May" year="2019"/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8615"/>
  <seriesInfo name="DOI" value="10.17487/RFC8615"/>
</reference>

<reference anchor="RFC8995">
  <front>
    <title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <author fullname="M. Behringer" initials="M." surname="Behringer"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies automated bootstrapping of an Autonomic Control Plane. To do this, a Secure Key Infrastructure is bootstrapped. This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline. We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device. The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8995"/>
  <seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>

<reference anchor="RFC9360">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="February" year="2023"/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9360"/>
  <seriesInfo name="DOI" value="10.17487/RFC9360"/>
</reference>


<reference anchor="I-D.ietf-anima-jws-voucher">
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname="Thomas Werner" initials="T." surname="Werner">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="29" month="August" year="2023"/>
      <abstract>
	 <t>   [TODO: I-D.draft-ietf-anima-rfc8366bis] defines a digital artifact
   called voucher as a YANG-defined JSON document that is signed using a
   Cryptographic Message Syntax (CMS) structure.  This document
   introduces a variant of the voucher artifact in which CMS is replaced
   by the JSON Object Signing and Encryption (JOSE) mechanism described
   in RFC7515 to support deployments in which JOSE is preferred over
   CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-jws-voucher-09"/>
   
</reference>


<reference anchor="I-D.ietf-netconf-sztp-csr">
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Sean Turner" initials="S." surname="Turner">
         <organization>sn3rd</organization>
      </author>
      <date day="2" month="March" year="2022"/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-sztp-csr-14"/>
   
</reference>


<reference anchor="I-D.ietf-anima-rfc8366bis">
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software</organization>
      </author>
      <author fullname="Max Pritikin" initials="M." surname="Pritikin">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Qiufang Ma" initials="Q." surname="Ma">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="August" year="2023"/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#x27;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#x27;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-rfc8366bis-10"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC2986">
  <front>
    <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
    <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
    <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
    <date month="November" year="2000"/>
    <abstract>
      <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process. The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2986"/>
  <seriesInfo name="DOI" value="10.17487/RFC2986"/>
</reference>

<reference anchor="RFC5272">
  <front>
    <title>Certificate Management over CMS (CMC)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="M. Myers" initials="M." surname="Myers"/>
    <date month="June" year="2008"/>
    <abstract>
      <t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t>
      <t>1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t>
      <t>2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t>
      <t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5272"/>
  <seriesInfo name="DOI" value="10.17487/RFC5272"/>
</reference>

<reference anchor="RFC6125">
  <front>
    <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="J. Hodges" initials="J." surname="Hodges"/>
    <date month="March" year="2011"/>
    <abstract>
      <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6125"/>
  <seriesInfo name="DOI" value="10.17487/RFC6125"/>
</reference>

<reference anchor="RFC6241">
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
    <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
    <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
    <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
    <date month="June" year="2011"/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6241"/>
  <seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>

<reference anchor="RFC7252">
  <front>
    <title>The Constrained Application Protocol (CoAP)</title>
    <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
    <author fullname="K. Hartke" initials="K." surname="Hartke"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
      <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7252"/>
  <seriesInfo name="DOI" value="10.17487/RFC7252"/>
</reference>

<reference anchor="RFC8152">
  <front>
    <title>CBOR Object Signing and Encryption (COSE)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8152"/>
  <seriesInfo name="DOI" value="10.17487/RFC8152"/>
</reference>

<reference anchor="RFC8407">
  <front>
    <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <date month="October" year="2018"/>
    <abstract>
      <t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="216"/>
  <seriesInfo name="RFC" value="8407"/>
  <seriesInfo name="DOI" value="10.17487/RFC8407"/>
</reference>

<reference anchor="RFC8792">
  <front>
    <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
    <author fullname="A. Farrel" initials="A." surname="Farrel"/>
    <author fullname="Q. Wu" initials="Q." surname="Wu"/>
    <date month="June" year="2020"/>
    <abstract>
      <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8792"/>
  <seriesInfo name="DOI" value="10.17487/RFC8792"/>
</reference>

<reference anchor="RFC8990">
  <front>
    <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
    <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8990"/>
  <seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9238">
  <front>
    <title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="J. Latour" initials="J." surname="Latour"/>
    <author fullname="H. Habibi Gharakheili" initials="H." surname="Habibi Gharakheili"/>
    <date month="May" year="2022"/>
    <abstract>
      <t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t>
      <t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9238"/>
  <seriesInfo name="DOI" value="10.17487/RFC9238"/>
</reference>


<reference anchor="I-D.ietf-anima-brski-ae">
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Steffen Fries" initials="S." surname="Fries">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
         <organization>Siemens AG</organization>
      </author>
      <date day="20" month="October" year="2023"/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-ae-06"/>
   
</reference>


<reference anchor="I-D.richardson-emu-eap-onboarding">
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname="Alan DeKok" initials="A." surname="DeKok">
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="2" month="April" year="2023"/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-emu-eap-onboarding-03"/>
   
</reference>


<reference anchor="I-D.eckert-anima-brski-discovery">
   <front>
      <title>Discovery for BRSKI variations</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei USA</organization>
      </author>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Esko Dijk" initials="E." surname="Dijk">
         <organization>IoTconsultancy.nl</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This document specifies how BRSKI entities, such as registrars,
   proxies, pledges or others that are acting as responders, can be
   discovered and selected by BRSKI entities acting as initiators.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-anima-brski-discovery-01"/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="androidnsd" target="https://developer.android.com/training/connect-devices-wirelessly">
  <front>
    <title>Android Developer: Connect devices wirelessly</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230000000000*/https://developer.android.com/training/connect-devices-wirelessly"/>
</reference>
<reference anchor="androidtrustfail" target="https://developer.android.com/training/articles/security-ssl">
  <front>
    <title>Security with Network Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230326153937/https://developer.android.com/training/articles/security-ssl"/>
</reference>



<reference anchor="I-D.richardson-anima-registrar-considerations">
   <front>
      <title>Operational Considerations for BRSKI Registrar</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <author fullname="Wei Pan" initials="W." surname="Pan">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="11" month="May" year="2023"/>
      <abstract>
	 <t>   This document describes a number of operational modes that a BRSKI
   Registration Authority (Registrar) may take on.

   Each mode is defined, and then each mode is given a relevance within
   an over applicability of what kind of organization the Registrar is
   deployed into.  This document does not change any protocol
   mechanisms.

   This document includes operational advice about avoiding unwanted
   consequences.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-anima-registrar-considerations-07"/>
   
</reference>

<reference anchor="RFC8971">
  <front>
    <title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
    <author fullname="S. Pallagatti" initials="S." role="editor" surname="Pallagatti"/>
    <author fullname="G. Mirsky" initials="G." role="editor" surname="Mirsky"/>
    <author fullname="S. Paragiri" initials="S." surname="Paragiri"/>
    <author fullname="V. Govindan" initials="V." surname="Govindan"/>
    <author fullname="M. Mudigonda" initials="M." surname="Mudigonda"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8971"/>
  <seriesInfo name="DOI" value="10.17487/RFC8971"/>
</reference>


<reference anchor="I-D.irtf-t2trg-taxonomy-manufacturer-anchors">
   <front>
      <title>A Taxonomy of operational security considerations for manufacturer installed keys and Trust Anchors</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="6" month="August" year="2023"/>
      <abstract>
	 <t>   This document provides a taxonomy of methods used by manufacturers of
   silicon and devices to secure private keys and public trust anchors.
   This deals with two related activities: how trust anchors and private
   keys are installed into devices during manufacturing, and how the
   related manufacturer held private keys are secured against
   disclosure.

   This document does not evaluate the different mechanisms, but rather
   just serves to name them in a consistent manner in order to aid in
   communication.

   RFCEDITOR: please remove this paragraph.  This work is occurring in
   https://github.com/mcr/idevid-security-considerations

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-t2trg-taxonomy-manufacturer-anchors-02"/>
   
</reference>




    </references>


<?line 2171?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="pledgehttps"><name>HTTP-over-TLS operations between Registrar-Agent and Pledge</name>

<t>The use of HTTPS between the Registrar-Agent and the Pledge has been identified as an optional mechanism.</t>

<t>Provided that the key-agreement in the underlying TLS protocol connection can be properly authenticated, the use of TLS provides privacy for the voucher and enrollment operations between the pledge and the registrar-agent.
The authenticity of the onboarding and enrollment is not dependant upon the security of the TLS connection.</t>

<t>The use of HTTPS is not mandated by this document for a number of reasons:</t>

<t><list style="numbers">
  <t>A certificate is generally required in order to do TLS.  While there are other modes of authentication including PSK, various EAP methods and raw public key, they do no help as there is no previous relationship between the Registrar-Agent.</t>
  <t>The pledge can use it's IDevID certificate to authenticate itself, but <xref target="RFC6125"/> DNS-ID methods do not apply as the pledge does not have a FQDN.  Instead a new mechanism is required, which authenticates the X520SerialNumber DN attribute which must be present in every IDevID.</t>
</list></t>

<t>If the Registrar-Agent has a preconfigured list of which serial numbers, from which manufacturers it expects to see, then it can attempt to match this pledge against a list of potential devices.</t>

<t>In many cases only the list of manufacturers is known ahead of time, so at most the Registrar-Agent can show the X520SerialNumber to the (human) operator who may then attempt to confirm that they are standing in front of a device with that serial number.
The use of scannable QRcodes may help automate this in some cases.</t>

<t><list style="numbers">
  <t>The CA used to sign the IDevID will be a manufacturer private PKI as described in <xref section="4.1" sectionFormat="comma" target="I-D.irtf-t2trg-taxonomy-manufacturer-anchors"/>.
The anchors for this PKI will never be part of the public WebPKI anchors which are distributed with most smartphone operating systems.
A registrar-agent application will need to use different APIs in order to initiate an HTTPS connection without performing WebPKI verification.
The application will then have to do it's own certificate chain verification against a store of manufacturer trust anchors.
In the Android ecosystem this involved use of a customer TrustManager: many application developers do not create these correctly, and there is significant push to remove this option as it has repeatedly resulted in security failures. See <xref target="androidtrustfail"/></t>
  <t>The use of the Host: (or :authority in HTTP/2) is explained in <xref section="7.2" sectionFormat="comma" target="RFC9110"/>. This header is mandatory, and so a compliant HTTPS client is going to insert it.
But, the contents of this header will at best be an IP address that came from the discovery process.
The pledge <bcp14>MUST</bcp14> therefore ignore the Host: header when it processes requests, and the pledge <bcp14>MUST NOT</bcp14> do any kind of name-base virtual hosting using the IP address/port combination.
Note that there is no requirement for the pledge to operate it's BRSKI-PRM service on port 80 or port 443, so if there is no reason for name-based virtual hosting.</t>
  <t>Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.
IDevID certificates are intended to be widely useable and EKU does not support that use.</t>
</list></t>

</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 10 -&gt; IETF draft 11:</t>

<t><list style="symbols">
  <t>issue #103, removed step 6 in verification handling for the wrapped CA certificate provisioning as only applicable after enrollment <xref target="exchanges_uc2_3c"/></t>
  <t>issue #130, introduced DNS service discovery name for brski_pledge to enable discovery by the registrar-agent in <xref target="iana-con"/></t>
  <t>removed unused reference RFC 5280</t>
</list></t>

<t>From IETF draft 09 -&gt; IETF draft 10:</t>

<t><list style="symbols">
  <t>issue #79, clarified discovery in the context of BRSKI-PRM and included information about future discovery enhancements in a separate draft in <xref target="discovery_uc2_reg"/>.</t>
  <t>issue #93, included information about conflict resolution in mDNS and GRASP in <xref target="discovery_uc2_ppa"/></t>
  <t>issue #103, included verification handling for the wrapped CA certificate provisioning in <xref target="exchanges_uc2_3c"/></t>
  <t>issue #106, included additional text to elaborate more the registrar status handling in <xref target="exchanges_uc2_4"/></t>
  <t>issue #116, enhanced DoS description in <xref target="sec_cons-dos"/></t>
  <t>issue #120, included statement regarding pledge host header processing in <xref target="pledge_ep"/></t>
  <t>issue #122, availability of serial number information on registrar agent clarified in <xref target="exchanges_uc2_1"/></t>
  <t>issue #123, Clarified usage of alternative voucher formats in  <xref target="rvr-proc"/></t>
  <t>issue #124, determination of pinned domain certificate done as in RFC 8995 included in <xref target="exchanges_uc2_2_vc"/></t>
  <t>issue #125, remove strength comparison of voucher assertions in <xref target="agt_prx"/> and <xref target="exchanges_uc2"/></t>
  <t>issue #130, aligned the usage of site and domain throughout the document</t>
  <t>changed naming of registrar certificate from LDevID(RegAgt) to EE (RegAgt) certificate throughout the document</t>
  <t>change x5b to x5bag according to <xref target="RFC9360"/></t>
  <t>updated JSON examples -&gt; "signature": BASE64URL(JWS Signature)</t>
</list></t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>, and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in <xref target="exchanges_uc2_1"/></t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR on registrar <xref target="exchanges_uc2_2_wca"/></t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on registrar-agent <xref target="exchanges_uc2_3"/></t>
  <t>issue #96: updated <xref target="exchangesfig_uc2_3"/> to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in <xref target="exchanges_uc2_3"/> as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="exchanges_uc2_3"/></t>
  <t>issue #100: included negative example in <xref target="vstat"/></t>
  <t>issue #101: included handling if <xref target="exchanges_uc2_3b"/> voucher telemetry information has not been received by the registrar-agent</t>
  <t>issue #102: relaxed requirements for CA certs provisioning in <xref target="exchanges_uc2_3c"/></t>
  <t>issue #105: included negative example in <xref target="estat"/></t>
  <t>issue #107: included example for certificate revocation in <xref target="exchanges_uc2_4"/></t>
  <t>issue #108: renamed heading to Pledge-Status Request of <xref target="exchanges_uc2_5a"/></t>
  <t>issue #111: included pledge-status response processing for authenticated requests in <xref target="exchanges_uc2_5b"/></t>
  <t>issue #112: added "Example key word in pledge-status response in <xref target="stat_res"/></t>
  <t>issue #113: enhanced description of status reply for "factory-default" in  <xref target="exchanges_uc2_5b"/></t>
  <t>issue #114: Consideration of optional TLS usage in Privacy Considerations</t>
  <t>issue #115: Consideration of optional TLS usage in Privacy Considerations to protect potentially privacy related information in the bootstrapping like status information, etc.</t>
  <t>issue #116: Enhanced DoS description and mitigation options in security consideration section</t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
BI2Fx7gZjrc5ULuHY3c3Bb8dv5l810UNF+3r6hb92FRWTGczDno20Tw4lwtI
nzEdybMFNwllh3fJ8Ylig49CAKS8603DU5rMxtUntwQsFqa7KfXatY6C+0xR
Do0jcg1iBkIC24uJkUv6O6yaxg82zSQNKStgFHDs0vJ7Ab0cOO712Qg1Vcwy
azqTQutmgjgad9Qvo3RM4ja/a8yCZPI+cFoE0JkucUp8YJ/wKj/pFKSzWE0/
zBhChMWAqFyNtScQpmZiC8dcpmtLsvO/yf6/yf6XIfuoi3VL6Z1hcBXRYfc3
Nt56RI9ucsTbTMFmE5kTb7PnRZuX0yZ7u/F2vy9tA/6t+UcYJTsXfVbtp8ji
olgOznQI6hmee4PqwtuMqPhtRy8CEYhZYm/73t19YSLSY151dJrRuyhZLvWy
1e9CTD4gY9Xq0KPMb/WviNYt6gq8tLlJvfPxuu8M1uULVPveb75uppBcNk7h
vk2WSUieZWPejMOO8/F7Le3fl3jPZX6+SD5ejK4A3/X3RUOEG7/sKb/st+E/
SgEqFgvO0NnVHKCjuH8Gv+fj7F1Xc44sjJ7eGJ02ijY0LKYdMFbWdNWR+6Cg
73Hb6b5o014omvyAAaPM6/iePlIaYx2ye6nMF0yHE5IhqGtT6UvL6MrpLFzX
ZS3wf3fyyhObLf7ZJnrUC/eYW6tT7PzaRAadiuBa/anzwim9lMyEXm8LHG3g
7ASQwI3oQqSaP//euAdSquAhC/iF6GjJSaGY9rgGxWbAAxfOjrRR6cM3+bSc
SHwZDl6zcKglLLme7zmVexrMuKI+06AmDWhMONmueiqqTPL27paiqZC5FrX0
2JZ4UbMsMUJYKLia6a1TkZOUQ+1dfO2hhJDtXeAMOO9xEsdb0A+SCjdMC76E
yHHnqT4CsXCjRHUy76yaaczMvlyUGIEm2VUoqRy73f9k9MHUixXaxS+iXogg
QkFOiWtKT15mpAQlCA4tG6a/JgTI3o+wyvu1DedSk0PZjo/UzMTBuB9YiAGS
xPInEJwkTlPTuR3na8i0PZVpBykyiOE2SMJ91Y1l9SL89t5yVOOPjrItEI8H
V+12WE1+nqD81EjidS3ZRkKaJyTkS+106JEIlQsrAzaQtVpy2iCaLd4hacq5
1GwWG0UmwJgg5YUkK+UO4C0UPCgG/mCbcEoMKD11l3lXezkMijwWrBTF66bL
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

-->

</rfc>

