<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.39 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-10" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 129?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 137?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of the BRSKI registrar in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer site/domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer site/domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer site/domain does not offer enough physical security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication.
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.</t>

<t>Note that the Join Proxy is not shown in the figure, having been replaced by the Registrar Agent.
The Join Proxy may still be present, and there <bcp14>MAY</bcp14> be some situations in which the Join Proxy can be used by the Registrar-Agent to connect to the Registrar.
For example, the Registrar-Agent application on a smartphone often can connect to local wifi without giving up their LTE connection <xref target="androidnsd"/>, but only can make link-local connections.</t>

<t>The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="456" viewBox="0 0 456 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,416" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,416" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,416 L 424,416" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">PRM</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="336" y="404">CA)</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="448" y="420">.</text>
<text x="288" y="436">.........................................</text>
<text x="236" y="452">&quot;Domain&quot;</text>
<text x="316" y="452">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  PRM   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI CA)         |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols (including HTTPS) can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a store and forward communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges.
It can then perform a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar EE certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that this registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a different assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
"Agent-proximity" is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the registrar via the TLS handshake and pins that public key as the "proximity-registrar-cert" into the voucher request.
This allows the MASA to verify the proximity of the pledge and registrar, facilitating a decision to assign the pledge to that domain owner.
In BRSKI, the TLS connection is considered provisional until the pledge receives the voucher.</t>

<t>In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and must take the Registrar-Agent LDevID provisionally.
The registrar-agent has included its LDevID, a certificate signed by the domain owner, into the PVR trigger message.
The registrar-agent identity is therefore included into the Pledge Voucher Request (PVR).</t>

<t>Akin to the BRSKI case, the pledge has provided proximity evidence to the MASA.
But additionally, this allows the Registrar to be sure that the PVR collected by the Registrar-Agent was in fact collected by the Registrar-Agent to which the Registrar is connected to.</t>

<t>In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information once the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.</t>

<t>The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
The details of doing TLS validation are <xref target="pledgehttps"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar - Returns enrollment-response</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its EE (RegAgt) certificate.
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its EE certificate when establishing a TLS session with the domain registrar for TLS client authentication.
The EE (RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete EE (RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the EE (RegAgt) certificate allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the EE (RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the EE (RegAgt) certificate, the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>EE (RegAgt) certificate and corresponding private key: own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar EE certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> section 4 with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
Note that <xref target="RFC6762"/> Section 9 provides support for conflict resolution in situations when an mDNS responder receives a mDNS response with inconsistent rdata.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.
Note that <xref target="RFC8990"/> does not support conflict resolution as mDNS, which may be a limitation for its application.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the private key corresponding to the EE (RegAgt) certificate, as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the EE (RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA <bcp14>MAY</bcp14> issue the assertion "agent-proximity" as follows:
The MASA verifies the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided EE (RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
The assertion of "agent-proximity" is similar to the proximity assertion by the MASA when using BRSKI.
Note that the different assertions do not provide a metric of strength as the security properties are not comparable.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> handle/trusts pledge's IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication.
The distribution of IDevID CA certificates to the registrar-agent is out of scope of this document and may be done by a manual configuration.</t>
      <t>possesses own credentials (EE (RegAgt) certificate and corresponding private key) for the registrar domain (site).
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar EE credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to provide privacy for the interaction between the registrar-agent and the pledge, see <xref target="pledgehttps"/>.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the EE (RegAgt) certificate and the domain trust has not been established at this point of the communication.
Verification <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the EE (RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification.</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own credentials (EE (RegAgt) certificate and corresponding private key) of the site domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar EE credentials of the site domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent EE credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar based on the TLS client authentication.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the private key corresponding to the EE (RegAgt) certificate indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the EE (RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the EE (RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the EE (RegAgt) certificate if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: EE (RegAgt) certificate or the EE (RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>This document uses the JSON-in-JWS format throughout the definition of exchanges and in the examples.
Nevertheless, alternative encodings of the voucher as used in BRSKI <xref target="RFC8995"/> with JSON-in-CMS or CBOR-in-COSE_Sign <xref target="RFC8152"/> for constraint environments are possible as well.
The assumption is that a pledge typically supports a single encoding variant and creates the PVR in the supported format.
To ensure that the pledge is able to process the voucher, the registrar <bcp14>MUST</bcp14> use the media type for Accept header in the RVR based on the media type used for the PVR.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The EE (RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding EE (RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the EE (RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="exchanges_uc2_2_vc"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The pinned-domain certificate to be put into the voucher is determined by the MASA as described in section 5.5 of <xref target="RFC8995"/>.
The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar EE credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar EE credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar EE certificate as well as potential subordinate CA certificates up to (but not including) the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>(For many installations, with a single registrar credential, the registrar credential is what is pinned)</t>

<t>In <xref target="RFC8995"/>, the Registrar proved possession of the it's credential when the TLS session was setup.
While the pledge could not, at the time, validate the certificate truly belonged the registrar, it did validate that the certificate it was provided was able to authenticate the TLS connection.</t>

<t>In the BRSKI-PRM mode, with the Registrar agent mediating all communication, the Pledge has not as yet been able to witness that the intended Registrar really does possess the relevant private key.
This second signature provides for the same level of assurance to the pledge, and that it matches the public key that the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).</t>

<t>The registrar <bcp14>MUST</bcp14> use the same registrar EE credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This has some operational implications when the registrar may be part of a scalable framework as described in <xref section="1.3.1" sectionFormat="comma" target="I-D.richardson-anima-registrar-considerations"/>.</t>

<t>The second signature <bcp14>MUST</bcp14> either be done with the private key associated with the registrar EE certificate provided to the Registrar-Agent, or the use of a certificate chain is necessary.
This ensures that the same registrar EE certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".</t>

<t><xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information.
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge.
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the EE (RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5b" in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5b": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher and LDevID certificate and optionally IDevID CA certificates.
The IDevID CA certificate is necessary, when the connection between the Registrar-agent and the pledge is established using TLS to enable the registrar-agent to validate the pledges' IDevID certificate during the TLS handshake as described in <xref target="exchanges_uc2_1"/>.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="368" width="528" viewBox="0 0 528 368" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,336" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 72,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="108" y="260">supply</text>
<text x="168" y="260">CAcerts</text>
<text x="244" y="260">(optional)</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply CAcerts (optional) ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status

]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="exchanges_uc2_3a"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Validate the LDevID(Reg) certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert")</t>
  <t>Verify registrar signature of the voucher similar as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
</list></t>

<t>Step3 and step 4 have been introduced in BRSKI-PRM to enable verification of LDevID(Reg) certificate and also the proof-of-possession of the corresponding private key by the registrar, which is done in BRSKI based on the established TLS channel.
If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="exchanges_uc2_3b"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "pvs-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate because
  it starts in the future (1/1/2023).",
  "reason-context": {
    "pvs-details": "Current date: 1/1/1970"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>If the pledge did not did not provide voucher status telemetry information after processing the voucher, the registrar agent <bcp14>MAY</bcp14> query the pledge status explicitly as described in <xref target="exchanges_uc2_5"/> and <bcp14>MAY</bcp14> re-sent the voucher depending on the Pledge status following the procedure described in <xref target="exchanges_uc2_3a"/>.</t>

</section>
<section anchor="exchanges_uc2_3c"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHOULD</bcp14> only be done, if the voucher-response has been successfully processed by pledge as reflected in the voucher status telemetry.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5b".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used by the pledge:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the validation of the wrapping signature or another security check fails.</t>
  <t>415 Unsupported Media Type: if the Content-Type of the request is in an unknown or unsupported format.</t>
  <t>400 Bad Request: if the pledge detects errors in the encoding of the payload.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "pes-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Enrollment response could not be verified.",
  "reason-context": {
    "pes-details": "no matching trust anchor"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
An example case for the registrar revoking the issued LDevID for the pledge is when the pledge was not able to verify the received LDevID certificate and therefore did send a 406 (Not Acceptable) response.
In this case the registrar may revoke the LDevID certificate as the pledge did no accepted it for installation.</t>

<t>The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), may have a list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="exchanges_uc2_5a"><name>Pledge-Status - Request (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the private key corresponding to the EE (RegAgt) certificate.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="exchanges_uc2_5b"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

<t>The pledge <bcp14>SHOULD</bcp14> by default only respond to requests from nodes it can authenticate (such as registrar
agent), once the pledge is enrolled with CA certificates and a matching domain certificate.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due changing state on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished.
An alternative may be that the onboarding state may expire after a certain time, if no further interaction has happened.</t>

<t>In addition, the pledge may assume that repeated triggering for PVR are the result of a communication error with the registrar-agent.
In that case the pledge <bcp14>MAY</bcp14> simply resent the PVR previously sent.
Note that in case of resending, a contained nonce and also the contained agent-signed-data in the PVR would consequently be reused.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the EE (RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid EE (RegAgt) certificate may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The EE (RegAgt) certificate may have been acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the EE (RegAgt) certificate may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the EE (RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the EE (RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the EE (RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>



<reference anchor="RFC5280">
  <front>
    <title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
    <author fullname="D. Cooper" initials="D." surname="Cooper"/>
    <author fullname="S. Santesson" initials="S." surname="Santesson"/>
    <author fullname="S. Farrell" initials="S." surname="Farrell"/>
    <author fullname="S. Boeyen" initials="S." surname="Boeyen"/>
    <author fullname="R. Housley" initials="R." surname="Housley"/>
    <author fullname="W. Polk" initials="W." surname="Polk"/>
    <date month="May" year="2008"/>
    <abstract>
      <t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet. An overview of this approach and model is provided as an introduction. The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms. Standard certificate extensions are described and two Internet-specific extensions are defined. A set of required certificate extensions is specified. The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions. An algorithm for X.509 certification path validation is described. An ASN.1 module and examples are provided in the appendices. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5280"/>
  <seriesInfo name="DOI" value="10.17487/RFC5280"/>
</reference>

<reference anchor="RFC6762">
  <front>
    <title>Multicast DNS</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6762"/>
  <seriesInfo name="DOI" value="10.17487/RFC6762"/>
</reference>

<reference anchor="RFC6763">
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6763"/>
  <seriesInfo name="DOI" value="10.17487/RFC6763"/>
</reference>

<reference anchor="RFC7030">
  <front>
    <title>Enrollment over Secure Transport</title>
    <author fullname="M. Pritikin" initials="M." role="editor" surname="Pritikin"/>
    <author fullname="P. Yee" initials="P." role="editor" surname="Yee"/>
    <author fullname="D. Harkins" initials="D." role="editor" surname="Harkins"/>
    <date month="October" year="2013"/>
    <abstract>
      <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport. This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates. It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7030"/>
  <seriesInfo name="DOI" value="10.17487/RFC7030"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC8040">
  <front>
    <title>RESTCONF Protocol</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="January" year="2017"/>
    <abstract>
      <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8040"/>
  <seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>

<reference anchor="RFC8366">
  <front>
    <title>A Voucher Artifact for Bootstrapping Protocols</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer. This artifact is known as a "voucher".</t>
      <t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure. Other YANG-derived formats are possible. The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t>
      <t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8366"/>
  <seriesInfo name="DOI" value="10.17487/RFC8366"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8615">
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <date month="May" year="2019"/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8615"/>
  <seriesInfo name="DOI" value="10.17487/RFC8615"/>
</reference>

<reference anchor="RFC8995">
  <front>
    <title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <author fullname="M. Behringer" initials="M." surname="Behringer"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies automated bootstrapping of an Autonomic Control Plane. To do this, a Secure Key Infrastructure is bootstrapped. This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline. We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device. The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8995"/>
  <seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>


<reference anchor="I-D.ietf-anima-jws-voucher">
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname="Thomas Werner" initials="T." surname="Werner">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="22" month="February" year="2023"/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that is signed using a Cryptographic Message Syntax
   (CMS) structure.  This document introduces a variant of the voucher
   artifact in which CMS is replaced by the JSON Object Signing and
   Encryption (JOSE) mechanism described in [RFC7515] to support
   deployments in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-jws-voucher-06"/>
   
</reference>


<reference anchor="I-D.ietf-netconf-sztp-csr">
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Sean Turner" initials="S." surname="Turner">
         <organization>sn3rd</organization>
      </author>
      <date day="2" month="March" year="2022"/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-sztp-csr-14"/>
   
</reference>


<reference anchor="I-D.ietf-anima-rfc8366bis">
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software</organization>
      </author>
      <author fullname="Max Pritikin" initials="M." surname="Pritikin">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Qiufang Ma" initials="Q." surname="Ma">
         <organization>Huawei</organization>
      </author>
      <date day="30" month="July" year="2023"/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#x27;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#x27;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-rfc8366bis-08"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References'>



<reference anchor="RFC2986">
  <front>
    <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
    <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
    <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
    <date month="November" year="2000"/>
    <abstract>
      <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process. The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2986"/>
  <seriesInfo name="DOI" value="10.17487/RFC2986"/>
</reference>

<reference anchor="RFC5272">
  <front>
    <title>Certificate Management over CMS (CMC)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="M. Myers" initials="M." surname="Myers"/>
    <date month="June" year="2008"/>
    <abstract>
      <t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t>
      <t>1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t>
      <t>2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t>
      <t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5272"/>
  <seriesInfo name="DOI" value="10.17487/RFC5272"/>
</reference>

<reference anchor="RFC6125">
  <front>
    <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="J. Hodges" initials="J." surname="Hodges"/>
    <date month="March" year="2011"/>
    <abstract>
      <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6125"/>
  <seriesInfo name="DOI" value="10.17487/RFC6125"/>
</reference>

<reference anchor="RFC6241">
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
    <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
    <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
    <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
    <date month="June" year="2011"/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6241"/>
  <seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>

<reference anchor="RFC7252">
  <front>
    <title>The Constrained Application Protocol (CoAP)</title>
    <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
    <author fullname="K. Hartke" initials="K." surname="Hartke"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
      <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7252"/>
  <seriesInfo name="DOI" value="10.17487/RFC7252"/>
</reference>

<reference anchor="RFC8152">
  <front>
    <title>CBOR Object Signing and Encryption (COSE)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8152"/>
  <seriesInfo name="DOI" value="10.17487/RFC8152"/>
</reference>

<reference anchor="RFC8407">
  <front>
    <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <date month="October" year="2018"/>
    <abstract>
      <t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="216"/>
  <seriesInfo name="RFC" value="8407"/>
  <seriesInfo name="DOI" value="10.17487/RFC8407"/>
</reference>

<reference anchor="RFC8792">
  <front>
    <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
    <author fullname="A. Farrel" initials="A." surname="Farrel"/>
    <author fullname="Q. Wu" initials="Q." surname="Wu"/>
    <date month="June" year="2020"/>
    <abstract>
      <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8792"/>
  <seriesInfo name="DOI" value="10.17487/RFC8792"/>
</reference>

<reference anchor="RFC8990">
  <front>
    <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
    <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8990"/>
  <seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9238">
  <front>
    <title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="J. Latour" initials="J." surname="Latour"/>
    <author fullname="H. Habibi Gharakheili" initials="H." surname="Habibi Gharakheili"/>
    <date month="May" year="2022"/>
    <abstract>
      <t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t>
      <t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9238"/>
  <seriesInfo name="DOI" value="10.17487/RFC9238"/>
</reference>


<reference anchor="I-D.ietf-anima-brski-ae">
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Steffen Fries" initials="S." surname="Fries">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
         <organization>Siemens AG</organization>
      </author>
      <date day="28" month="June" year="2023"/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-ae-05"/>
   
</reference>


<reference anchor="I-D.richardson-emu-eap-onboarding">
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname="Alan DeKok" initials="A." surname="DeKok">
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="2" month="April" year="2023"/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-emu-eap-onboarding-03"/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="androidnsd" target="https://developer.android.com/training/connect-devices-wirelessly">
  <front>
    <title>Android Developer: Connect devices wirelessly</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230000000000*/https://developer.android.com/training/connect-devices-wirelessly"/>
</reference>
<reference anchor="androidtrustfail" target="https://developer.android.com/training/articles/security-ssl">
  <front>
    <title>Security with Network Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230326153937/https://developer.android.com/training/articles/security-ssl"/>
</reference>



<reference anchor="I-D.richardson-anima-registrar-considerations">
   <front>
      <title>Operational Considerations for BRSKI Registrar</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <author fullname="Wei Pan" initials="W." surname="Pan">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="11" month="May" year="2023"/>
      <abstract>
	 <t>   This document describes a number of operational modes that a BRSKI
   Registration Authority (Registrar) may take on.

   Each mode is defined, and then each mode is given a relevance within
   an over applicability of what kind of organization the Registrar is
   deployed into.  This document does not change any protocol
   mechanisms.

   This document includes operational advice about avoiding unwanted
   consequences.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-anima-registrar-considerations-07"/>
   
</reference>

<reference anchor="RFC8971">
  <front>
    <title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
    <author fullname="S. Pallagatti" initials="S." role="editor" surname="Pallagatti"/>
    <author fullname="G. Mirsky" initials="G." role="editor" surname="Mirsky"/>
    <author fullname="S. Paragiri" initials="S." surname="Paragiri"/>
    <author fullname="V. Govindan" initials="V." surname="Govindan"/>
    <author fullname="M. Mudigonda" initials="M." surname="Mudigonda"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8971"/>
  <seriesInfo name="DOI" value="10.17487/RFC8971"/>
</reference>


<reference anchor="I-D.irtf-t2trg-taxonomy-manufacturer-anchors">
   <front>
      <title>A Taxonomy of operational security considerations for manufacturer installed keys and Trust Anchors</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="23" month="July" year="2023"/>
      <abstract>
	 <t>   This document provides a taxonomy of methods used by manufacturers of
   silicon and devices to secure private keys and public trust anchors.
   This deals with two related activities: how trust anchors and private
   keys are installed into devices during manufacturing, and how the
   related manufacturer held private keys are secured against
   disclosure.

   This document does not evaluate the different mechanisms, but rather
   just serves to name them in a consistent manner in order to aid in
   communication.

   RFCEDITOR: please remove this paragraph.  This work is occurring in
   https://github.com/mcr/idevid-security-considerations

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-t2trg-taxonomy-manufacturer-anchors-01"/>
   
</reference>




    </references>


<?line 2146?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="pledgehttps"><name>HTTP-over-TLS operations between Registrar-Agent and Pledge</name>

<t>The use of HTTPS between the Registrar-Agent and the Pledge has been identified as an optional mechanism.</t>

<t>Provided that the key-agreement in the underlying TLS protocol connection can be properly authenticated, the use of TLS provides privacy for the voucher and enrollment operations between the pledge and the registrar-agent.
The authenticity of the onboarding and enrollment is not dependant upon the security of the TLS connection.</t>

<t>The use of HTTPS is not mandated by this document for a number of reasons:</t>

<t><list style="numbers">
  <t>A certificate is generally required in order to do TLS.  While there are other modes of authentication including PSK, various EAP methods and raw public key, they do no help as there is no previous relationship between the Registrar-Agent.</t>
  <t>The pledge can use it's IDevID certificate to authenticate itself, but <xref target="RFC6125"/> DNS-ID methods do not apply as the pledge does not have a FQDN.  Instead a new mechanism is required, which authenticates the X520SerialNumber DN attribute which must be present in every IDevID.</t>
</list></t>

<t>If the Registrar-Agent has a preconfigured list of which serial numbers, from which manufacturers it expects to see, then it can attempt to match this pledge against a list of potential devices.</t>

<t>In many cases only the list of manufacturers is known ahead of time, so at most the Registrar-Agent can show the X520SerialNumber to the (human) operator who may then attempt to confirm that they are standing in front of a device with that serial number.
The use of scannable QRcodes may help automate this in some cases.</t>

<t><list style="numbers">
  <t>The CA used to sign the IDevID will be a manufacturer private PKI as described in <xref section="4.1" sectionFormat="comma" target="I-D.irtf-t2trg-taxonomy-manufacturer-anchors"/>.
The anchors for this PKI will never be part of the public WebPKI anchors which are distributed with most smartphone operating systems.
A registrar-agent application will need to use different APIs in order to initiate an HTTPS connection without performing WebPKI verification.
The application will then have to do it's own certificate chain verification against a store of manufacturer trust anchors.
In the Android ecosystem this involved use of a customer TrustManager: many application developers do not create these correctly, and there is significant push to remove this option as it has repeatedly resulted in security failures. See <xref target="androidtrustfail"/></t>
  <t>The use of the Host: (or :authority in HTTP/2) is explained in <xref section="7.2" sectionFormat="comma" target="RFC9110"/>. This header is mandatory, and so a compliant HTTPS client is going to insert it.
But, the contents of this header will at best be an IP address that came from the discovery process.
The pledge <bcp14>MUST</bcp14> therefore ignore the Host: header when it processes requests, and the pledge <bcp14>MUST NOT</bcp14> do any kind of name-base virtual hosting using the IP address/port combination.
Note that there is no requirement for the pledge to operate it's BRSKI-PRM service on port 80 or port 443, so if there is no reason for name-based virtual hosting.</t>
  <t>Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.
IDevID certificates are intended to be widely useable and EKU does not support that use.</t>
</list></t>

</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 09 -&gt; IETF draft 10:</t>

<t><list style="symbols">
  <t>issue #93, included information about conflict resolution in mDNS and GRASP in <xref target="discovery_uc2_ppa"/></t>
  <t>issue #120, included statement regarding pledge host header processing in <xref target="pledge_ep"/></t>
  <t>issue #122, availability of serial number information on registrar agent clarified in <xref target="exchanges_uc2_1"/></t>
  <t>issue #123, Clarified usage of alternative voucher formats in  <xref target="rvr-proc"/></t>
  <t>issue #124, determination of pinned domain certificate done as in RFC 8995 included in <xref target="exchanges_uc2_2_vc"/></t>
  <t>issue #125, remove strength comparison of voucher assertions in <xref target="agt_prx"/> and <xref target="exchanges_uc2"/></t>
  <t>changed naming of registrar certificate from LDevID(RegAgt) to EE (RegAgt) certificate throughout the document</t>
</list></t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>, and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in <xref target="exchanges_uc2_1"/></t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR on registrar <xref target="exchanges_uc2_2_wca"/></t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on registrar-agent <xref target="exchanges_uc2_3"/></t>
  <t>issue #96: updated <xref target="exchangesfig_uc2_3"/> to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in <xref target="exchanges_uc2_3"/> as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="exchanges_uc2_3"/></t>
  <t>issue #100: included negative example in <xref target="vstat"/></t>
  <t>issue #101: included handling if <xref target="exchanges_uc2_3b"/> voucher telemetry information has not been received by the registrar-agent</t>
  <t>issue #102: relaxed requirements for CA certs provisioning in <xref target="exchanges_uc2_3c"/></t>
  <t>issue #105: included negative example in <xref target="estat"/></t>
  <t>issue #107: included example for certificate revocation in <xref target="exchanges_uc2_4"/></t>
  <t>issue #108: renamed heading to Pledge-Status Request of <xref target="exchanges_uc2_5a"/></t>
  <t>issue #111: included pledge-status response processing for authenticated requests in <xref target="exchanges_uc2_5b"/></t>
  <t>issue #112: added "Example key word in pledge-status response in <xref target="stat_res"/></t>
  <t>issue #113: enhanced description of status reply for "factory-default" in  <xref target="exchanges_uc2_5b"/></t>
  <t>issue #114: Consideration of optional TLS usage in Privacy Considerations</t>
  <t>issue #115: Consideration of optional TLS usage in Privacy Considerations to protect potentially privacy related information in the bootstrapping like status information, etc.</t>
  <t>issue #116: Enhanced DoS description and mitigation options in security consideration section</t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
K0vWeimuGZwC3reeTQ3DI3O4h0SM/lzcHknNQ1jjLVj459vGbaSOR4J5JPtx
N0pT0Z6GbDIfmri41W4w5nU2zVDQ7oOkcZPMyop3A/xCfe9BtV0s5HZ0eHg4
fPZwd7Szf0L2VgqKM9BOOEOXJC7md9bnsXIH5kW1RZfKW57GmqE3PpsBhvD9
A99h6fEuLvJrFkxZyjFhBMDL2/79a0NGQ+KMMWYUMe54XWD2MQhD88lNOaEU
sEInu1Jmo0l4TKWyFV6lpnS5Zgavgi+sXDqer5ln6FeBw3CJxZFKiWNCsHi7
3QxukmsW43eNYL+oQ37VBejNFWykMqAZcxBXkUio/9RFA5goAt1GE4l0x200
Jue+jTXellTRAxOBNcDAik5Qha8vH9Sdp7oq6UCtXGwok2rRGkcyl0+BaaIn
dMrVdccEA3+JzrSjIB/ZxXr4cg6MU0lQQMQme3oXJEYNU4DTJwtvkSwJsCA8
XLFIp+CdLquRofwVxHiezxjDm2/h/qtsq1kKVTLV7Qjb3xamWblZo419/y77
y9yu4XguChZQCbElkDkt6epho5FguSoWnRc/biiy92t3VF1+35Z6IwlgZXDm
hwY3C/yFAINEkVXqBHX+Xa1q3FX5LBPxcn8xQ9xcB3oUXlQp7iNjTucg35X7
u6qIaaBnsoROmA0uO8XSTZ1jzzlKC2Z2HTxR5mKRQy4WOeRikVvNdri4+AVz
NU8fMFJR4wB9Ro0DL6QFsFkqvqUePyFLarPnr07hLhWofrr3iZ8vFiDxbnOp
DXixCx+BNmE0y+QTxOXApukOsmgXR+tmPpoSET7ZQeedhhi6oTWfYp+dMrKv
A9R9xqfYffQMmPjEVaVqxvlcZdw8+3d0aCuKS3LpLTYdEl7JblB35M7uq+yr
hw+fYMApFfk85SKfr+hlvIhKU6PoPheX82T0qCfST3hOgE8XggF1c35wTaAR
lsY5iNHSiB4rL59pOT7nak0jKVsTMFD+sKEdHU+P3SyXsBRUzUocsXONjIh2
VbkaJdr1clJCZ+upPbeXkRfD8BiM6FnkoDZvIR/CuJmOHBuljUSC/F5YcK/H
UrLVrZPiV547OI3u9t7KW7/qxlNvfyezrN5NzxIV6CQ4AUER2m2FHA/S1/z8
4QbHERtvPwmJAExcIhAmcQpcH+I6aYRB1Z7IjORD1vSKb3hxjh1LrQMc/TDM
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
GMBtLdEXh3nRMTowlyVQupGVKqI1NHfB0dSMoSZ5aD0UnT0CF92UjaGtlm4w
ggdajvfzmZ9YgiHZX25m3w6uVdq2G5kT1c8jYXfQO+sjkzN3miEkU0yAtzgM
hVMIxgMw040G02Uys5RwH2BE+sGcmQhNfYRD+o/DH/U3EXNnosXBpAnyZhEE
Jg48jEhRzUzRg7R35yi7F0fcvcBsxACgFEDC8JFwE9HSdQlOxNplw5qgQ3Uy
4GiSvsBB+oNIoGSALJiCvGeuKQOoB7PBfcdxuDmPfeFNerey06SPVmRNmbrZ
ILKNDgJGPRTgZobsaNufO7r8bYMvHGKnx4w8eozT/RPmRY2ZZtnSfh86SeEL
2cpFK0ZppXsnRoAQpdNDqN4/GrnZNfLdHn0RY1d0EBiQW8oRUCagvZ6eaS+2
4NyPM4GCsS3IwYGSIszWl440XglvXifwi/fHOgmKVf4y3y0fn51FOOl/Mj7n
CGU/Lb71vxZOlj44z5YRqR/i4bjbh0kcnme+FOzuO0d/HHV75qfZ/vPDB1Hy
Hsb7u++Py8XTUt/xc/0XF+bVucAqN1dnAutE4NfFN76ednlq/mdJw59dj3fO
Ogab+XpBCxXn4wyvWzNPKcjzU+Wan3moU490lwdlvOvGeIETngr+ul5Hpzve
qpw4P14RrtdpHH2kgoWXa1ll09q5jeDqbqTT2tmvGOa7uvUk2N7Mqz29dRGG
ejvdqcunm5ir/Zj84fPFRNdP3/76S9XHX96dSoOs1rv6fMDX9WYXbOrTLvRe
6/zHj9Kw56ZfjcOkcZzTs5cdaX3hLyZmL0uqNJsZeVq23hawpcE3Z33rey8g
k1/49qBmR8RVN3+W8TXrjK/YkXqf/r+b8vUkJfdzp5zY3zrG0KHnvtw8z6Xe
0reAJLkugs4+zaV7w5Z7iSEb3UfR2TB5v552wvsnShKv+ofAvT+0kkDSvAPC
uAxUhp9qWThjWdiZUt+y2Ck6cELbUEKocJnAUEMlY3NbMZjg7/SsUH35HiPS
Z33fERMryDXXXZqUKpr5rmhRksVXiwWT5YObhjvDEd2gA8rZSb57jG3QAiWb
EpMSXndMFbtoAUFN5AdpuvOY0wsVowxUxZgr672bMiNWpwd7ZT4xRVsjrFZB
S5VgpCVslsiO1Ptyg7ciJRxFM5ZPj74cPUTMf3Yynq4SHTHaRTzZlFkYReJl
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
rtNCqMbPrc/6i7lrrJyj5gK81KA6VTuGen+5qRXc6IPwtBTe7DuuITsgjKaj
4fO7l1DUcnuYba0VU+ds9+JJXUoujEKS7nQ2uN9Hq/7GOJRryx7vJnJvzVLz
BWFI+HiMHp1BKQGOvRh+dWqV352lvzFWWmLb466f7V74WXHlQUzEYMR2BsLt
GAE3NNCYp+LwDLc/PgccjyA/FQBBkG7pSh9kAt8+kwrosPJycayM34kh7+BK
DZOxoeUkk4cO689pMSqLWJKF4u4ldqf7SNQFPVsLppI8GHJR6q688Y+GF4jF
yl8mTqDun6eIRqezPots/+ivsqVJSYuXeIgwKEtKf1E+TkahEA79o5NFhyCX
9w7Tdq79+WAsp3tLSe9PrvtkoWzFndsrG52mPziW+GML/X9Yd39qofwc8isb
/csWWo8SNv0Xkehno0QrfxGJfjZKUPAfINGPbgB46/w/ues0e552GC10HX3J
mBhH5QV6cNQdf0Q2hqB4ZbP+SyCIOz/TD/h9CFLZs1wDf4Jo0+0ahpkmQy9n
krUEy7S/7Sc2m3iseLQz48VSPh9hN3o8Y4NgmEg6JD1hhRhkmjNNTTjp7ESe
GXqmhY+dyIRXABLxu2QooFCuyTv6hlmg0BGh5fnmGoTVsEmTCdrAmRXdeBXt
nFVfj4EfP3LZb9BSIol0GLE+iuir2tiRRMlz778Hw37hu2WAAGfCjompq3t7
ro7FB8HEaCEboffoieNO5O4REEdqpPmSuYuX/sJJvYMp+2WoZg9zEHw9jXos
l7sei9JI2o9DAejFIt8TUsGRowcvD+koYnUzzNZ/8yjixUHEu09lZ/Xb8YBA
rzvWpQfEKn84L7KYHItP992pYtjf1Q+jo73pT0u5+0f3w8FCDHZQok76dOcN
Vp2e52mfDg+dXtTZlof1H4f14unrw+cfHkQ8nUH7K2cR/+QA4V86jnh+sy4J
V506pKNvdAyuOgb4nt+AeFl+6R+7EO1V8bo3vvLnH/lrh/Fuf3hmrh5sdW7u
Xrz7v//Y3Fsn5n52Qq45H/fl5p+5FK25Eu3LzT9zKVpzJdqXm/OlaMtvz8Zx
LPGc1apfzPPqUqW5JCaB27269kzb0VntKWMl3DPFmqeLz8Kd7+xFa1C2Lz77
K9eefbn5s4vP/sq1ZxfOK3lisizacBQUZ9q2YcRpUTkv596Z2nQMglGeydAF
8Y5fe6YwuvYMUP8nF5/9/Nqzy+iZzn3n++q6rtQ0/8Ez9Yh7bamUAtEcR3Zi
zpXpEQ7kQac7qOxwwzrG2JbGO8bQuqDokRwilmGPoFXfA5d19aH34tCVE77B
+g+Bq0m+kDjTRak+iooT5FE2l5NRDJJqdfodyr15HcOOXeW7k5kDUxYHVhVt
p3wtTpku6Gx6ZsCJQzZedyrACcwi2a8JoCPDsb/tbhpnQ5G8CirriHeOax7N
wf33x0O5cge/4fvaA2xp/CgmJYjFG7nPaGKldAUZ+tIPKCofwa0cSs2Wo4Ej
Z4IjfRO8ZTZz1cSzV2wdMmNqpN823uJenx7uc5ZlcpDJ0pxfHGNSrnzFrKmA
uH4lH2M3GRh24rjgG96qGE8G5dNcTWZs5j/NFU3WRV8JHTP1RKVDF8f85+O8
vLwjFsnU7CLOA7MZBKmxcX8c5/0jl1vInBP+s5db0DUOdLkF3Q5ItwU+cbPJ
TE2XRXUukqHy9I5CZgVlmODfO5tvoTbvTGcPKChPKWLiyCD0KcwkM5uUHjcz
U2YXfXDscS9GnGPO+jBBo0m2Am4iKWouq6jfMBe6UACG/CDKzRmCesRY2YrS
tfNc49dlxI6mg+vT0RVnyjCiARjcKUloVTf1nf5NN/eB8Q6njmJPj/4CoNaf
u2yvM79j5JkZZtpxQkeYdm4Wbgx1DJiLer4qzsKjNoJEVdaJFgHcg573NFf+
drQ7ytgSfXEy0g/Oyi+gwpMAamXR/WQDS06EaW4WZsoCd+UvDOm+S1z5T24L
bCdCvty8eQeMZZtT19W60cg4gl0e0FIXfFCIM/bigOk5HaPny7sjokpIoQcT
j1RjMnER1ynJtIqbfM1bGi8Pgv+kC5oDF6SbKyOxssLCzKZGp3iKZsYzWg0f
RfBYCXOkWJJ2hMkXDGYys+CK3P2KnJrJwIttb/F1+hYtE+x+L9t8CLfi8nsa
SC/GfJp35n3P/fqoRb8dI/YwXrNeJ15L3jdrbK8eHrwvN/bLSHd2wm5/v4sO
zwZbGuvP3x4PW2P8TX7Jwqzs//h+iBMbq9jL23TsFZU6cZz/FBN7X9GjxXb7
HEcn6lLVTjnXeDvzpXMhgv/3U7gfX3vQpnAdQfj/A4VzHG1hzfS9YWtHoPIL
O0ZWzBTdlY0X//hnFC4t+Q1moHD6nX4MQeG8Z/347fAvCvcvCvcvCvcvCvcv
CvcvCvdfSuGiUbYjp3Z2keL3qKNvgpVBrumt1NuXm7dYnpV8d397Vsz0+fNs
fFx+Tvrd+TrT9VUUep9U73vnYb6+7x5e1HI5CPbyrDOCaO4wCMeWtT/S52wq
qp+Gq8DpLr4NnyJHLUN2/5jufvmP939pjc38zjP47qXhukra0XNt4aY/NNzK
t/xVz0IK+mPf8gPPomSVdzvdyw5jad3MrkbH/l1lqLQ1BgqYOgL84wNd6GKM
EiVOFavxuHNBHNK2FYcWvl3a6my48LGC2AUU9G25tfCd+pNQNUdsloygsLOm
BRut6oomeVmkwky/3GytfN++T5w29FfX3K2yhieAR7A2b4BCs/HU7mtTmCT6
8+VGsujSvOre9le3ttOVc+FRSR2FFW6aGJF6v3Ekc2+JoejnvVkoaOlDR6Fb
V4fRzMn93GfRJnajzMvvH/w02wIsDp6UHoxZ9ByoALvUGAU5OMuSNdtPqiv5
6BZwY5op1aV85yv5BtxrYY5M/JvW2ug2VFtolqsT7jfNSisGBuXAO/Dc9dqW
NkDDHWdoar5qlCzvJbTe50miGjt7r2I5ishv21a1GVuxJXx34cv6lxuR7op1
BGM8T0+341d349vyjt+7LPcKYwZNE30BsCXG6X5mLfv63GZbv7Ul5vqywIzy
8yrl52N1n07zJAjpXtkle7CH2jTMoiGM2zbyRHZZuI8daN0T5sHyZmwRyjoY
lqLB92sB+JwjFAtf2D/7UrLwYDu6ai7h9BjLAR785vY+/iw6MW0XDXTF2Or5
NyGWMw9z/58BEujLD7L4Rnc9Y93f2N1zvh3pD2kSWVaueUrJ5nfBt+WwIz3P
inGm7u++M/nTMBE+zIGxiWkelqt98ZswZn8oB9H8PJmNx8dtZ/rbYKV/63/7
9lfDRRcxG8IgC136RyPH938l4PthePm325FtP32g6mgfqCpeXVKLaro09biv
y3zycrtVLPfvf6sqpCVlWdRlWJpKRdSsdWrjsp7JuR1e5bRq63T934IXEeW1
p4JtVearHlgeUzHsxTb/eHPz1JSPOV2pl8YHBJCbuCp6VN+j97yK4k12oJCO
hteUQqJKWqu6AFF9+x4Vu6FHL0tYVncf1mOqW6DvUv2axUsQHk7VdOrgt1UE
lvfjDYG2ysg2MnhVu5MkeeoIFUaq61i1CmBffWhRFVuL4oLqEuEHz0VddPZU
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
7HqpQQ/pIHj9s4bxX2oGvGhYqQIA

-->

</rfc>

