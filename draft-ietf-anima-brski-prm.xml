<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.1 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-11" category="std" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2023"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<?line 130?>

<t>This document defines enhancements to Bootstrapping a Remote Secure Key Infrastructure (BRSKI, RFC8995) to enable bootstrapping in domains featuring no or only limited connectivity between a pledge and the domain registrar.
It specifically changes the interaction model from a pledge-initiated mode, as used in BRSKI, to a pledge-responding mode, where the pledge is in server role.
For this, BRSKI with Pledge in Responder Mode (BRSKI-PRM) introduces a new component, the registrar-agent, which facilitates the communication between pledge and registrar during the bootstrapping phase.
To establish the trust relation between pledge and registrar, BRSKI-PRM relies on object security rather than transport security.
The approach defined here is agnostic to the enrollment protocol that connects the domain registrar to the domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<?line 138?>

<section anchor="introduction"><name>Introduction</name>

<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer site) domain.
This includes the discovery of the BRSKI registrar in the customer domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer domain, specifically the customer domain certificate, are exchanged and authenticated utilizing voucher-request and voucher-response artifacts as defined in <xref target="RFC8995"/>.
Vouchers are signed objects from the Manufacturer's Authorized Signing Authority (MASA).
The MASA issues the voucher and provides it via the domain registrar to the pledge.
<xref target="RFC8366"/> specifies the format of the voucher artifacts.
<xref target="I-D.ietf-anima-rfc8366bis"/> further enhances the format of the voucher artifacts and also the voucher-request.</t>

<t>For the certificate enrollment of devices, BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer domain specific device certificates.
EST in turn relies for the authentication and authorization of the certification request on the credentials used by the underlying TLS between the EST client and the EST server.</t>

<t>BRSKI addresses scenarios in which the pledge initiates the bootstrapping acting as client (referred to as initiator mode by this document).
BRSKI with pledge in responder mode (BRSKI-PRM) defined in this document allows the pledge to act as server, so that it can be triggered to generate bootstrapping requests in the customer domain.
For this approach, this document:</t>

<t><list style="symbols">
  <t>introduces the registrar-agent as new component to facilitate the communication between the pledge and the domain registrar.
The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
BRSKI-PRM supports the identification of the registrar-agent that was performing the bootstrapping allowing for accountability of the pledges installation, when the registrar-agent is a component used by an installer and not co-located with the registrar.</t>
  <t>specifies the interaction (data exchange and data objects) between a pledge acting as server, the registrar-agent acting as client, and the domain registrar.</t>
  <t>enables the usage of arbitrary transports between the pledge and the domain registrar via the registrar-agent; security is addressed at the application layer, and both IP-based and non-IP connectivity can be used between pledge and registrar-agent.</t>
  <t>allows the application of registrar-agent credentials to establish TLS connections to the domain registrar; these are different from the IDevID of the pledge.</t>
</list></t>

<t>The term endpoint used in the context of this document is equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>; it is not used to describe a device.
Endpoints are accessible via Well-Known URIs <xref target="RFC8615"/>.
For the interaction with the domain registrar, the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints as well as additional endpoints defined in this document.
To utilize the EST server endpoints on the domain registrar, the registrar-agent will act as client toward the registrar.</t>

<t>The registrar-agent also acts as a client when communicating with a pledge in responder mode.
Here, TLS with server-side, certificate-based authentication is only optionally supported.
If TLS is optionally used between the registrar-agent and the pledge, the registrar-agent needs to identify the pledge based on its product serial number rather than the hostname as this is not set in an IDevID certificate.</t>

<t>BRSKI-PRM is designed to rely on object security to support also for alternative transports for which TLS may not be available, e.g., Bluetooth or NFC.
This is achieved through an additional signature wrapping of the exchanged data objects involving the registrar-agent for transport.</t>

<t>To utilize EST <xref target="RFC7030"/> for enrollment, the domain registrar must perform the pre-processing of this wrapping signature before actually using EST as defined in <xref target="RFC7030"/>.</t>

<t>There may be pledges which can support both modes, initiator and responder mode.
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification Authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data.</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request.</t>
  </dd>
  <dt>EE:</dt>
  <dd>
    <t>End Entity.</t>
  </dd>
  <dt>endpoint:</dt>
  <dd>
    <t>term equivalent to resource in HTTP <xref target="RFC9110"/> and CoAP <xref target="RFC7252"/>.
Endpoints are accessible via .well-known URIs.</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>mutual Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available on-site.
It may be at a central site or an internet resident "cloud" service.
The on-site to off-site connection may also be temporary and, e.g., only available at times when workers are present on a construction side, for instance.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge Enrollment-Request is a signature wrapped CSR, signed by the pledge that requests enrollment to a domain.</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof-of-Possession (of a private key), as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof-of-Identity, as defined in <xref target="RFC5272"/>.</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge Voucher-Request is a request for a voucher sent to the domain registrar.
The PVR is signed by the Pledge.</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration Authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.
In BRSKI-PRM this is a functionality of the domain registrar, as in BRSKI <xref target="RFC8995"/>.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar Enrollment-Request is the CSR of a PER sent to the CA by the domain registrar (RA).</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar Voucher-Request is a request for a voucher signed by the domain registrar to the MASA.
It may contain the PVR received from the pledge.</t>
  </dd>
</dl>

<t>This document includes many examples that would contain many long sequences of base64 encoded objects with no content directly comprehensible to a human reader.
In order to keep those examples short, they use the token "base64encodedvalue==" as a placeholder for base64 data.
The full base64 data is included in the appendices of this document.</t>

<t>This protocol unavoidably has a mix of both base64 encoded data (as is normal for many JSON encoded protocols), and also BASE64URL encoded data, as specified by JWS.
The latter is indicated by a string like "BASE64URL(content-name)".</t>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to scenarios where pledges may have no direct connection to the domain registrar, may have no continuous connection, or require coordination of the pledge requests to be provided to a domain registrar.</t>

<t>This can be motivated by pledges deployed in environments not yet connected to the operational customer domain network, e.g., at a building construction site, or environments intentionally disconnected from the Internet, e.g., critical industrial facilities.
Another example is the assembly of electrical cabinets, which are prepared in advance before the installation at a customer domain.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building or the basement is equipped with sensors, actuators, and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.</t>

<t>During the installation, for instance, a service technician collects the device-specific information from the basement network and provides them to the central building management system.
This could be done using a laptop, common mobile device, or dedicated commissioning tool to transport the information.
The service technician may successively collect device-specific information in different parts of the building before connecting to the domain registrar for bulk bootstrapping.</t>

<t>A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement or other detached areas.
These operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.
The registrar-agent, defined in this document, may be run on the technician's laptop to interact with pledges.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates.
CAs may also require higher security in the registration procedures.
There may be situations in which the customer domain does not offer enough physical security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presumes the availability of the pledge and the registrar-agent to communicate with another.
This may not be possible in constrained environments where, in particular, power must be conserved.
In these situations, it is anticipated that the transceiver will be powered down most of the time.
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.
To overcome this situation, the pledges may need to be powered on, either manually or by sending a trigger signal.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/>, the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server):</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and the registrar, additional functionality is needed either on the registrar or as a stand-alone component.
This new functionality is defined as registrar-agent and acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment.
These requests are then provided by the registrar-agent to the registrar.
This requires the definition of pledge endpoints to allow interaction with the registrar-agent.</t>
  <t>The security of communication between the registrar-agent and the pledge must not rely on Transport Layer Security (TLS) to enable application of BRSKI-PRM in environments, in which the communication between the registrar-agent and the pledge is done over other technologies like BTLE or NFC, which may not support TLS protected communication.
In addition, the pledge does not have a certificate that can easily be verified by <xref target="RFC6125"/> methods.</t>
  <t>The use of authenticated self-contained objects addresses both, the TLS challenges and the technology stack challenge.</t>
  <t>By contrast, the registrar-agent can be authenticated by the registrar as a component, acting on behalf of the registrar.
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>It would be inaccurate for the voucher-request and voucher-response to use an assertion with value "proximity" in the voucher, as the pledge was not in direct contact with the registrar for bootstrapping.
Therefore, a new "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher and enrollment processing:</t>

<t><list style="symbols">
  <t>POI: provides data-origin authentication of a data object, e.g., a voucher-request or an enrollment-request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>POP: proves that an entity possesses and controls the private key corresponding to the public key contained in the certification request, typically by adding a signature computed using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher-requests and -responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate.
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and POP of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient.
A POI is also required for the certification request and therefore the certification request needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request and may be provided directly with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10 using existing credentials on the pledge (IDevID). This allows the process to be independent of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate new use cases in which the pledge acts as server.
The responder mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.
The format of the bootstrapping objects produced or consumed by the pledge is based on JOSE <xref target="RFC7515"/> and further specified in <xref target="exchanges_uc2"/> to address the requirements stated in <xref target="req-sol"/> above.
In constrained environments it may be provided based on COSE <xref target="RFC9052"/> and <xref target="RFC9053"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found on slide 8 of <xref target="BRSKI-PRM-abstract"/>.</t>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer domain, this document specifies the exchange of authenticated self-contained objects with the help of a registrar-agent.</t>

<t>This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>.</t>

<t>Note that the Join Proxy is not shown in the figure, having been replaced by the Registrar Agent.
The Join Proxy may still be present, and there <bcp14>MAY</bcp14> be some situations in which the Join Proxy can be used by the Registrar-Agent to connect to the Registrar.
For example, the Registrar-Agent application on a smartphone often can connect to local wifi without giving up their LTE connection <xref target="androidnsd"/>, but only can make link-local connections.</t>

<t>The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints where the required functionality is provided.</t>
  <t>enhances existing endpoints with new supported media types, e.g., for JWS voucher.</t>
  <t>defines new endpoints where additional functionality is required, e.g., for wrapped certification request, CA certificates, or new status information.</t>
</list></t>

<figure title="BRSKI-PRM architecture overview using registrar-agent" anchor="uc2figure"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="464" width="456" viewBox="0 0 456 464" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,240 L 8,384" fill="none" stroke="black"/>
<path d="M 40,48 L 40,232" fill="none" stroke="black"/>
<path d="M 80,240 L 80,384" fill="none" stroke="black"/>
<path d="M 152,240 L 152,336" fill="none" stroke="black"/>
<path d="M 208,32 L 208,144" fill="none" stroke="black"/>
<path d="M 224,368 L 224,416" fill="none" stroke="black"/>
<path d="M 256,240 L 256,336" fill="none" stroke="black"/>
<path d="M 328,240 L 328,336" fill="none" stroke="black"/>
<path d="M 336,64 L 336,144" fill="none" stroke="black"/>
<path d="M 376,152 L 376,232" fill="none" stroke="black"/>
<path d="M 376,336 L 376,368" fill="none" stroke="black"/>
<path d="M 424,240 L 424,336" fill="none" stroke="black"/>
<path d="M 424,368 L 424,416" fill="none" stroke="black"/>
<path d="M 432,32 L 432,144" fill="none" stroke="black"/>
<path d="M 208,32 L 432,32" fill="none" stroke="black"/>
<path d="M 40,48 L 72,48" fill="none" stroke="black"/>
<path d="M 168,48 L 200,48" fill="none" stroke="black"/>
<path d="M 208,64 L 432,64" fill="none" stroke="black"/>
<path d="M 208,144 L 432,144" fill="none" stroke="black"/>
<path d="M 8,240 L 80,240" fill="none" stroke="black"/>
<path d="M 152,240 L 256,240" fill="none" stroke="black"/>
<path d="M 328,240 L 424,240" fill="none" stroke="black"/>
<path d="M 88,304 L 144,304" fill="none" stroke="black"/>
<path d="M 264,304 L 320,304" fill="none" stroke="black"/>
<path d="M 152,336 L 256,336" fill="none" stroke="black"/>
<path d="M 328,336 L 424,336" fill="none" stroke="black"/>
<path d="M 224,368 L 424,368" fill="none" stroke="black"/>
<path d="M 8,384 L 80,384" fill="none" stroke="black"/>
<path d="M 224,416 L 424,416" fill="none" stroke="black"/>
<polygon class="arrowhead" points="384,232 372,226.4 372,237.6" fill="black" transform="rotate(90,376,232)"/>
<polygon class="arrowhead" points="384,152 372,146.4 372,157.6" fill="black" transform="rotate(270,376,152)"/>
<polygon class="arrowhead" points="328,304 316,298.4 316,309.6" fill="black" transform="rotate(0,320,304)"/>
<polygon class="arrowhead" points="272,304 260,298.4 260,309.6" fill="black" transform="rotate(180,264,304)"/>
<polygon class="arrowhead" points="152,304 140,298.4 140,309.6" fill="black" transform="rotate(0,144,304)"/>
<polygon class="arrowhead" points="96,304 84,298.4 84,309.6" fill="black" transform="rotate(180,88,304)"/>
<polygon class="arrowhead" points="48,232 36,226.4 36,237.6" fill="black" transform="rotate(90,40,232)"/>
<g class="text">
<text x="100" y="52">Drop</text>
<text x="140" y="52">Ship</text>
<text x="244" y="52">Vendor</text>
<text x="304" y="52">Service</text>
<text x="224" y="84">M</text>
<text x="280" y="84">anufacturer</text>
<text x="224" y="100">A</text>
<text x="272" y="100">uthorized</text>
<text x="384" y="100">Ownership</text>
<text x="224" y="116">S</text>
<text x="260" y="116">igning</text>
<text x="376" y="116">Tracker</text>
<text x="224" y="132">A</text>
<text x="268" y="132">uthority</text>
<text x="412" y="180">BRSKI-</text>
<text x="404" y="196">MASA</text>
<text x="248" y="212">...............................</text>
<text x="416" y="212">.........</text>
<text x="128" y="228">.</text>
<text x="448" y="228">.</text>
<text x="128" y="244">.</text>
<text x="448" y="244">.</text>
<text x="128" y="260">.</text>
<text x="448" y="260">.</text>
<text x="44" y="276">Pledge</text>
<text x="116" y="276">BRSKI-</text>
<text x="204" y="276">Registrar-</text>
<text x="292" y="276">BRSKI-</text>
<text x="364" y="276">Domain</text>
<text x="448" y="276">.</text>
<text x="112" y="292">PRM</text>
<text x="184" y="292">Agent</text>
<text x="288" y="292">PRM</text>
<text x="376" y="292">Registrar</text>
<text x="448" y="292">.</text>
<text x="356" y="308">(PKI</text>
<text x="392" y="308">RA)</text>
<text x="448" y="308">.</text>
<text x="128" y="324">.</text>
<text x="220" y="324">LDevID</text>
<text x="448" y="324">.</text>
<text x="128" y="340">.</text>
<text x="448" y="340">.</text>
<text x="44" y="356">IDevID</text>
<text x="128" y="356">.</text>
<text x="448" y="356">.</text>
<text x="128" y="372">.</text>
<text x="448" y="372">.</text>
<text x="128" y="388">.</text>
<text x="248" y="388">Key</text>
<text x="324" y="388">Infrastructure</text>
<text x="448" y="388">.</text>
<text x="128" y="404">.</text>
<text x="260" y="404">(e.g.,</text>
<text x="304" y="404">PKI</text>
<text x="336" y="404">CA)</text>
<text x="448" y="404">.</text>
<text x="128" y="420">.</text>
<text x="448" y="420">.</text>
<text x="288" y="436">.........................................</text>
<text x="236" y="452">&quot;Domain&quot;</text>
<text x="316" y="452">Components</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
                         +---------------------------+
    +---- Drop Ship -----| Vendor Service            |
    |                    +---------------+-----------+
    |                    | M anufacturer |           |
    |                    | A uthorized   | Ownership |
    |                    | S igning      | Tracker   |
    |                    | A uthority    |           |
    |                    +---------------+-----------+
    |                                         ^
    |                                         | BRSKI-
    |                                         | MASA
    |          ...............................|.........
    V          .                              v        .
+--------+     .  +------------+        +-----------+  .
|        |     .  |            |        |           |  .
| Pledge | BRSKI- | Registrar- | BRSKI- | Domain    |  .
|        |  PRM   | Agent      |  PRM   | Registrar |  .
|        |<------>|            |<------>| (PKI RA)  |  .
|        |     .  |     LDevID |        |           |  .
|        |     .  +------------+        +-----+-----+  .
| IDevID |     .                              |        .
|        |     .           +------------------+-----+  .
+--------+     .           | Key Infrastructure     |  .
               .           | (e.g., PKI CA)         |  .
               .           +------------------------+  .
               .........................................
                         "Domain" Components
]]></artwork></artset></figure>

<t><xref target="uc2figure"/> shows the relations between the following main components:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Any other protocols (including HTTPS) can be used as long as they support the exchange of the necessary data objects.
This includes CoAP or protocol to be used over Bluetooth or NFC connections
A pledge acting as a server during bootstrapping leads to some differences for BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent <bcp14>MUST</bcp14> be possible.</t>
      <t>As the registrar-agent <bcp14>MUST</bcp14> be able to request data objects for bootstrapping of the pledge, the pledge <bcp14>MUST</bcp14> offer corresponding endpoints as defined in <xref target="pledge_ep"/>.</t>
      <t>The registrar-agent <bcp14>MUST</bcp14> provide additional data to the pledge in the context of the voucher-request trigger, which the pledge <bcp14>MUST</bcp14> include into the PVR as defined in <xref target="pvrt"/> and <xref target="pvrr"/>.
This allows the registrar to identify, with which registrar-agent the pledge was in contact.</t>
      <t>The order of exchanges in the BRSKI-PRM call flow is different those in BRSKI <xref target="RFC8995"/>, as the PVR and PER are collected at once and provided to the registrar.
This enables bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a store and forward communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations in which the domain registrar is not directly reachable by the pledge.
This may be due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as the voucher-request and the enrollment-request on one or multiple pledges.
It can then perform a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information about the domain registrar: the registrar EE certificate, LDevID(CA) certificate, IP address, either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the TLS session establishment and also to verify that this registrar-agent is authorized to perform the bootstrapping of the distinct pledge.
The registrar-agent may be realized as stand-alone component supporting nomadic activities of a service technician moving between different installation sites. 
Contrary, the registrar-agent may also be realized as co-located functionality for a registrar, to support pledges in pledge-responder-mode.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general, the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer site) domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
A registrar with combined functionality of BRSKI and BRSKI-PRM detects if the bootstrapping is performed by the pledge directly (BRSKI case) or by the registrar-agent (BRSKI-PRM case) based on the utilized credential for authentication (either pledgeâs IDevID or LDevID from registrar-agent), see also <xref target="exchanges_uc2_2"/>.</t>
  <t>The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
A MASA is able to support enrollment via registrar-agent without changes unless it checks the vouchers proximity indication, in which case it would need to be enhanced to support BRSKI-PRM to also accept the agent-proximity.</t>
</list></t>

<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a statement in the PVR and in the voucher, that the registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
"Agent-proximity" is therefore a different assertion then "proximity", which is defined in section 4 of <xref target="RFC8366"/>.
"Agent-proximity" is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>.
This can be verified by the registrar and also by the MASA during the voucher-request processing.</t>

<t>In BRSKI, the pledge verifies POP of the registrar via the TLS handshake and pins that public key as the "proximity-registrar-cert" into the voucher request.
This allows the MASA to verify the proximity of the pledge and registrar, facilitating a decision to assign the pledge to that domain owner.
In BRSKI, the TLS connection is considered provisional until the pledge receives the voucher.</t>

<t>In contrast, in BRSKI-PRM, the pledge has no direct connection to the registrar and must take the Registrar-Agent LDevID provisionally.
The registrar-agent has included its LDevID, a certificate signed by the domain owner, into the PVR trigger message.
The registrar-agent identity is therefore included into the Pledge Voucher Request (PVR).</t>

<t>Akin to the BRSKI case, the pledge has provided proximity evidence to the MASA.
But additionally, this allows the Registrar to be sure that the PVR collected by the Registrar-Agent was in fact collected by the Registrar-Agent to which the Registrar is connected to.</t>

<t>In a similar fashion, the pledge accepts the registrar certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.
See also Section 5 of <xref target="RFC8995"/> on "PROVISIONAL accept of server cert".</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>The pledge is triggered by the registrar-agent to generate the PVR and PER.
It will also be triggered for processing of the responses and the generation of status information once the registrar-agent has received the responses from the registrar later in the process.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction as responder with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document.
The endpoints are defined with short names to also accommodate for the constraint case.</t>

<t>When the registrar-agent reaches out to a pledge, for instance with an example URI path "http://pledge.example/.well-known/brski/tpvr", it will in fact send a Host: header of "pledge.example", with a relative path of "/.well-known/brski/tpbr".
However in practice the pledge will often be known only by its IP address as returned by a discovery protocol, and that is what will be present in the Host: header.</t>

<t>The pledge <bcp14>MUST</bcp14> respond to all queries regardless of what Host: header is provided by the client.
<xref section="7.2" sectionFormat="comma" target="RFC9110"/> makes the Host: header mandatory, so it will always be present.</t>

<t>Operations and their corresponding URIs:</t>

<texttable title="Endpoints on the pledge" anchor="eppfigure1">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Trigger pledge voucher-request creation - Returns PVR</c>
      <c>/tpvr</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Trigger pledge enrollment-request - Returns PER</c>
      <c>/tper</c>
      <c><xref target="exchanges_uc2_1"/></c>
      <c>Supply voucher to pledge - Returns pledge voucher-status</c>
      <c>/svr</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply enrollment-response to pledge - Returns pledge enrollment-status</c>
      <c>/ser</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Supply CA certs to pledge</c>
      <c>/scac</c>
      <c><xref target="exchanges_uc2_3"/></c>
      <c>Query status of pledge - Returns pledge-status</c>
      <c>/qps</c>
      <c><xref target="exchanges_uc2_5"/></c>
</texttable>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent as a new component provides a message passing service between the pledge and the domain registrar.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher-request/response, the enrollment-request/response, as well as related telemetry and status information.</t>

<t>For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.</t>

<t>The communication between the registrar-agent and the pledge <bcp14>MAY</bcp14> be protected using TLS as outlined in <xref target="exchanges_uc2_1"/>.
The details of doing TLS validation are <xref target="pledgehttps"/>.</t>

<t>For the communication with the registrar, the registrar-agent uses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/> (derived from EST <xref target="RFC7030"/>) where suitable.
These endpoints do not expect signature wrapped-objects, which are used b BRSKI-PRM.
This specifically applies for the enrollment-request and the provisioning of CA certificates.
To accommodate the use of signature-wrapped object, the following additional endpoints are defined for the <em>registrar</em>.
Operations and their corresponding URIs:</t>

<texttable title="Additional endpoints on the registrar" anchor="eppfigure2">
      <ttcol align='left'>Operation</ttcol>
      <ttcol align='left'>Endpoint</ttcol>
      <ttcol align='left'>Details</ttcol>
      <c>Supply PER to registrar - Returns enrollment-response</c>
      <c>/requestenroll</c>
      <c><xref target="exchanges_uc2_2_per"/></c>
      <c>Request (wrapped) CA certificates - Returns wrapped CA Certificates</c>
      <c>/wrappedcacerts</c>
      <c><xref target="exchanges_uc2_2_wca"/></c>
</texttable>

<t>For authentication to the domain registrar, the registrar-agent uses its EE (RegAgt) certificate.
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>The registrar-agent will use its EE certificate when establishing a TLS session with the domain registrar for TLS client authentication.
The EE (RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
<xref target="RFC8995"/> makes a similar requirement.
In BRSKI-PRM, the SKID is used in favor of providing the complete EE (RegAgt) certificate to accommodate also constraint environments and reduce bandwidth needed for communication with the pledge.
In addition, it follows the recommendation from BRSKI to use SKID in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication of the registrar-agent is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the EE (RegAgt) certificate allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and to adopt different internal handling accordingly.
If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the EE (RegAgt) certificate.
Alternatively, the domain may feature a CA specifically for issuing registrar-agent LDevID certificates.
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the EE (RegAgt) certificate, the registrar-agent is provided with the product-serial-number(s) of the pledge(s) to be bootstrapped.
This is necessary to allow the discovery of pledge(s) by the registrar-agent using mDNS (see <xref target="discovery_uc2_ppa"/>)
The list may be provided by prior administrative means or the registrar agent may get the information via an interaction with the pledge.
For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.
This behavior is retained also in BRSKI-PRM.</t>

<t>The following information <bcp14>MUST</bcp14> be available at the registrar-agent before interaction with a pledge:</t>

<t><list style="symbols">
  <t>EE (RegAgt) certificate and corresponding private key: own operational key pair (to sign agent-signed-data).</t>
  <t>Registrar EE certificate: certificate of the domain registrar (to be provided to the pledge).</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped (to query discover specific pledges based on the serial number).</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>As a registrar-agent acts as representative of the domain registrar towards the pledge or may even be collocated with the domain registrar, a separate discovery of the registrar is likely not needed as registrar-agent and registrar are domain components and have a trust relation.
Nevertheless, a registrar-agent may discover a registrar using the basic mechanism specified in section 4 and the appendix A.2 of <xref target="RFC8995"/>.
Note that this discovery, does not provide information on specific capabilities of registrars.
As a more general solution, the BRSKI discovery mechanism can be extended to provide upfront information on the capabilities of registrars, such as the mode of operation (pledge-responder-mode or registrar-responder-mode).
Defining discovery extensions is out of scope of this document.
This may be provided in <xref target="I-D.eckert-anima-brski-discovery"/>.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge.
Note that <xref target="RFC6762"/> Section 9 provides support for conflict resolution in situations when an mDNS responder receives a mDNS response with inconsistent rdata.
The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".
The product-serial-number composition is vendor dependent and may contain information regarding the vendor, the product type, and further information specific to the product instance. To allow distinction of pledges, the product-serial-number therfore needs to be sufficiently unique.</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>A manufacturer may allow the pledge to react on mDNS discovery without his product-serial-number contained. This allows a commissioning tool to discover pledges to be bootstrapped in the domain. The manufacturer support this functionality as outlined in <xref target="sec_cons_mDNS"/>.</t>

<t>Establishing network connectivity of the pledge is out of scope of this document but necessary to apply mDNS.
For Ethernet it is provided by simply connecting the network cable.
For WiFi networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping, e.g., as proposed in <xref target="I-D.richardson-emu-eap-onboarding"/>.
The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID.
How to gain network connectivity is out of scope of this document.</t>

<t>As an alternative discovery mechanism GRASP M_DISCOVERY multicast with M_RESPONSE, based on <xref target="RFC8990"/>, may be used.
The specification of this approach to discover a pledge from the registrar-agent is left for further study.
Note that <xref target="RFC8990"/> does not support conflict resolution as mDNS, which may be a limitation for its application.</t>

</section>
</section>
<section anchor="behavior-of-pledge-with-combined-functionality"><name>Behavior of Pledge with Combined Functionality</name>

<t>Pledges <bcp14>MAY</bcp14> support both initiator or responder mode.</t>

<t>A pledge in initiator mode should listen for announcement messages as described in <xref section="4.1" sectionFormat="of" target="RFC8995"/>.
Upon discovery of a potential registrar, it initiates the bootstrapping to that registrar.
At the same time (so as to avoid the Slowloris-attack described in <xref target="RFC8995"/>), it <bcp14>SHOULD</bcp14> also respond to the triggers for responder mode described in this document.</t>

<t>Once a pledge with combined functionality has been bootstrapped, it <bcp14>MAY</bcp14> act as client for enrollment of further certificates needed, e.g., using the enrollment protocol of choice.
If it still acts as server, the defined BRSKI-PRM endpoints to trigger a pledge enrollment-request (PER) or to provide an enrollment-response can be used for further certificates.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and/or network technologies).
This specification utilizes HTTP as transport.
Alternative transport channels may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
These transport means may differ from, and are independent of, the ones used between the registrar-agent and the registrar.
Transport channel independence is realized by data objects, which are not bound to specific transport security and stay the same across the communication from the pledge via the registrar-agent to the registrar..
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied for data exchanges between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain registrar certificate (registrar LDevID certificate) to the pledge to be included in the PVR leaf "agent-provided-proximity-registrar-certificate".
This enables the registrar to verify that it is the desired registrar for handling the request.</t>

<t>The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection with this domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the pledge product-serial-number, signed with the private key corresponding to the EE (RegAgt) certificate, as described in <xref target="exchanges_uc2_1"/>.
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.</t>

<t>The registrar <bcp14>MUST</bcp14> provide the EE (RegAgt) certificate identified by the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data from the PVR in its RVR (see also <contact fullname="pvr-proc-reg"/>.</t>

<t>The MASA in turn verifies the registrar LDevID certificate is included in the PVR (contained in the "prior-signed-voucher-request" field of RVR) in the "agent-provided-proximity-registrar-certificate" leaf and may assert the PVR as "verified" or "logged".</t>

<t>In addition, the MASA <bcp14>MAY</bcp14> issue the assertion "agent-proximity" as follows:
The MASA verifies the signature of the agent-signed-data contained in the prior-signed-voucher-request, based on the provided EE (RegAgt) certificate in the "agent-sign-cert" leaf of the RVR.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher.
The assertion of "agent-proximity" is similar to the proximity assertion by the MASA when using BRSKI.
Note that the different assertions do not provide a metric of strength as the security properties are not comparable.</t>

<t>Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx error status code as described in section 5.6 of <xref target="RFC8995"/>.
When successful, the voucher will then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="1088" width="560" viewBox="0 0 560 1088" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 32,104 L 32,208" fill="none" stroke="black"/>
<path d="M 32,248 L 32,336" fill="none" stroke="black"/>
<path d="M 32,392 L 32,592" fill="none" stroke="black"/>
<path d="M 32,632 L 32,712" fill="none" stroke="black"/>
<path d="M 32,728 L 32,752" fill="none" stroke="black"/>
<path d="M 32,808 L 32,896" fill="none" stroke="black"/>
<path d="M 32,952 L 32,1072" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 112,32 L 112,96" fill="none" stroke="black"/>
<path d="M 168,104 L 168,208" fill="none" stroke="black"/>
<path d="M 168,256 L 168,336" fill="none" stroke="black"/>
<path d="M 168,384 L 168,592" fill="none" stroke="black"/>
<path d="M 168,624 L 168,704" fill="none" stroke="black"/>
<path d="M 168,736 L 168,752" fill="none" stroke="black"/>
<path d="M 168,816 L 168,896" fill="none" stroke="black"/>
<path d="M 168,960 L 168,1072" fill="none" stroke="black"/>
<path d="M 208,32 L 208,96" fill="none" stroke="black"/>
<path d="M 240,32 L 240,96" fill="none" stroke="black"/>
<path d="M 312,104 L 312,208" fill="none" stroke="black"/>
<path d="M 312,256 L 312,336" fill="none" stroke="black"/>
<path d="M 312,512 L 312,592" fill="none" stroke="black"/>
<path d="M 312,640 L 312,704" fill="none" stroke="black"/>
<path d="M 312,736 L 312,752" fill="none" stroke="black"/>
<path d="M 312,816 L 312,896" fill="none" stroke="black"/>
<path d="M 312,960 L 312,1008" fill="none" stroke="black"/>
<path d="M 312,1040 L 312,1072" fill="none" stroke="black"/>
<path d="M 336,32 L 336,96" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 432,104 L 432,208" fill="none" stroke="black"/>
<path d="M 432,256 L 432,336" fill="none" stroke="black"/>
<path d="M 432,400 L 432,496" fill="none" stroke="black"/>
<path d="M 432,576 L 432,592" fill="none" stroke="black"/>
<path d="M 432,640 L 432,704" fill="none" stroke="black"/>
<path d="M 432,736 L 432,752" fill="none" stroke="black"/>
<path d="M 432,816 L 432,896" fill="none" stroke="black"/>
<path d="M 432,960 L 432,976" fill="none" stroke="black"/>
<path d="M 432,1040 L 432,1072" fill="none" stroke="black"/>
<path d="M 448,32 L 448,96" fill="none" stroke="black"/>
<path d="M 472,32 L 472,96" fill="none" stroke="black"/>
<path d="M 536,104 L 536,208" fill="none" stroke="black"/>
<path d="M 536,256 L 536,336" fill="none" stroke="black"/>
<path d="M 536,400 L 536,512" fill="none" stroke="black"/>
<path d="M 536,560 L 536,592" fill="none" stroke="black"/>
<path d="M 536,640 L 536,704" fill="none" stroke="black"/>
<path d="M 536,736 L 536,752" fill="none" stroke="black"/>
<path d="M 536,816 L 536,896" fill="none" stroke="black"/>
<path d="M 536,960 L 536,1008" fill="none" stroke="black"/>
<path d="M 536,1040 L 536,1072" fill="none" stroke="black"/>
<path d="M 552,32 L 552,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 112,32 L 208,32" fill="none" stroke="black"/>
<path d="M 240,32 L 336,32" fill="none" stroke="black"/>
<path d="M 376,32 L 448,32" fill="none" stroke="black"/>
<path d="M 472,32 L 552,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 112,96 L 208,96" fill="none" stroke="black"/>
<path d="M 240,96 L 336,96" fill="none" stroke="black"/>
<path d="M 376,96 L 448,96" fill="none" stroke="black"/>
<path d="M 472,96 L 552,96" fill="none" stroke="black"/>
<path d="M 40,176 L 160,176" fill="none" stroke="black"/>
<path d="M 40,192 L 160,192" fill="none" stroke="black"/>
<path d="M 40,256 L 56,256" fill="none" stroke="black"/>
<path d="M 136,256 L 160,256" fill="none" stroke="black"/>
<path d="M 40,272 L 80,272" fill="none" stroke="black"/>
<path d="M 136,272 L 160,272" fill="none" stroke="black"/>
<path d="M 40,288 L 80,288" fill="none" stroke="black"/>
<path d="M 128,288 L 160,288" fill="none" stroke="black"/>
<path d="M 40,320 L 80,320" fill="none" stroke="black"/>
<path d="M 136,320 L 160,320" fill="none" stroke="black"/>
<path d="M 40,336 L 80,336" fill="none" stroke="black"/>
<path d="M 128,336 L 160,336" fill="none" stroke="black"/>
<path d="M 176,400 L 216,400" fill="none" stroke="black"/>
<path d="M 264,400 L 304,400" fill="none" stroke="black"/>
<path d="M 176,448 L 208,448" fill="none" stroke="black"/>
<path d="M 256,448 L 304,448" fill="none" stroke="black"/>
<path d="M 320,512 L 408,512" fill="none" stroke="black"/>
<path d="M 456,512 L 528,512" fill="none" stroke="black"/>
<path d="M 320,560 L 392,560" fill="none" stroke="black"/>
<path d="M 472,560 L 528,560" fill="none" stroke="black"/>
<path d="M 176,576 L 200,576" fill="none" stroke="black"/>
<path d="M 280,576 L 304,576" fill="none" stroke="black"/>
<path d="M 176,640 L 216,640" fill="none" stroke="black"/>
<path d="M 264,640 L 304,640" fill="none" stroke="black"/>
<path d="M 320,656 L 344,656" fill="none" stroke="black"/>
<path d="M 392,656 L 424,656" fill="none" stroke="black"/>
<path d="M 320,672 L 344,672" fill="none" stroke="black"/>
<path d="M 400,672 L 424,672" fill="none" stroke="black"/>
<path d="M 176,688 L 192,688" fill="none" stroke="black"/>
<path d="M 288,688 L 304,688" fill="none" stroke="black"/>
<path d="M 288,736 L 304,736" fill="none" stroke="black"/>
<path d="M 176,752 L 192,752" fill="none" stroke="black"/>
<path d="M 40,816 L 56,816" fill="none" stroke="black"/>
<path d="M 136,816 L 160,816" fill="none" stroke="black"/>
<path d="M 40,832 L 64,832" fill="none" stroke="black"/>
<path d="M 144,832 L 160,832" fill="none" stroke="black"/>
<path d="M 40,848 L 64,848" fill="none" stroke="black"/>
<path d="M 144,848 L 160,848" fill="none" stroke="black"/>
<path d="M 40,864 L 64,864" fill="none" stroke="black"/>
<path d="M 144,864 L 160,864" fill="none" stroke="black"/>
<path d="M 40,880 L 56,880" fill="none" stroke="black"/>
<path d="M 40,896 L 56,896" fill="none" stroke="black"/>
<path d="M 136,896 L 160,896" fill="none" stroke="black"/>
<path d="M 176,960 L 224,960" fill="none" stroke="black"/>
<path d="M 272,960 L 304,960" fill="none" stroke="black"/>
<path d="M 176,976 L 200,976" fill="none" stroke="black"/>
<path d="M 288,976 L 304,976" fill="none" stroke="black"/>
<path d="M 320,992 L 336,992" fill="none" stroke="black"/>
<path d="M 512,992 L 528,992" fill="none" stroke="black"/>
<path d="M 320,1008 L 352,1008" fill="none" stroke="black"/>
<path d="M 504,1008 L 528,1008" fill="none" stroke="black"/>
<path d="M 176,1056 L 200,1056" fill="none" stroke="black"/>
<path d="M 280,1056 L 304,1056" fill="none" stroke="black"/>
<polygon class="arrowhead" points="536,992 524,986.4 524,997.6" fill="black" transform="rotate(0,528,992)"/>
<polygon class="arrowhead" points="536,512 524,506.4 524,517.6" fill="black" transform="rotate(0,528,512)"/>
<polygon class="arrowhead" points="432,656 420,650.4 420,661.6" fill="black" transform="rotate(0,424,656)"/>
<polygon class="arrowhead" points="328,1008 316,1002.4 316,1013.6" fill="black" transform="rotate(180,320,1008)"/>
<polygon class="arrowhead" points="328,672 316,666.4 316,677.6" fill="black" transform="rotate(180,320,672)"/>
<polygon class="arrowhead" points="328,560 316,554.4 316,565.6" fill="black" transform="rotate(180,320,560)"/>
<polygon class="arrowhead" points="312,1056 300,1050.4 300,1061.6" fill="black" transform="rotate(0,304,1056)"/>
<polygon class="arrowhead" points="312,976 300,970.4 300,981.6" fill="black" transform="rotate(0,304,976)"/>
<polygon class="arrowhead" points="312,960 300,954.4 300,965.6" fill="black" transform="rotate(0,304,960)"/>
<polygon class="arrowhead" points="312,736 300,730.4 300,741.6" fill="black" transform="rotate(0,304,736)"/>
<polygon class="arrowhead" points="312,640 300,634.4 300,645.6" fill="black" transform="rotate(0,304,640)"/>
<polygon class="arrowhead" points="312,448 300,442.4 300,453.6" fill="black" transform="rotate(0,304,448)"/>
<polygon class="arrowhead" points="312,400 300,394.4 300,405.6" fill="black" transform="rotate(0,304,400)"/>
<polygon class="arrowhead" points="184,960 172,954.4 172,965.6" fill="black" transform="rotate(180,176,960)"/>
<polygon class="arrowhead" points="184,752 172,746.4 172,757.6" fill="black" transform="rotate(180,176,752)"/>
<polygon class="arrowhead" points="184,688 172,682.4 172,693.6" fill="black" transform="rotate(180,176,688)"/>
<polygon class="arrowhead" points="184,576 172,570.4 172,581.6" fill="black" transform="rotate(180,176,576)"/>
<polygon class="arrowhead" points="184,400 172,394.4 172,405.6" fill="black" transform="rotate(180,176,400)"/>
<polygon class="arrowhead" points="168,896 156,890.4 156,901.6" fill="black" transform="rotate(0,160,896)"/>
<polygon class="arrowhead" points="168,848 156,842.4 156,853.6" fill="black" transform="rotate(0,160,848)"/>
<polygon class="arrowhead" points="168,816 156,810.4 156,821.6" fill="black" transform="rotate(0,160,816)"/>
<polygon class="arrowhead" points="168,336 156,330.4 156,341.6" fill="black" transform="rotate(0,160,336)"/>
<polygon class="arrowhead" points="168,288 156,282.4 156,293.6" fill="black" transform="rotate(0,160,288)"/>
<polygon class="arrowhead" points="168,256 156,250.4 156,261.6" fill="black" transform="rotate(0,160,256)"/>
<polygon class="arrowhead" points="168,192 156,186.4 156,197.6" fill="black" transform="rotate(0,160,192)"/>
<polygon class="arrowhead" points="48,880 36,874.4 36,885.6" fill="black" transform="rotate(180,40,880)"/>
<polygon class="arrowhead" points="48,864 36,858.4 36,869.6" fill="black" transform="rotate(180,40,864)"/>
<polygon class="arrowhead" points="48,832 36,826.4 36,837.6" fill="black" transform="rotate(180,40,832)"/>
<polygon class="arrowhead" points="48,816 36,810.4 36,821.6" fill="black" transform="rotate(180,40,816)"/>
<polygon class="arrowhead" points="48,320 36,314.4 36,325.6" fill="black" transform="rotate(180,40,320)"/>
<polygon class="arrowhead" points="48,272 36,266.4 36,277.6" fill="black" transform="rotate(180,40,272)"/>
<polygon class="arrowhead" points="48,256 36,250.4 36,261.6" fill="black" transform="rotate(180,40,256)"/>
<polygon class="arrowhead" points="48,176 36,170.4 36,181.6" fill="black" transform="rotate(180,40,176)"/>
<path class="jump" d="M 32,728 C 26,728 26,712 32,712" fill="none" stroke="black"/><circle cx="168" cy="384" r="6" class="opendot" fill="white" stroke="black"/>
<circle cx="168" cy="624" r="6" class="opendot" fill="white" stroke="black"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="160" y="52">Registrar</text>
<text x="276" y="52">Domain</text>
<text x="412" y="52">Domain</text>
<text x="508" y="52">Vendor</text>
<text x="144" y="68">Agent</text>
<text x="288" y="68">Registrar</text>
<text x="396" y="68">CA</text>
<text x="512" y="68">Service</text>
<text x="156" y="84">(RegAgt)</text>
<text x="280" y="84">(JRC)</text>
<text x="508" y="84">(MASA)</text>
<text x="492" y="116">Internet</text>
<text x="92" y="132">discover</text>
<text x="92" y="148">pledge</text>
<text x="60" y="164">mDNS</text>
<text x="104" y="164">query</text>
<text x="40" y="244">(1)</text>
<text x="88" y="244">trigger</text>
<text x="136" y="244">PVR</text>
<text x="180" y="244">(tPVR)</text>
<text x="224" y="244">and</text>
<text x="256" y="244">PER</text>
<text x="300" y="244">(tPER)</text>
<text x="372" y="244">generation</text>
<text x="428" y="244">on</text>
<text x="468" y="244">pledge</text>
<text x="76" y="260">opt.</text>
<text x="112" y="260">TLS</text>
<text x="108" y="276">tPVR</text>
<text x="104" y="292">PVR</text>
<text x="108" y="324">tPER</text>
<text x="104" y="340">PER</text>
<text x="32" y="356">~</text>
<text x="168" y="356">~</text>
<text x="312" y="356">~</text>
<text x="432" y="356">~</text>
<text x="536" y="356">~</text>
<text x="40" y="388">(2)</text>
<text x="88" y="388">provide</text>
<text x="136" y="388">PVR</text>
<text x="160" y="388">t</text>
<text x="236" y="388">infrastructure</text>
<text x="240" y="404">TLS</text>
<text x="312" y="404">|</text>
<text x="276" y="420">[Reg-Agt</text>
<text x="368" y="420">authenticated</text>
<text x="264" y="436">and</text>
<text x="332" y="436">authorized?]</text>
<text x="232" y="452">PVR</text>
<text x="312" y="452">|</text>
<text x="276" y="468">[Reg-Agt</text>
<text x="364" y="468">authorized?]</text>
<text x="272" y="484">[accept</text>
<text x="340" y="484">device?]</text>
<text x="276" y="500">[contact</text>
<text x="344" y="500">vendor]</text>
<text x="432" y="516">RVR</text>
<text x="436" y="532">[extract</text>
<text x="512" y="532">DomainID]</text>
<text x="432" y="548">[update</text>
<text x="488" y="548">audit</text>
<text x="532" y="548">log]</text>
<text x="432" y="564">Voucher</text>
<text x="240" y="580">Voucher</text>
<text x="40" y="628">(2)</text>
<text x="88" y="628">provide</text>
<text x="136" y="628">PER</text>
<text x="160" y="628">t</text>
<text x="236" y="628">infrastructure</text>
<text x="240" y="644">PER</text>
<text x="368" y="660">CSR</text>
<text x="372" y="676">Cert</text>
<text x="240" y="692">Enroll-Resp</text>
<text x="44" y="724">2)</text>
<text x="80" y="724">query</text>
<text x="136" y="724">cACerts</text>
<text x="188" y="724">from</text>
<text x="268" y="724">infrastructure</text>
<text x="180" y="740">--</text>
<text x="236" y="740">cACert-Req</text>
<text x="256" y="756">cACert-Resp--</text>
<text x="32" y="772">~</text>
<text x="168" y="772">~</text>
<text x="312" y="772">~</text>
<text x="432" y="772">~</text>
<text x="536" y="772">~</text>
<text x="40" y="804">(3)</text>
<text x="88" y="804">provide</text>
<text x="152" y="804">voucher</text>
<text x="200" y="804">and</text>
<text x="264" y="804">certificate</text>
<text x="328" y="804">and</text>
<text x="376" y="804">collect</text>
<text x="436" y="804">status</text>
<text x="484" y="804">info</text>
<text x="76" y="820">opt.</text>
<text x="112" y="820">TLS</text>
<text x="104" y="836">Voucher</text>
<text x="104" y="852">vStatus</text>
<text x="104" y="868">cACerts</text>
<text x="112" y="884">Enroll-Resp--</text>
<text x="96" y="900">eStatus</text>
<text x="32" y="916">~</text>
<text x="168" y="916">~</text>
<text x="312" y="916">~</text>
<text x="432" y="916">~</text>
<text x="536" y="916">~</text>
<text x="40" y="948">(4)</text>
<text x="88" y="948">provide</text>
<text x="152" y="948">voucher</text>
<text x="212" y="948">status</text>
<text x="256" y="948">and</text>
<text x="300" y="948">enroll</text>
<text x="356" y="948">status</text>
<text x="396" y="948">to</text>
<text x="448" y="948">registrar</text>
<text x="248" y="964">TLS</text>
<text x="248" y="980">vStatus</text>
<text x="360" y="996">req</text>
<text x="404" y="996">device</text>
<text x="456" y="996">audit</text>
<text x="496" y="996">log</text>
<text x="388" y="1012">device</text>
<text x="440" y="1012">audit</text>
<text x="480" y="1012">log</text>
<text x="288" y="1028">[verify</text>
<text x="344" y="1028">audit</text>
<text x="388" y="1028">log]</text>
<text x="240" y="1060">eStatus</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+   +-----------+   +-----------+    +--------+  +---------+
| Pledge |   | Registrar |   | Domain    |    | Domain |  | Vendor  |
|        |   | Agent     |   | Registrar |    | CA     |  | Service |
|        |   | (RegAgt)  |   |  (JRC)    |    |        |  | (MASA)  |
+--------+   +-----------+   +-----------+    +--------+  +---------+
   |                |                 |              |   Internet |
   |   discover     |                 |              |            |
   |    pledge      |                 |              |            |
   | mDNS query     |                 |              |            |
   |<---------------|                 |              |            |
   |--------------->|                 |              |            |
   |                |                 |              |            |

   (1) trigger PVR (tPVR) and PER (tPER) generation on pledge
   |<--opt. TLS --->|                 |              |            |
   |<----- tPVR ----|                 |              |            |
   |------ PVR ---->|                 |              |            |
   |                |                 |              |            |
   |<----- tPER ----|                 |              |            |
   |------ PER ---->|                 |              |            |
   ~                ~                 ~              ~            ~

   (2) provide PVR to infrastructure
   |                |<----- TLS ----->|              |            |
   |                |         [Reg-Agt authenticated |            |
   |                |          and authorized?]      |            |
   |                |----- PVR ------>|              |            |
   |                |         [Reg-Agt authorized?]  |            |
   |                |         [accept device?]       |            |
   |                |         [contact vendor]       |            |
   |                |                 |------------ RVR --------->|
   |                |                 |           [extract DomainID]
   |                |                 |           [update audit log]
   |                |                 |<--------- Voucher --------|
   |                |<--- Voucher ----|              |            |
   |                |                 |              |            |

   (2) provide PER to infrastructure
   |                |------ PER ----->|              |            |
   |                |                 |---- CSR ---->|            |
   |                |                 |<--- Cert ----|            |
   |                |<--Enroll-Resp---|              |            |
   |                |                 |              |            |
   (2) query cACerts from infrastructure
   |                |-- cACert-Req -->|              |            |
   |                |<-- cACert-Resp--|              |            |
   ~                ~                 ~              ~            ~

   (3) provide voucher and certificate and collect status info
   |<--opt. TLS --->|                 |              |            |
   |<--- Voucher ---|                 |              |            |
   |---- vStatus -->|                 |              |            |
   |<--- cACerts ---|                 |              |            |
   |<--Enroll-Resp--|                 |              |            |
   |--- eStatus --->|                 |              |            |
   ~                ~                 ~              ~            ~

   (4) provide voucher status and enroll status to registrar
   |                |<------ TLS ---->|              |            |
   |                |----  vStatus -->|              |            |
   |                |                 |--- req device audit log-->|
   |                |                 |<---- device audit log ----|
   |                |           [verify audit log]
   |                |                 |              |            |
   |                |---- eStatus --->|              |            |
   |                |                 |              |            |
]]></artwork></artset></figure>

<t>The following sub sections split the interactions shown in <xref target="exchangesfig_uc2_all"/> between the different components into:</t>

<t><list style="numbers">
  <t><xref target="exchanges_uc2_1"/> describes the request object acquisition by the registrar-agent from pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes the request object processing initiated by the registrar-agent to the registrar and also the interaction of the registrar with the MASA and the domain CA including the response object processing by these entities.</t>
  <t><xref target="exchanges_uc2_3"/> describes the supply of response objects between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_5"/> describes the general status handling and addresses corresponding exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent has already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> and <xref target="exchangesfig_uc2_all"/> based on DNS-SD or similar.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent:
  <list style="symbols">
      <t><bcp14>MAY</bcp14> handle/trusts pledge's IDevID CA certificate to validate IDevID certificate on returned PVR or in case of TLS usage for pledge communication.
The distribution of IDevID CA certificates to the registrar-agent is out of scope of this document and may be done by a manual configuration.</t>
      <t>possesses own credentials (EE (RegAgt) certificate and corresponding private key) for the registrar domain.
In addition, the registrar-agent <bcp14>SHOULD</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped.
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number(s) in different ways:
      <list style="symbols">
          <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
          <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
          <t>discovered by using a vendor specific approach, e.g., RF beacons.
If the serial numbers are not known in advance, the registrar-agent cannot perform a distinct triggering of pledges but and triggers  all pledges discovered .</t>
        </list></t>
    </list>
The registrar-agent <bcp14>SHOULD</bcp14> have synchronized time.</t>
  <t>Registrar (same as in BRSKI): possesses/trusts IDevID CA certificate and has own registrar EE credentials.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="352" width="520" viewBox="0 0 520 352" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 320,32 L 320,96" fill="none" stroke="black"/>
<path d="M 368,104 L 368,336" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 320,32 L 416,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 320,96 L 416,96" fill="none" stroke="black"/>
<path d="M 48,144 L 64,144" fill="none" stroke="black"/>
<path d="M 48,176 L 72,176" fill="none" stroke="black"/>
<path d="M 336,176 L 360,176" fill="none" stroke="black"/>
<path d="M 48,240 L 80,240" fill="none" stroke="black"/>
<path d="M 280,240 L 360,240" fill="none" stroke="black"/>
<path d="M 48,272 L 88,272" fill="none" stroke="black"/>
<path d="M 320,272 L 360,272" fill="none" stroke="black"/>
<path d="M 48,320 L 88,320" fill="none" stroke="black"/>
<path d="M 312,320 L 360,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="368,320 356,314.4 356,325.6" fill="black" transform="rotate(0,360,320)"/>
<polygon class="arrowhead" points="368,240 356,234.4 356,245.6" fill="black" transform="rotate(0,360,240)"/>
<polygon class="arrowhead" points="56,272 44,266.4 44,277.6" fill="black" transform="rotate(180,48,272)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<polygon class="arrowhead" points="56,144 44,138.4 44,149.6" fill="black" transform="rotate(180,48,144)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="368" y="52">Registrar</text>
<text x="352" y="68">Agent</text>
<text x="364" y="84">(RegAgt)</text>
<text x="400" y="116">-create</text>
<text x="448" y="132">agent-signed-data</text>
<text x="108" y="148">optional</text>
<text x="184" y="148">establish</text>
<text x="240" y="148">TLS</text>
<text x="300" y="148">connection</text>
<text x="356" y="148">--</text>
<text x="112" y="180">trigger</text>
<text x="172" y="180">pledge</text>
<text x="264" y="180">voucher-request</text>
<text x="204" y="196">-agent-provided-proximity-registrar-cert</text>
<text x="116" y="212">-agent-signed-data</text>
<text x="116" y="244">pledge</text>
<text x="208" y="244">voucher-request</text>
<text x="396" y="244">-store</text>
<text x="440" y="244">PVR</text>
<text x="128" y="276">trigger</text>
<text x="236" y="276">enrollment-request</text>
<text x="128" y="292">(empty)</text>
<text x="124" y="324">pledge</text>
<text x="228" y="324">enrollment-request</text>
<text x="396" y="324">-store</text>
<text x="448" y="324">(PER)</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<-- optional establish TLS connection --|
    |                                        |
    |<--- trigger pledge voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |                                        |
    |----- pledge voucher-request ---------->|-store PVR
    |                                        |
    |<----- trigger enrollment-request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge enrollment-request ------>|-store (PER)
    |                                        |
]]></artwork></artset></figure>

<t>TLS <bcp14>MAY</bcp14> be optionally used to provide privacy for the interaction between the registrar-agent and the pledge, see <xref target="pledgehttps"/>.</t>

<t>Note: The registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow, visiting and installing each pledge.</t>

<section anchor="pvrt"><name>Pledge-Voucher-Request (PVR) - Trigger</name>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tpvr"</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
Following parameters are provided in the JSON object:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded registrar EE TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JSON-in-JWS object.</t>
</list></t>

<t>The trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Note that at the time of receiving the PVR trigger, the pledge cannot verify the registrar LDevID certificate and has no proof-of-possession of the corresponding private key for the certificate. The pledge therefore accepts the registrar LDevID certificate provisionally until it receives the voucher as described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge will also be unable to verify the agent-signed-data itself as it does not possess the EE (RegAgt) certificate and the domain trust has not been established at this point of the communication.
Verification <bcp14>SHOULD</bcp14> be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JSON-in-JWS object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value) of the EE (RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an "ietf-voucher-request:agent-signed-data" element (defined in <xref target="I-D.ietf-anima-rfc8366bis"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in General JWS Serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload representation in JSON syntax of
  "ietf-voucher-request-prm:agent-signed-data"

"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

</section>
<section anchor="pvrr"><name>Pledge-Voucher-Request (PVR) - Response</name>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>.
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error responses <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or if the request is not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/> to support JWS signing of the object:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity" (different value as in RFC 8995)..</t>
</list></t>

<t>The ietf-voucher-request:voucher is extended with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded registrar LDevID certificate (provided as PVR trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as a PVR trigger parameter by the registrar-agent.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leaves are defined in <xref target="I-D.ietf-anima-rfc8366bis"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded Payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
    "alg": "ES256",
    "x5c": [
      "base64encodedvalue==",
      "base64encodedvalue=="
    ],
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Media-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>MUST</bcp14> include this Media-Type header field indicating the included media type for the PVR.
The PVR is included by the registrar in its RCR as described in <xref target="exchanges_uc2_2"/>.</t>

</section>
<section anchor="pledge-enrollment-request-per-trigger"><name>Pledge-Enrollment-Request (PER) - Trigger</name>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint: "/.well-known/brski/tper"</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type "enroll-generic-cert" or "re-enroll-generic-cert".
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>This document specifies the request of a generic certificate with no CSR attributes provided to the pledge.
If specific attributes in the certificate are required, they have to be inserted by the issuing RA/CA.
How the HTTP POST can be used to provide CSR attributes is out of scope for this specification.</t>

</section>
<section anchor="PER-response"><name>Pledge-Enrollment-Request (PER) - Response</name>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the PER  trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures POP of the private key corresponding to the contained public key.
In addition, based on the PER signature using the IDevID, POI is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the pledge enrollment-request (PER) as plain PKCS#10.
Note, the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP.
If the pledge has already implemented an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note, <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats used by CMP or CMC.</t>

<t>The pledge <bcp14>MUST</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credentials to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for operation.
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format.
Note that the wrapping of the PER signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a signature-wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It <bcp14>MAY</bcp14> optionally contain the certificate chain for this certificate. If the certificate chain is not included it <bcp14>MUST</bcp14> be available at the registrar for verification of the IDevID certificate.
The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<t>While BRSKI-PRM targets the initial enrollment, re-enrollment <bcp14>SHOULD</bcp14> be supported as described in a similar way as for enrollment in this document, if no other re-enrollment mechanism is supported.
Note that in this case the current LDevID credential is used instead of the IDevID credential to create the signature of the PKCS#10 request.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded Payload "ietf-ztp-types" Representation
  in JSON Syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" Representation
  in JSON Syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "crit":["created-on"],
  "created-on": "2022-09-13T00:00:02.000Z"
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER.
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.
The registrar <bcp14>MAY</bcp14> consider to ignore any but the newest PER from the same pledge in the case the registrar has at any point in time more than one pending PER from the pledge.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible.
This allows bulk bootstrapping of several pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
</section>
<section anchor="exchanges_uc2_2"><name>Request Object Handling initiated by the Registrar-Agent on Registrar, MASA and Domain CA</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses its own credentials (EE (RegAgt) certificate and corresponding private key) of the domain.
In addition, it <bcp14>MAY</bcp14> possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or more PVR and PER objects.</t>
  <t>Registrar (same as in BRSKI): possesses the IDevID CA certificate of the pledge vendor/manufacturer and its own registrar EE credentials of the domain.</t>
  <t>MASA (same as in BRSKI): possesses its own vendor/manufacturer credentials (voucher signing key and certificate, TLS server certificate and private key) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate.</t>
</list></t>

<figure title="Request processing between registrar-agent and bootstrapping services" anchor="exchangesfig_uc2_2"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="624" width="504" viewBox="0 0 504 624" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,144 L 40,608" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 152,32 L 152,96" fill="none" stroke="black"/>
<path d="M 200,104 L 200,176" fill="none" stroke="black"/>
<path d="M 200,224 L 200,256" fill="none" stroke="black"/>
<path d="M 200,320 L 200,608" fill="none" stroke="black"/>
<path d="M 248,32 L 248,96" fill="none" stroke="black"/>
<path d="M 312,32 L 312,96" fill="none" stroke="black"/>
<path d="M 352,104 L 352,288" fill="none" stroke="black"/>
<path d="M 352,416 L 352,608" fill="none" stroke="black"/>
<path d="M 384,32 L 384,96" fill="none" stroke="black"/>
<path d="M 416,32 L 416,96" fill="none" stroke="black"/>
<path d="M 456,104 L 456,352" fill="none" stroke="black"/>
<path d="M 456,400 L 456,608" fill="none" stroke="black"/>
<path d="M 496,32 L 496,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 152,32 L 248,32" fill="none" stroke="black"/>
<path d="M 312,32 L 384,32" fill="none" stroke="black"/>
<path d="M 416,32 L 496,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 152,96 L 248,96" fill="none" stroke="black"/>
<path d="M 312,96 L 384,96" fill="none" stroke="black"/>
<path d="M 416,96 L 496,96" fill="none" stroke="black"/>
<path d="M 48,176 L 88,176" fill="none" stroke="black"/>
<path d="M 144,176 L 192,176" fill="none" stroke="black"/>
<path d="M 48,240 L 64,240" fill="none" stroke="black"/>
<path d="M 176,240 L 192,240" fill="none" stroke="black"/>
<path d="M 208,320 L 304,320" fill="none" stroke="black"/>
<path d="M 360,320 L 448,320" fill="none" stroke="black"/>
<path d="M 208,336 L 272,336" fill="none" stroke="black"/>
<path d="M 384,336 L 448,336" fill="none" stroke="black"/>
<path d="M 208,400 L 288,400" fill="none" stroke="black"/>
<path d="M 368,400 L 448,400" fill="none" stroke="black"/>
<path d="M 48,416 L 80,416" fill="none" stroke="black"/>
<path d="M 160,416 L 192,416" fill="none" stroke="black"/>
<path d="M 48,448 L 64,448" fill="none" stroke="black"/>
<path d="M 168,448 L 192,448" fill="none" stroke="black"/>
<path d="M 208,480 L 248,480" fill="none" stroke="black"/>
<path d="M 304,480 L 344,480" fill="none" stroke="black"/>
<path d="M 208,496 L 224,496" fill="none" stroke="black"/>
<path d="M 328,496 L 344,496" fill="none" stroke="black"/>
<path d="M 208,528 L 224,528" fill="none" stroke="black"/>
<path d="M 328,528 L 344,528" fill="none" stroke="black"/>
<path d="M 48,544 L 64,544" fill="none" stroke="black"/>
<path d="M 176,544 L 192,544" fill="none" stroke="black"/>
<path d="M 48,576 L 64,576" fill="none" stroke="black"/>
<path d="M 176,576 L 192,576" fill="none" stroke="black"/>
<path d="M 48,592 L 64,592" fill="none" stroke="black"/>
<path d="M 176,592 L 192,592" fill="none" stroke="black"/>
<polygon class="arrowhead" points="456,336 444,330.4 444,341.6" fill="black" transform="rotate(0,448,336)"/>
<polygon class="arrowhead" points="456,320 444,314.4 444,325.6" fill="black" transform="rotate(0,448,320)"/>
<polygon class="arrowhead" points="352,496 340,490.4 340,501.6" fill="black" transform="rotate(0,344,496)"/>
<polygon class="arrowhead" points="352,480 340,474.4 340,485.6" fill="black" transform="rotate(0,344,480)"/>
<polygon class="arrowhead" points="216,528 204,522.4 204,533.6" fill="black" transform="rotate(180,208,528)"/>
<polygon class="arrowhead" points="216,480 204,474.4 204,485.6" fill="black" transform="rotate(180,208,480)"/>
<polygon class="arrowhead" points="216,400 204,394.4 204,405.6" fill="black" transform="rotate(180,208,400)"/>
<polygon class="arrowhead" points="200,576 188,570.4 188,581.6" fill="black" transform="rotate(0,192,576)"/>
<polygon class="arrowhead" points="200,448 188,442.4 188,453.6" fill="black" transform="rotate(0,192,448)"/>
<polygon class="arrowhead" points="200,240 188,234.4 188,245.6" fill="black" transform="rotate(0,192,240)"/>
<polygon class="arrowhead" points="200,176 188,170.4 188,181.6" fill="black" transform="rotate(0,192,176)"/>
<polygon class="arrowhead" points="56,592 44,586.4 44,597.6" fill="black" transform="rotate(180,48,592)"/>
<polygon class="arrowhead" points="56,544 44,538.4 44,549.6" fill="black" transform="rotate(180,48,544)"/>
<polygon class="arrowhead" points="56,416 44,410.4 44,421.6" fill="black" transform="rotate(180,48,416)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="60" y="52">Registrar-</text>
<text x="188" y="52">Domain</text>
<text x="348" y="52">Domain</text>
<text x="452" y="52">Vendor</text>
<text x="40" y="68">agent</text>
<text x="200" y="68">Registrar</text>
<text x="332" y="68">CA</text>
<text x="456" y="68">Service</text>
<text x="52" y="84">(RegAgt)</text>
<text x="192" y="84">(JRC)</text>
<text x="452" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="412" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="136" y="132">enrollment]</text>
<text x="20" y="148">[PVR</text>
<text x="64" y="148">PER</text>
<text x="120" y="148">available</text>
<text x="168" y="148">]</text>
<text x="116" y="180">mTLS</text>
<text x="164" y="196">[Reg-Agt</text>
<text x="256" y="196">authenticated</text>
<text x="152" y="212">and</text>
<text x="220" y="212">authorized?]</text>
<text x="120" y="244">Voucher-Req</text>
<text x="120" y="260">(PVR)</text>
<text x="164" y="276">[Reg-Agt</text>
<text x="252" y="276">authorized?]</text>
<text x="160" y="292">[accept</text>
<text x="228" y="292">device?]</text>
<text x="164" y="308">[contact</text>
<text x="232" y="308">vendor]</text>
<text x="332" y="324">mTLS</text>
<text x="328" y="340">Voucher-Req</text>
<text x="328" y="356">(RVR)</text>
<text x="388" y="372">[extract</text>
<text x="464" y="372">DomainID]</text>
<text x="384" y="388">[update</text>
<text x="440" y="388">audit</text>
<text x="484" y="388">log]</text>
<text x="328" y="404">Voucher</text>
<text x="120" y="420">Voucher</text>
<text x="116" y="452">Enroll-Req</text>
<text x="112" y="468">(PER)</text>
<text x="276" y="484">mTLS</text>
<text x="276" y="500">Enroll-Req</text>
<text x="264" y="516">(RER)</text>
<text x="280" y="532">Enroll-Resp</text>
<text x="120" y="548">Enroll-Resp</text>
<text x="120" y="580">caCerts-Req</text>
<text x="120" y="596">caCerts-Res</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+     +-----------+       +--------+   +---------+
| Registrar-|     | Domain    |       | Domain |   | Vendor  |
| agent     |     | Registrar |       | CA     |   | Service |
| (RegAgt)  |     |  (JRC)    |       |        |   | (MASA)  |
+-----------+     +-----------+       +--------+   +---------+
    |                   |                  |   Internet |
[voucher + enrollment]  |                  |            |
[PVR, PER available ]   |                  |            |
    |                   |                  |            |
    |<----- mTLS ------>|                  |            |
    |           [Reg-Agt authenticated     |            |
    |            and authorized?]          |            |
    |                   |                  |            |
    |--- Voucher-Req -->|                  |            |
    |       (PVR)       |                  |            |
    |           [Reg-Agt authorized?]      |            |
    |           [accept device?]           |            |
    |           [contact vendor]                        |
    |                   |------------- mTLS ----------->|
    |                   |--------- Voucher-Req -------->|
    |                   |             (RVR)             |
    |                   |                   [extract DomainID]
    |                   |                   [update audit log]
    |                   |<---------- Voucher -----------|
    |<---- Voucher -----|                  |            |
    |                   |                  |            |
    |--- Enroll-Req --->|                  |            |
    |      (PER)        |                  |            |
    |                   |<----- mTLS ----->|            |
    |                   |--- Enroll-Req -->|            |
    |                   |     (RER)        |            |
    |                   |<-- Enroll-Resp---|            |
    |<-- Enroll-Resp ---|                  |            |
    |                   |                  |            |
    |--- caCerts-Req -->|                  |            |
    |<-- caCerts-Res ---|                  |            |
    |                   |                  |            |
]]></artwork></artset></figure>

<t>The registrar-agent establishes a TLS connection to the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<section anchor="connection-establishment-registrar-agent-to-registrar"><name>Connection Establishment (Registrar-Agent to Registrar)</name>

<t>In contrast to BRSKI <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent EE credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar.
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar based on the TLS client authentication.
If the connection from registrar-agent to registrar is established, the authorization <bcp14>SHOULD</bcp14> be verified again based on agent-signed-data contained in the PVR.
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>With BRSKI-PRM, the pledge generates PVR and PER as JSON-in-JWS objects and the registrar agent forwards them to the registrar.
In <xref target="RFC8995"/>, the pledge generates PVR as CMS-signed JSON and PER as PKCS#10 or PKCS#7 according to <xref target="RFC7030"/> and inherited by <xref target="RFC8995"/>.</t>

<t>For BRSKI-PRM, the registrar agent sends the PVR by HTTP POST to the same registrar endpoint as introduced by BRSKI: "/.well-
known/brski/requestvoucher", but with a Content-Type header field for JSON-in-JWS"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent sets the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field is set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

</section>
<section anchor="pvr-proc-reg"><name>Pledge-Voucher-Request (PVR) Processing by Registrar</name>

<t>After receiving the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar <bcp14>SHALL</bcp14> verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own registrar LDevID certificate to ensure the registrar in proximity of the registrar-agent is the desired registrar for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the private key corresponding to the EE (RegAgt) certificate indicated in the "kid" JOSE header parameter.
The registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, corresponding to the signature, is still valid.
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>.
The registrar <bcp14>MUST</bcp14> fetch the EE (RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the "kid" header parameter of the agent-signed-data, and perform this verification.
This requires, that the registrar has access to the EE (RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.
Note, the registrar may have stored the EE (RegAgt) certificate if used during TLS establishment between registrar-agent and registrar or it may be provided via a repository.</t>
</list></t>

<t>If the registrar is unable to validate the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx error code to the registrar-agent.</t>

<t>The following 4xx client error codes <bcp14>SHOULD</bcp14> be used:</t>

<t><list style="symbols">
  <t>403 Forbidden: if the registrar detected that one or more security related parameters are not valid.</t>
  <t>404 Not Found status code if the pledge provided information could not be used with automated allowance, as described in section 5.3 of <xref target="RFC8995"/>.</t>
  <t>406 Not Acceptable: if the Content-Type indicated by the Accept header is unknown or unsupported.</t>
</list></t>

<t>If the validation succeeds, the registrar performs pledge authorization according to <xref target="RFC8995"/>, Section 5.3 followed by obtaining a voucher from the pledge's MASA according to <xref target="RFC8995"/>, Section 5.4 with the modifications described below in <xref target="rvr-proc"/>.</t>

</section>
<section anchor="rvr-proc"><name>Registrar-Voucher-Request (RVR) Processing (Registrar to MASA)</name>

<t>If the MASA address/URI is learned from the <xref target="RFC8995"/> Section 2.3 IDevID MASA URI extension, then the MASA on that URI <bcp14>MUST</bcp14> support the procedures defined in this document if the PVR used JSON-JWS encoding.
If the MASA is only configured on the registrar, then a registrar supporting BRKSI-PRM and other voucher encoding formats (such as those in <xref target="RFC8995"/>) <bcp14>SHOULD</bcp14> support per-message-format MASA address/URI configuration for the same IDevID trust anchor."</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>, Section 5.5.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined for JWS <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature</t>
  <t>x5c: base64-encoded registrar LDevID certificate(s)
(It optionally contains the certificate chain for this certificate)</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher-request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: current date and time in yang:date-and-time format of RVR creation</t>
  <t>nonce: copied from the PVR</t>
  <t>serial-number: product-serial-number of pledge.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: PVR as received from registrar-agent, see <xref target="pvrr"/></t>
</list></t>

<t>The RVR <bcp14>MUST</bcp14> be extended with the following parameter, when the assertion "agent-proximity" is requested, as defined in <xref target="I-D.ietf-anima-rfc8366bis"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: EE (RegAgt) certificate or the EE (RegAgt) certificate including certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.
If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded EE (RegAgt) certificate.</t>
</list></t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity".</t>

<t>The object is signed using the registrar LDevID credentials, which corresponds to the certificate referenced in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "ietf-voucher-request-prm:voucher"
  representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>This document uses the JSON-in-JWS format throughout the definition of exchanges and in the examples.
Nevertheless, alternative encodings of the voucher as used in BRSKI <xref target="RFC8995"/> with JSON-in-CMS or CBOR-in-COSE_Sign <xref target="RFC8152"/> for constraint environments are possible as well.
The assumption is that a pledge typically supports a single encoding variant and creates the PVR in the supported format.
To ensure that the pledge is able to process the voucher, the registrar <bcp14>MUST</bcp14> use the media type for Accept header in the RVR based on the media type used for the PVR.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in Section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the registrar LDevID certificate.
If so, it <bcp14>MUST</bcp14> correspond to the registrar LDevID credentials used to sign the RVR.
Note: Correspond here relates to the case that a single registrar LDevID certificate is used or that different registrar LDevID certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this data to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The EE (RegAgt) certificate to be used for signature verification is identified by the "kid" parameter of the JOSE header.
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding EE (RegAgt) certificate data in the "agent-sign-cert" field of the RVR.
It <bcp14>MUST</bcp14> be verified by the MASA to the same domain CA as the registrar LDevID certificate.
If the "agent-sign-cert" field is not set, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified".
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the EE (RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA.
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in Section 5.6 of <xref target="RFC8995"/> and comprise the codes: 403, 404, 406, and 415.</t>

</section>
<section anchor="exchanges_uc2_2_vc"><name>Voucher Issuance by MASA</name>

<t>The MASA creates a voucher with Media-Type of <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the MASA detects that the Accept header of the PVR does not match <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code "406 Not Acceptable" as the pledge will not be able to parse the response.
The voucher is according to <xref target="I-D.ietf-anima-rfc8366bis"/> but uses the new assertion value specified <xref target="agt_prx"/>.</t>

<t><xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation
  in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The pinned-domain certificate to be put into the voucher is determined by the MASA as described in section 5.5 of <xref target="RFC8995"/>.
The MASA returns the voucher-response (voucher) to the registrar.</t>

</section>
<section anchor="exchanges_uc2_2_vs"><name>MASA issued Voucher Processing by Registrar</name>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in Section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher using its registrar EE credentials.</t>

<t>The signature is created by signing the original "JWS Payload" produced by MASA and the registrar added "JWS Protected Header" using the registrar EE credentials (see <xref target="RFC7515"/>, Section 5.2 point 8.
The x5c component of the "JWS Protected Header" <bcp14>MUST</bcp14> contain the registrar EE certificate as well as potential subordinate CA certificates up to (but not including) the pinned domain certificate.
The pinned domain certificate is already contained in the voucher payload ("pinned-domain-cert").</t>

<t>(For many installations, with a single registrar credential, the registrar credential is what is pinned)</t>

<t>In <xref target="RFC8995"/>, the Registrar proved possession of the it's credential when the TLS session was setup.
While the pledge could not, at the time, validate the certificate truly belonged the registrar, it did validate that the certificate it was provided was able to authenticate the TLS connection.</t>

<t>In the BRSKI-PRM mode, with the Registrar agent mediating all communication, the Pledge has not as yet been able to witness that the intended Registrar really does possess the relevant private key.
This second signature provides for the same level of assurance to the pledge, and that it matches the public key that the pledge received in the trigger for the PVR (see <xref target="pavrt"/>).</t>

<t>The registrar <bcp14>MUST</bcp14> use the same registrar EE credentials used for authentication in the TLS handshake to authenticate towards the registrar-agent.
This has some operational implications when the registrar may be part of a scalable framework as described in <xref section="1.3.1" sectionFormat="comma" target="I-D.richardson-anima-registrar-considerations"/>.</t>

<t>The second signature <bcp14>MUST</bcp14> either be done with the private key associated with the registrar EE certificate provided to the Registrar-Agent, or the use of a certificate chain is necessary.
This ensures that the same registrar EE certificate can be used to verify the signature as transmitted in the voucher-request as also transferred in the PVR in the "agent-provided-proximity-registrar-cert".</t>

<t><xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in
  General JWS Serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": BASE64URL(JWS Signature)
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "ietf-voucher:voucher" representation in
  JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Example: Decoded "JWS Protected Header (MASA)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "voucher-jws+json"
}

# Example: Decoded "JWS Protected Header (Reg)" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge as explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

</section>
<section anchor="exchanges_uc2_2_per"><name>Pledge-Enrollment-Request (PER) Processing (Registrar-Agent to Registrar)</name>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar in the same HTTP-over-TLS connection. Which is similar to the PER processing described in Section 5.2 of <xref target="RFC8995"/>.
In case the PER cannot be send in the same HTTP-over-TLS connection the registrar-agent may send the PER in a new HTTP-over-TLS connection. The registrar is able to correlate the PVR and the PER based on the signatures and the contained product-serial-number information.
Note, this also addresses situations in which a nonceless voucher is used and may be pre-provisioned to the pledge.
As specified in <xref target="PER-response"/> deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t>EST <xref target="RFC7030"/> standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM.
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM.
As EST requires to sent a raw PKCS#10 request to e.g., "/.well-known/est/simpleenroll" endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request.
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the EE (RegAgt) certificate for TLS and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment-request with the corresponding domain CA.
It creates a registrar enrollment-request (RER) by utilizing the protocol expected by the domain CA.
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate.
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>Note while BRSKI-PRM targets the initial enrollment, re-enrollment may be supported in a similar way with the exception that the current LDevID certificate is used instead of the IDevID certificate to verify the wrapping signature of the PKCS#10 request (see also <xref target="PER-response"/>).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

</section>
<section anchor="exchanges_uc2_2_wca"><name>Request Wrapped-CA-certificate(s) (Registrar-Agent to Registrar)</name>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates.
This is done in EST <xref target="RFC7030"/> using the "/.well-known/est/cacerts" endpoint, which provides the CA certificates over a TLS protected connection.
BRSKI-PRM requires a signature wrapped CA certificate object, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way.
The registrar signed CA certificate object will allow the pledge to verify the authorization to install the received CA certificate(s).
As the CA certificate(s) are provided to the pledge after the voucher, the pledge has the required information (the domain certificate) to verify the wrapped CA certificate object.</t>

<t>To support registrar-agents requesting a signature wrapped CA certificate(s) object, a new endpoint for BRSKI-PRM is defined on the registrar: "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) by HTTP GET.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in EST <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is to sign the CA certificate(s) information using the registrar LDevID credentials.
This results in a signed CA certificate(s) object (JSON-in-JWS), the CA certificates are provided as base64 encoded "x5bag" (see definition in <xref target="RFC9360"/>) in the JWS payload.</t>

<figure title="Representation of CA certificate(s) data with registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with registrar signature in General JWS Serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "certs" representation in JSON syntax
{
  "x5bag": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}


# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
</section>
<section anchor="exchanges_uc2_3"><name>Response Objects supplied by the Registrar-Agent to the Pledge</name>

<t>It is assumed that the registrar-agent already obtained the bootstrapping response objects from the domain registrar and can supply them to the pledge:</t>

<t><list style="symbols">
  <t>voucher-response - Voucher (from MASA via Registrar)</t>
  <t>wrapped-CA-certificate(s)-response - CA certificates</t>
  <t>enrollment-response - LDevID (Pledge) certificate (from CA via registrar)</t>
</list></t>

<t>To deliver these response objects, the registrar-agent will re-connect to the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher and LDevID certificate and optionally IDevID CA certificates.
The IDevID CA certificate is necessary, when the connection between the Registrar-agent and the pledge is established using TLS to enable the registrar-agent to validate the pledges' IDevID certificate during the TLS handshake as described in <xref target="exchanges_uc2_1"/>.</t>
</list></t>

<figure title="Responses and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="368" width="528" viewBox="0 0 528 368" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,336" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 280,32 L 280,96" fill="none" stroke="black"/>
<path d="M 328,144 L 328,336" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 280,32 L 376,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 280,96 L 376,96" fill="none" stroke="black"/>
<path d="M 48,160 L 88,160" fill="none" stroke="black"/>
<path d="M 296,160 L 320,160" fill="none" stroke="black"/>
<path d="M 48,192 L 104,192" fill="none" stroke="black"/>
<path d="M 240,192 L 320,192" fill="none" stroke="black"/>
<path d="M 48,224 L 112,224" fill="none" stroke="black"/>
<path d="M 248,224 L 320,224" fill="none" stroke="black"/>
<path d="M 48,256 L 72,256" fill="none" stroke="black"/>
<path d="M 296,256 L 320,256" fill="none" stroke="black"/>
<path d="M 48,288 L 72,288" fill="none" stroke="black"/>
<path d="M 304,288 L 320,288" fill="none" stroke="black"/>
<path d="M 48,320 L 112,320" fill="none" stroke="black"/>
<path d="M 240,320 L 320,320" fill="none" stroke="black"/>
<polygon class="arrowhead" points="328,320 316,314.4 316,325.6" fill="black" transform="rotate(0,320,320)"/>
<polygon class="arrowhead" points="328,224 316,218.4 316,229.6" fill="black" transform="rotate(0,320,224)"/>
<polygon class="arrowhead" points="56,288 44,282.4 44,293.6" fill="black" transform="rotate(180,48,288)"/>
<polygon class="arrowhead" points="56,256 44,250.4 44,261.6" fill="black" transform="rotate(180,48,256)"/>
<polygon class="arrowhead" points="56,192 44,186.4 44,197.6" fill="black" transform="rotate(180,48,192)"/>
<polygon class="arrowhead" points="56,160 44,154.4 44,165.6" fill="black" transform="rotate(180,48,160)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="332" y="52">Registrar-</text>
<text x="312" y="68">Agent</text>
<text x="324" y="84">(RegAgt)</text>
<text x="284" y="116">[voucher</text>
<text x="336" y="116">and</text>
<text x="400" y="116">enrollment]</text>
<text x="292" y="132">[responses</text>
<text x="380" y="132">available]</text>
<text x="132" y="164">optional</text>
<text x="184" y="164">TLS</text>
<text x="244" y="164">connection</text>
<text x="140" y="196">supply</text>
<text x="200" y="196">voucher</text>
<text x="152" y="228">voucher</text>
<text x="212" y="228">status</text>
<text x="344" y="228">-</text>
<text x="376" y="228">store</text>
<text x="380" y="244">pledge</text>
<text x="440" y="244">voucher</text>
<text x="500" y="244">status</text>
<text x="108" y="260">supply</text>
<text x="168" y="260">CAcerts</text>
<text x="244" y="260">(optional)</text>
<text x="108" y="292">supply</text>
<text x="216" y="292">enrollment-response</text>
<text x="148" y="324">enroll</text>
<text x="204" y="324">status</text>
<text x="344" y="324">-</text>
<text x="376" y="324">store</text>
<text x="380" y="340">pledge</text>
<text x="436" y="340">enroll</text>
<text x="492" y="340">status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<----- optional TLS connection ----|
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<--- supply CAcerts (optional) ----|
    |                                   |
    |<--- supply enrollment-response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status

]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MAY</bcp14> optionally use TLS to protect the communication as outlined in <xref target="exchanges_uc2_1"/>.</t>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<section anchor="exchanges_uc2_3a"><name>Pledge: Voucher-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/svr".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example is given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufacture's pledge implementation.</t>

<t>To perform the validation of several signatures on the voucher object, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Verify MASA signature as described in Section 5.6.1 in <xref target="RFC8995"/>, against pre-installed manufacturer trust anchor (IDevID).</t>
  <t>Install trust anchor contained in the voucher ("pinned-domain-cert")  provisionally</t>
  <t>Validate the LDevID(Reg) certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert")</t>
  <t>Verify registrar signature of the voucher similar as described in Section 5.6.1 in <xref target="RFC8995"/>, but take the registrar certificate instead of the MASA certificate for the verification</t>
</list></t>

<t>Step3 and step 4 have been introduced in BRSKI-PRM to enable verification of LDevID(Reg) certificate and also the proof-of-possession of the corresponding private key by the registrar, which is done in BRSKI based on the established TLS channel.
If all steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the registrar LDevID certificate.</t>

<t>If an error occurs during the verification and validation of the voucher, this <bcp14>SHALL</bcp14> be reported in the reason field of the pledge voucher status.</t>

</section>
<section anchor="exchanges_uc2_3b"><name>Pledge: Voucher Status Telemetry</name>

<t>After voucher verification and validation the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.7 of <xref target="RFC8995"/>.
The pledge generates the voucher-status and provides it as signed JSON-in-JWS object in response to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS
  serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "pvs-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Failed to authenticate MASA certificate because
  it starts in the future (1/1/2023).",
  "reason-context": {
    "pvs-details": "Current date: 1/1/1970"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>If the pledge did not did not provide voucher status telemetry information after processing the voucher, the registrar agent <bcp14>MAY</bcp14> query the pledge status explicitly as described in <xref target="exchanges_uc2_5"/> and <bcp14>MAY</bcp14> re-sent the voucher depending on the Pledge status following the procedure described in <xref target="exchanges_uc2_3a"/>.</t>

</section>
<section anchor="exchanges_uc2_3c"><name>Pledge: Wrapped-CA-Certificate(s) Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/scac".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHOULD</bcp14> only be done, if the voucher-response has been successfully processed by pledge as reflected in the voucher status telemetry.</t>

<t>The CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the credential of the registrar as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded "x5bag".
The pledge <bcp14>SHALL</bcp14> install the received CA certificates as trust anchor after successful verification of the registrar's signature.</t>

<t>The verification comprises the following steps the pledge <bcp14>MUST</bcp14> perform. Maintaining the order of versification steps as indicated allows to determine, which verification has already been passed:</t>

<t><list style="numbers">
  <t>Check content-type of the CA certificates message. If no Content-Type is contained in the HTTP header, the default Content-Type utilized in this document (JSON-in-JWS) is used. If the Content-Type of the response is in an unknown or unsupported format, the pledge <bcp14>SHOULD</bcp14> reply with a 415 Unsupported media type error code.</t>
  <t>Check the encoding of the payload. If the pledge detects errors in the encoding of the payload, it <bcp14>SHOULD</bcp14> reply with 400 Bad Request error code.</t>
  <t>Verify that the wrapped CA certificate object is signed using the registrar certificate against the pinned-domain certificate. This <bcp14>MAY</bcp14> be done by comparing the hash that is indicating the certificate used to sign the message is that of the pinned-domain certificate. If the validation against the pinned domain-certificate fails, the client <bcp14>SHOULD</bcp14> reply with a 401 Unauthorized error code. It signals that the authentication has failed and therefore the object was not accepted.</t>
  <t>Verify signature of the the received wrapped CA certificate object. If the validation of the signature fails, the pledge <bcp14>SHOULD</bcp14> reply with a 406 Not Acceptable. It signals that the object has not been accepted.</t>
  <t>If the received CA certificates are not self-signed, i.e., an intermediate CA certificate, verify them against an already installed trust anchor, as described in section 4.1.3 of <xref target="RFC7030"></xref>.</t>
</list></t>

</section>
<section anchor="pledge-enrollment-response-processing"><name>Pledge: Enrollment-Response Processing</name>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/ser".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure is: <spanx style="verb">application/pkcs7-mime</spanx>.
Note: It only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate.
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response to the registrar-agent.
If the verification of the LDevID certificate succeeds, the status property <bcp14>SHALL</bcp14> be set to "status": true, otherwise to "status": false</t>

</section>
<section anchor="pledge-enrollment-status-telemetry"><name>Pledge: Enrollment-Status Telemetry</name>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in Section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll-status is signed and results in a JSON-in-JWS object.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using its new LDevID credentials as shown in <xref target="estat"/>.
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IDevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in General JWS Serialization
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "pledge-enroll-status" representation
  in JSON syntax for success case
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response successfully processed",
  "reason-context": {
    "pes-details": "JSON"
  }
}

# Example: Decoded payload "pledge-voucher-status" representation
  in JSON syntax for error case
{
  "version": 1,
  "status": false,
  "reason": "Enrollment response could not be verified.",
  "reason-context": {
    "pes-details": "no matching trust anchor"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar to provide it with the status responses.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry Voucher Status and Enroll Status Handling (Registrar-Agent to Domain Registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: obtained voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="320" width="496" viewBox="0 0 496 320" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,160 L 40,304" fill="none" stroke="black"/>
<path d="M 104,32 L 104,96" fill="none" stroke="black"/>
<path d="M 176,32 L 176,96" fill="none" stroke="black"/>
<path d="M 224,104 L 224,240" fill="none" stroke="black"/>
<path d="M 224,272 L 224,304" fill="none" stroke="black"/>
<path d="M 272,32 L 272,96" fill="none" stroke="black"/>
<path d="M 304,32 L 304,96" fill="none" stroke="black"/>
<path d="M 344,104 L 344,208" fill="none" stroke="black"/>
<path d="M 344,272 L 344,304" fill="none" stroke="black"/>
<path d="M 376,32 L 376,96" fill="none" stroke="black"/>
<path d="M 408,32 L 408,96" fill="none" stroke="black"/>
<path d="M 448,104 L 448,240" fill="none" stroke="black"/>
<path d="M 448,272 L 448,304" fill="none" stroke="black"/>
<path d="M 488,32 L 488,96" fill="none" stroke="black"/>
<path d="M 8,32 L 104,32" fill="none" stroke="black"/>
<path d="M 176,32 L 272,32" fill="none" stroke="black"/>
<path d="M 304,32 L 376,32" fill="none" stroke="black"/>
<path d="M 408,32 L 488,32" fill="none" stroke="black"/>
<path d="M 8,96 L 104,96" fill="none" stroke="black"/>
<path d="M 176,96 L 272,96" fill="none" stroke="black"/>
<path d="M 304,96 L 376,96" fill="none" stroke="black"/>
<path d="M 408,96 L 488,96" fill="none" stroke="black"/>
<path d="M 48,176 L 104,176" fill="none" stroke="black"/>
<path d="M 160,176 L 216,176" fill="none" stroke="black"/>
<path d="M 48,208 L 64,208" fill="none" stroke="black"/>
<path d="M 200,208 L 216,208" fill="none" stroke="black"/>
<path d="M 232,224 L 248,224" fill="none" stroke="black"/>
<path d="M 424,224 L 440,224" fill="none" stroke="black"/>
<path d="M 232,240 L 264,240" fill="none" stroke="black"/>
<path d="M 416,240 L 440,240" fill="none" stroke="black"/>
<path d="M 48,288 L 64,288" fill="none" stroke="black"/>
<path d="M 192,288 L 216,288" fill="none" stroke="black"/>
<polygon class="arrowhead" points="448,224 436,218.4 436,229.6" fill="black" transform="rotate(0,440,224)"/>
<polygon class="arrowhead" points="240,240 228,234.4 228,245.6" fill="black" transform="rotate(180,232,240)"/>
<polygon class="arrowhead" points="224,288 212,282.4 212,293.6" fill="black" transform="rotate(0,216,288)"/>
<polygon class="arrowhead" points="224,208 212,202.4 212,213.6" fill="black" transform="rotate(0,216,208)"/>
<polygon class="arrowhead" points="224,176 212,170.4 212,181.6" fill="black" transform="rotate(0,216,176)"/>
<polygon class="arrowhead" points="56,176 44,170.4 44,181.6" fill="black" transform="rotate(180,48,176)"/>
<g class="text">
<text x="56" y="52">Registrar</text>
<text x="212" y="52">Domain</text>
<text x="340" y="52">Domain</text>
<text x="444" y="52">Vendor</text>
<text x="40" y="68">Agent</text>
<text x="224" y="68">Registrar</text>
<text x="324" y="68">CA</text>
<text x="448" y="68">Service</text>
<text x="48" y="84">RegAgt)</text>
<text x="216" y="84">(JRC)</text>
<text x="444" y="84">(MASA)</text>
<text x="40" y="116">|</text>
<text x="404" y="116">Internet</text>
<text x="36" y="132">[voucher</text>
<text x="80" y="132">+</text>
<text x="116" y="132">enroll</text>
<text x="152" y="132">]</text>
<text x="32" y="148">[status</text>
<text x="84" y="148">info</text>
<text x="148" y="148">available]</text>
<text x="132" y="180">mTLS</text>
<text x="104" y="212">Voucher</text>
<text x="164" y="212">Status</text>
<text x="300" y="228">req-device</text>
<text x="368" y="228">audit</text>
<text x="408" y="228">log</text>
<text x="300" y="244">device</text>
<text x="352" y="244">audit</text>
<text x="392" y="244">log</text>
<text x="184" y="260">[verify</text>
<text x="240" y="260">audit</text>
<text x="280" y="260">log</text>
<text x="304" y="260">]</text>
<text x="100" y="292">Enroll</text>
<text x="156" y="292">Status</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+-----------+        +-----------+   +--------+   +---------+
| Registrar |        | Domain    |   | Domain |   | Vendor  |
| Agent     |        | Registrar |   | CA     |   | Service |
| RegAgt)   |        |  (JRC)    |   |        |   | (MASA)  |
+-----------+        +-----------+   +--------+   +---------+
    |                      |              |   Internet |
[voucher + enroll ]        |              |            |
[status info available]    |              |            |
    |                      |              |            |
    |<------- mTLS ------->|              |            |
    |                      |              |            |
    |--- Voucher Status -->|              |            |
    |                      |--- req-device audit log-->|
    |                      |<---- device audit log ----|
    |              [verify audit log ]
    |                      |              |            |
    |--- Enroll Status --->|              |            |
    |                      |              |            |
]]></artwork></artset></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar.
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>In case the TLS connection to the registrar is already closed, the registrar-agent opens a new TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHOULD</bcp14> log the transaction provided for a pledge via registrar-agent and include the identity of the registrar-agent in these logs. For log analysis the following may be considered:</t>

<t><list style="symbols">
  <t>The registrar knows the interacting registrar-agent from the authentication of the registrar-agent towards the registrar using LDevID (RegAgt) and can log it accordingly.</t>
  <t>The telemetry information from the pledge can be correlated to the voucher response provided from the registrar to the registrar-agent and further to the pledge.</t>
  <t>The telemetry information, when provided to the registrar is provided via the registrar-agent and can thus be correlated.</t>
</list></t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device of the domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> Section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in Section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge is an accepted device of the domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status.
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the signature verification of the status information is an addition to the described handling in Section 5.9.4 of <xref target="RFC8995"/>, and is replacing the pledges TLS client authentication by DevID credentials in <xref target="RFC8995"></xref>.</t>

<t>According to <xref target="RFC8995"/> Section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
An example case for the registrar revoking the issued LDevID for the pledge is when the pledge was not able to verify the received LDevID certificate and therefore did send a 406 (Not Acceptable) response.
In this case the registrar may revoke the LDevID certificate as the pledge did no accepted it for installation.</t>

<t>The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
</section>
<section anchor="exchanges_uc2_5"><name>Request Pledge-Status by Registrar-Agent from Pledge</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge.
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), may have a list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures performed with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artset><artwork  type="svg" align="left"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" height="192" width="360" viewBox="0 0 360 192" class="diagram" text-anchor="middle" font-family="monospace" font-size="13px" stroke-linecap="round">
<path d="M 8,32 L 8,96" fill="none" stroke="black"/>
<path d="M 40,104 L 40,176" fill="none" stroke="black"/>
<path d="M 80,32 L 80,96" fill="none" stroke="black"/>
<path d="M 256,32 L 256,96" fill="none" stroke="black"/>
<path d="M 304,104 L 304,176" fill="none" stroke="black"/>
<path d="M 352,32 L 352,96" fill="none" stroke="black"/>
<path d="M 8,32 L 80,32" fill="none" stroke="black"/>
<path d="M 256,32 L 352,32" fill="none" stroke="black"/>
<path d="M 8,96 L 80,96" fill="none" stroke="black"/>
<path d="M 256,96 L 352,96" fill="none" stroke="black"/>
<path d="M 48,128 L 72,128" fill="none" stroke="black"/>
<path d="M 264,128 L 296,128" fill="none" stroke="black"/>
<path d="M 48,160 L 72,160" fill="none" stroke="black"/>
<path d="M 272,160 L 296,160" fill="none" stroke="black"/>
<polygon class="arrowhead" points="304,160 292,154.4 292,165.6" fill="black" transform="rotate(0,296,160)"/>
<polygon class="arrowhead" points="56,128 44,122.4 44,133.6" fill="black" transform="rotate(180,48,128)"/>
<g class="text">
<text x="44" y="52">Pledge</text>
<text x="308" y="52">Registrar-</text>
<text x="288" y="68">Agent</text>
<text x="300" y="84">(RegAgt)</text>
<text x="136" y="132">pledge-status</text>
<text x="224" y="132">request</text>
<text x="136" y="164">pledge-status</text>
<text x="228" y="164">response</text>
</g>
</svg>
</artwork><artwork  type="ascii-art" align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->|
    |                                |
]]></artwork></artset></figure>

<section anchor="exchanges_uc2_5a"><name>Pledge-Status - Request (Registrar-Agent to Pledge)</name>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/qps"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>.
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>.
The pledge-status request is signed by registrar-agent using the private key corresponding to the EE (RegAgt) certificate.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.
The version field is included to permit significant changes to the pledge-status request and response in the future.
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and enrollment of the pledge into the new domain).
As the pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters.
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "status-request" representation
  in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ]
}
]]></artwork></figure>

</section>
<section anchor="exchanges_uc2_5b"><name>Pledge-Status - Response (Pledge - Registrar-Agent)</name>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is:</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS>
  status-response = {
    "version": uint,
    "status":
      "factory-default" /
      "voucher-success" /
      "voucher-error" /
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error",
    ?"reason" : text,
    ?"reason-context": { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration.
This document specifies the status values in the context of the bootstrapping process and credential application.
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment-response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize its bootstrapped credentials (LDevID) in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t>The pledge-status responses are cumulative in the sense that connect-success implies enroll-success, which in turn implies voucher-success.</t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in General JWS Serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": BASE64URL(JWS Signature)
    }
  ]
}

# Example: Decoded payload "status-response" representation
  in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON"
  }
}

# Example: Decoded "JWS Protected Header" representation
  in JSON syntax
{
  "alg": "ES256",
  "x5c": [
    "base64encodedvalue==",
    "base64encodedvalue=="
  ],
  "typ": "jose+json
}
]]></artwork></figure>

<t><list style="symbols">
  <t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor.
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.</t>
  <t>In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent.
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.</t>
  <t>The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format.</t>
  <t>The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format.</t>
  <t>The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>
</list></t>

<t>The pledge <bcp14>SHOULD</bcp14> by default only respond to requests from nodes it can authenticate (such as registrar
agent), once the pledge is enrolled with CA certificates and a matching domain certificate.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher-Request Artifact</name>

<t><xref target="I-D.ietf-anima-rfc8366bis"/> extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.
These additional fields are defined in <xref target="exchanges_uc2_1"/> as:</t>

<t><list style="symbols">
  <t>agent-signed-data to provide a JSON encoded artifact from the involved registrar-agent, which allows the registrar to verify the agent's involvement</t>
  <t>agent-provided-proximity-registrar-cert to provide the registrar certificate visible to the registrar-agent, comparable to the registrar-proximity-certificate used in <xref target="RFC8995"/></t>
  <t>agent-signing certificate to optionally provide the registrar agent signing certificate.</t>
</list></t>

<t>Examples for the application of these fields in the context of a PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
<section anchor="iana-con"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                Description                       Reference
 tpvr               create pledge voucher-request     [THISRFC]
 tper               create pledge enrollment-request  [THISRFC]
 svr                supply voucher-response           [THISRFC]
 ser                supply enrollment-response        [THISRFC]
 scac               supply CA certificates to pledge  [THISRFC]
 qps                query pledge status               [THISRFC]
 requestenroll      supply PER to registrar           [THISRFC]
 wrappedcacerts     request wrapped CA certificates   [THISRFC]

]]></artwork></figure>

</section>
<section anchor="dns-service-names"><name>DNS Service Names</name>

<t>IANA has registered the following service names:</t>

<t><strong>Service Name:</strong> brski-pledge<br />
<strong>Transport Protocol(s):</strong> tcp<br />
<strong>Assignee:</strong> IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref><br />
<strong>Contact:</strong> IESG <eref target="mailto:iesg@ietf.org">iesg@ietf.org</eref><br />
<strong>Description:</strong> The Bootstrapping Remote Secure Key Infrastructure Pledge<br />
<strong>Reference:</strong> [THISRFC]</t>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the privacy considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>potentially no transport layer security between registrar-agent and pledge</t>
</list></t>

<t><xref target="exchanges_uc2_1"/> describes to optional apply TLS to protect the communication between the registrar-agent and the pledge.
The following is therefore applicable to the communication without the TLS protection.</t>

<t>The credential used by the registrar-agent to sign the data for the pledge <bcp14>SHOULD NOT</bcp14> contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the commissioning device instead of an LDevID certificate associated with the service technician operating the device.
This avoids revealing potentially included personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP.
Therefore, it is subject to disclosure by a Dolev-Yao attacker (an "oppressive observer")<xref target="onpath"/>.
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>the Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge.
This information reveals the identity of the devices being bootstrapped and allows deduction of which products an operator is using in their environment.
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could easily be eavesdropped, if the wireless network is unencrypted.
Even if the wireless network is encrypted, if it uses a network-wide key, then layer-2 attacks (ARP/ND spoofing) could insert an on-path observer into the path.</t>
  <t>the Timestamp data could reveal the activation time of the device.</t>
  <t>the Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also.
Further security aspects are considered here related to:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<section anchor="sec_cons-dos"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.
Because in BRSKI-PRM, the pledge responds to requests from real or illicit registrar-agents, pledges are more subject to DoS attacks from registrar-agents in BRSKI-PRM than they are from illicit registrars in <xref target="RFC8995"/>, where pledges do initiate the connections.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due changing state on the pledge (the pledge may produce a voucher-request, and refuse to produce another one).
One mitigation may be that the pledge does not limited the number of voucher-requests it creates until at least one has finished.
An alternative may be that the onboarding state may expire after a certain time, if no further interaction has happened.</t>

<t>In addition, the pledge may assume that repeated triggering for PVR are the result of a communication error with the registrar-agent.
In that case the pledge <bcp14>MAY</bcp14> simply resent the PVR previously sent.
Note that in case of resending, a contained nonce and also the contained agent-signed-data in the PVR would consequently be reused.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses previously requested PVR and PER for domain-A, may attempt to onboard the device into domain-B.  This can be detected by the domain registrar while PVR processing.
The domain registrar needs to verify that the "proximity-registrar-cert" field in the PVR matches its own registrar LDevID certificate.
In addition, the domain registrar needs to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge. (This is just part of the supply chain integration).
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the EE (RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (Section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns of misusage of a registrar-agent with a valid EE (RegAgt) certificate may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The EE (RegAgt) certificate may have been acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the EE (RegAgt) certificate may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the EE (RegAgt) certificate is valid for the complete bootstrapping phase.
This avoids that a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rogue pledge at a later point in time.
In this misuse "agent-signed-data" could be dated after the validity time of the EE (RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data".
Furthermore the registrar also verifies the EE (RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agent's signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge.
The pledge reacts on this if its product-serial-number is part of the request message.</t>

<t>If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all  pledges in the domain react if the functionality is supported.
This functionality enumerates and reveals the information of devices available in the domain.
The information about this is provided here as a feature to support the commissioning of devices.
A manufacturer may decide to support this feature only for devices not possessing a LDevID or to not support this feature at all, to avoid an enumeration in an operative domain.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in <xref target="I-D.ietf-anima-rfc8366bis"/> is based on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
The security considerations as described in <xref target="RFC8995"/> Section 11.7 (Security Considerations) apply.</t>

<t>The YANG module specified in <xref target="I-D.ietf-anima-rfc8366bis"/> defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.</t>

<t>The use of YANG to define data structures via the <xref target="RFC8971"/> "structure" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason, these guidelines do not follow the template described by <xref target="RFC8407"/> Section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, Hendrik Brockhaus, and Ingo Wenda for their input and discussion on use cases and call flows.
Further review input was provided by Jesser Bouzid, Dominik Tacke, and Christian Spindler.
Special thanks to Esko Dijk for the in deep review and the improving proposals.
Support in PoC implementations and comments resulting from the implementation was provided by Hong Rui Li and He Peng Jia.</t>

</section>


  </middle>

  <back>


    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC6762">
  <front>
    <title>Multicast DNS</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important. In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t>
      <t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server. In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t>
      <t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6762"/>
  <seriesInfo name="DOI" value="10.17487/RFC6762"/>
</reference>

<reference anchor="RFC6763">
  <front>
    <title>DNS-Based Service Discovery</title>
    <author fullname="S. Cheshire" initials="S." surname="Cheshire"/>
    <author fullname="M. Krochmal" initials="M." surname="Krochmal"/>
    <date month="February" year="2013"/>
    <abstract>
      <t>This document specifies how DNS resource records are named and structured to facilitate service discovery. Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6763"/>
  <seriesInfo name="DOI" value="10.17487/RFC6763"/>
</reference>

<reference anchor="RFC7030">
  <front>
    <title>Enrollment over Secure Transport</title>
    <author fullname="M. Pritikin" initials="M." role="editor" surname="Pritikin"/>
    <author fullname="P. Yee" initials="P." role="editor" surname="Yee"/>
    <author fullname="D. Harkins" initials="D." role="editor" surname="Harkins"/>
    <date month="October" year="2013"/>
    <abstract>
      <t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport. This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates. It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7030"/>
  <seriesInfo name="DOI" value="10.17487/RFC7030"/>
</reference>

<reference anchor="RFC7515">
  <front>
    <title>JSON Web Signature (JWS)</title>
    <author fullname="M. Jones" initials="M." surname="Jones"/>
    <author fullname="J. Bradley" initials="J." surname="Bradley"/>
    <author fullname="N. Sakimura" initials="N." surname="Sakimura"/>
    <date month="May" year="2015"/>
    <abstract>
      <t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures. Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification. Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7515"/>
  <seriesInfo name="DOI" value="10.17487/RFC7515"/>
</reference>

<reference anchor="RFC8040">
  <front>
    <title>RESTCONF Protocol</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <author fullname="M. Bjorklund" initials="M." surname="Bjorklund"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="January" year="2017"/>
    <abstract>
      <t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8040"/>
  <seriesInfo name="DOI" value="10.17487/RFC8040"/>
</reference>

<reference anchor="RFC8366">
  <front>
    <title>A Voucher Artifact for Bootstrapping Protocols</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <date month="May" year="2018"/>
    <abstract>
      <t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer. This artifact is known as a "voucher".</t>
      <t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure. Other YANG-derived formats are possible. The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t>
      <t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8366"/>
  <seriesInfo name="DOI" value="10.17487/RFC8366"/>
</reference>

<reference anchor="RFC8610">
  <front>
    <title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
    <author fullname="H. Birkholz" initials="H." surname="Birkholz"/>
    <author fullname="C. Vigano" initials="C." surname="Vigano"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2019"/>
    <abstract>
      <t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049). Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8610"/>
  <seriesInfo name="DOI" value="10.17487/RFC8610"/>
</reference>

<reference anchor="RFC8615">
  <front>
    <title>Well-Known Uniform Resource Identifiers (URIs)</title>
    <author fullname="M. Nottingham" initials="M." surname="Nottingham"/>
    <date month="May" year="2019"/>
    <abstract>
      <t>This memo defines a path prefix for "well-known locations", "/.well-known/", in selected Uniform Resource Identifier (URI) schemes.</t>
      <t>In doing so, it obsoletes RFC 5785 and updates the URI schemes defined in RFC 7230 to reserve that space. It also updates RFC 7595 to track URI schemes that support well-known URIs in their registry.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8615"/>
  <seriesInfo name="DOI" value="10.17487/RFC8615"/>
</reference>

<reference anchor="RFC8995">
  <front>
    <title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
    <author fullname="M. Pritikin" initials="M." surname="Pritikin"/>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="T. Eckert" initials="T." surname="Eckert"/>
    <author fullname="M. Behringer" initials="M." surname="Behringer"/>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies automated bootstrapping of an Autonomic Control Plane. To do this, a Secure Key Infrastructure is bootstrapped. This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline. We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device. The established secure connection can be used to deploy a locally issued certificate to the device as well.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8995"/>
  <seriesInfo name="DOI" value="10.17487/RFC8995"/>
</reference>

<reference anchor="RFC9360">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Header Parameters for Carrying and Referencing X.509 Certificates</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="February" year="2023"/>
    <abstract>
      <t>The CBOR Object Signing and Encryption (COSE) message structure uses references to keys in general. For some algorithms, additional properties are defined that carry parameters relating to keys as needed. The COSE Key structure is used for transporting keys outside of COSE messages. This document extends the way that keys can be identified and transported by providing attributes that refer to or contain X.509 certificates.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9360"/>
  <seriesInfo name="DOI" value="10.17487/RFC9360"/>
</reference>


<reference anchor="I-D.ietf-anima-jws-voucher">
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname="Thomas Werner" initials="T." surname="Werner">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="29" month="August" year="2023"/>
      <abstract>
	 <t>   [TODO: I-D.draft-ietf-anima-rfc8366bis] defines a digital artifact
   called voucher as a YANG-defined JSON document that is signed using a
   Cryptographic Message Syntax (CMS) structure.  This document
   introduces a variant of the voucher artifact in which CMS is replaced
   by the JSON Object Signing and Encryption (JOSE) mechanism described
   in RFC7515 to support deployments in which JOSE is preferred over
   CMS.

   In addition to explaining how the format is created, the
   &quot;application/voucher-jws+json&quot; media type is registered and examples
   are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-jws-voucher-09"/>
   
</reference>


<reference anchor="I-D.ietf-netconf-sztp-csr">
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Russ Housley" initials="R." surname="Housley">
         <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname="Sean Turner" initials="S." surname="Turner">
         <organization>sn3rd</organization>
      </author>
      <date day="2" month="March" year="2022"/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-netconf-sztp-csr-14"/>
   
</reference>


<reference anchor="I-D.ietf-anima-rfc8366bis">
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname="Kent Watsen" initials="K." surname="Watsen">
         <organization>Watsen Networks</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software</organization>
      </author>
      <author fullname="Max Pritikin" initials="M." surname="Pritikin">
         <organization>Cisco Systems</organization>
      </author>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname="Qiufang Ma" initials="Q." surname="Ma">
         <organization>Huawei</organization>
      </author>
      <date day="22" month="August" year="2023"/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#x27;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON or
   CBOR document that has been signed using a variety of cryptographic
   systems.

   The voucher artifact is normally generated by the pledge&#x27;s
   manufacturer (i.e., the Manufacturer Authorized Signing Authority
   (MASA)).

   This document updates RFC8366, merging a number of extensions into
   the YANG.  The RFC8995 voucher request is also merged into this
   document.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-rfc8366bis-10"/>
   
</reference>

<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>

<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>




    </references>

    <references title='Informative References' anchor="sec-informative-references">



<reference anchor="RFC2986">
  <front>
    <title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
    <author fullname="M. Nystrom" initials="M." surname="Nystrom"/>
    <author fullname="B. Kaliski" initials="B." surname="Kaliski"/>
    <date month="November" year="2000"/>
    <abstract>
      <t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process. The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document. This memo provides information for the Internet community.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="2986"/>
  <seriesInfo name="DOI" value="10.17487/RFC2986"/>
</reference>

<reference anchor="RFC5272">
  <front>
    <title>Certificate Management over CMS (CMC)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <author fullname="M. Myers" initials="M." surname="Myers"/>
    <date month="June" year="2008"/>
    <abstract>
      <t>This document defines the base syntax for CMC, a Certificate Management protocol using the Cryptographic Message Syntax (CMS). This protocol addresses two immediate needs within the Internet Public Key Infrastructure (PKI) community:</t>
      <t>1. The need for an interface to public key certification products and services based on CMS and PKCS #10 (Public Key Cryptography Standard), and</t>
      <t>2. The need for a PKI enrollment protocol for encryption only keys due to algorithm or hardware design.</t>
      <t>CMC also requires the use of the transport document and the requirements usage document along with this document for a full definition. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="5272"/>
  <seriesInfo name="DOI" value="10.17487/RFC5272"/>
</reference>

<reference anchor="RFC6125">
  <front>
    <title>Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)</title>
    <author fullname="P. Saint-Andre" initials="P." surname="Saint-Andre"/>
    <author fullname="J. Hodges" initials="J." surname="Hodges"/>
    <date month="March" year="2011"/>
    <abstract>
      <t>Many application technologies enable secure communication between two entities by means of Internet Public Key Infrastructure Using X.509 (PKIX) certificates in the context of Transport Layer Security (TLS). This document specifies procedures for representing and verifying the identity of application services in such interactions. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6125"/>
  <seriesInfo name="DOI" value="10.17487/RFC6125"/>
</reference>

<reference anchor="RFC6241">
  <front>
    <title>Network Configuration Protocol (NETCONF)</title>
    <author fullname="R. Enns" initials="R." role="editor" surname="Enns"/>
    <author fullname="M. Bjorklund" initials="M." role="editor" surname="Bjorklund"/>
    <author fullname="J. Schoenwaelder" initials="J." role="editor" surname="Schoenwaelder"/>
    <author fullname="A. Bierman" initials="A." role="editor" surname="Bierman"/>
    <date month="June" year="2011"/>
    <abstract>
      <t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices. It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages. The NETCONF protocol operations are realized as remote procedure calls (RPCs). This document obsoletes RFC 4741. [STANDARDS-TRACK]</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="6241"/>
  <seriesInfo name="DOI" value="10.17487/RFC6241"/>
</reference>

<reference anchor="RFC7252">
  <front>
    <title>The Constrained Application Protocol (CoAP)</title>
    <author fullname="Z. Shelby" initials="Z." surname="Shelby"/>
    <author fullname="K. Hartke" initials="K." surname="Hartke"/>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <date month="June" year="2014"/>
    <abstract>
      <t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks. The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s. The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t>
      <t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types. CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="7252"/>
  <seriesInfo name="DOI" value="10.17487/RFC7252"/>
</reference>

<reference anchor="RFC8152">
  <front>
    <title>CBOR Object Signing and Encryption (COSE)</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="July" year="2017"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8152"/>
  <seriesInfo name="DOI" value="10.17487/RFC8152"/>
</reference>

<reference anchor="RFC8407">
  <front>
    <title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
    <author fullname="A. Bierman" initials="A." surname="Bierman"/>
    <date month="October" year="2018"/>
    <abstract>
      <t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules. Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules. This document obsoletes RFC 6087.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="216"/>
  <seriesInfo name="RFC" value="8407"/>
  <seriesInfo name="DOI" value="10.17487/RFC8407"/>
</reference>

<reference anchor="RFC8792">
  <front>
    <title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
    <author fullname="K. Watsen" initials="K." surname="Watsen"/>
    <author fullname="E. Auerswald" initials="E." surname="Auerswald"/>
    <author fullname="A. Farrel" initials="A." surname="Farrel"/>
    <author fullname="Q. Wu" initials="Q." surname="Wu"/>
    <date month="June" year="2020"/>
    <abstract>
      <t>This document defines two strategies for handling long lines in width-bounded text content. One strategy, called the "single backslash" strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line. The second strategy, called the "double backslash" strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy. Both strategies use a self-describing header enabling automated reconstitution of the original content.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8792"/>
  <seriesInfo name="DOI" value="10.17487/RFC8792"/>
</reference>

<reference anchor="RFC8990">
  <front>
    <title>GeneRic Autonomic Signaling Protocol (GRASP)</title>
    <author fullname="C. Bormann" initials="C." surname="Bormann"/>
    <author fullname="B. Carpenter" initials="B." role="editor" surname="Carpenter"/>
    <author fullname="B. Liu" initials="B." role="editor" surname="Liu"/>
    <date month="May" year="2021"/>
    <abstract>
      <t>This document specifies the GeneRic Autonomic Signaling Protocol (GRASP), which enables autonomic nodes and Autonomic Service Agents to dynamically discover peers, to synchronize state with each other, and to negotiate parameter settings with each other. GRASP depends on an external security environment that is described elsewhere. The technical objectives and parameters for specific application scenarios are to be described in separate documents. Appendices briefly discuss requirements for the protocol and existing protocols with comparable features.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8990"/>
  <seriesInfo name="DOI" value="10.17487/RFC8990"/>
</reference>

<reference anchor="RFC9052">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Structures and Process</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol. This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization. This specification additionally describes how to represent cryptographic keys using CBOR.</t>
      <t>This document, along with RFC 9053, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="96"/>
  <seriesInfo name="RFC" value="9052"/>
  <seriesInfo name="DOI" value="10.17487/RFC9052"/>
</reference>

<reference anchor="RFC9053">
  <front>
    <title>CBOR Object Signing and Encryption (COSE): Initial Algorithms</title>
    <author fullname="J. Schaad" initials="J." surname="Schaad"/>
    <date month="August" year="2022"/>
    <abstract>
      <t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size. There is a need to be able to define basic security services for this data format. This document defines a set of algorithms that can be used with the CBOR Object Signing and Encryption (COSE) protocol (RFC 9052).</t>
      <t>This document, along with RFC 9052, obsoletes RFC 8152.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9053"/>
  <seriesInfo name="DOI" value="10.17487/RFC9053"/>
</reference>

<reference anchor="RFC9110">
  <front>
    <title>HTTP Semantics</title>
    <author fullname="R. Fielding" initials="R." role="editor" surname="Fielding"/>
    <author fullname="M. Nottingham" initials="M." role="editor" surname="Nottingham"/>
    <author fullname="J. Reschke" initials="J." role="editor" surname="Reschke"/>
    <date month="June" year="2022"/>
    <abstract>
      <t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the "http" and "https" Uniform Resource Identifier (URI) schemes.</t>
      <t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t>
    </abstract>
  </front>
  <seriesInfo name="STD" value="97"/>
  <seriesInfo name="RFC" value="9110"/>
  <seriesInfo name="DOI" value="10.17487/RFC9110"/>
</reference>

<reference anchor="RFC9238">
  <front>
    <title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
    <author fullname="M. Richardson" initials="M." surname="Richardson"/>
    <author fullname="J. Latour" initials="J." surname="Latour"/>
    <author fullname="H. Habibi Gharakheili" initials="H." surname="Habibi Gharakheili"/>
    <date month="May" year="2022"/>
    <abstract>
      <t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t>
      <t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="9238"/>
  <seriesInfo name="DOI" value="10.17487/RFC9238"/>
</reference>


<reference anchor="I-D.ietf-anima-brski-ae">
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Steffen Fries" initials="S." surname="Fries">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Hendrik Brockhaus" initials="H." surname="Brockhaus">
         <organization>Siemens AG</organization>
      </author>
      <date day="20" month="October" year="2023"/>
      <abstract>
	 <t>   This document defines an enhancement of Bootstrapping Remote Secure
   Key Infrastructure (BRSKI, RFC 8995) that supports alternative
   certificate enrollment protocols, such as CMP.  This offers the
   following advantages.

   Using authenticated self-contained signed objects for certification
   requests and responses, their origin can be authenticated
   independently of message transfer.  This supports end-to-end
   authentication (proof of origin) also over multiple hops, as well as
   asynchronous operation of certificate enrollment.  This in turn
   provides architectural flexibility where to ultimately authenticate
   and authorize certification requests while retaining full-strength
   integrity and authenticity of certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-ietf-anima-brski-ae-06"/>
   
</reference>


<reference anchor="I-D.richardson-emu-eap-onboarding">
   <front>
      <title>EAP defaults for devices that need to onboard</title>
      <author fullname="Alan DeKok" initials="A." surname="DeKok">
         <organization>FreeRADIUS</organization>
      </author>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="2" month="April" year="2023"/>
      <abstract>
	 <t>   This document describes a method by which an unconfigured device can
   use EAP to join a network on which further device onboarding, network
   attestation or other remediation can be done.  While RFC 5216
   supports EAP-TLS without a client certificate, that document defines
   no method by which unauthenticated EAP-TLS can be used.  This draft
   addresses that issue.  First, by defining the @eap.arpa domain, and
   second by showing how it can be used to provide quarantined network
   access for onboarding unauthenticated devices.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-emu-eap-onboarding-03"/>
   
</reference>


<reference anchor="I-D.eckert-anima-brski-discovery">
   <front>
      <title>Discovery for BRSKI variations</title>
      <author fullname="Toerless Eckert" initials="T. T." surname="Eckert">
         <organization>Futurewei USA</organization>
      </author>
      <author fullname="David von Oheimb" initials="D." surname="von Oheimb">
         <organization>Siemens AG</organization>
      </author>
      <author fullname="Esko Dijk" initials="E." surname="Dijk">
         <organization>IoTconsultancy.nl</organization>
      </author>
      <date day="23" month="October" year="2023"/>
      <abstract>
	 <t>   This document specifies how BRSKI entities, such as registrars,
   proxies, pledges or others that are acting as responders, can be
   discovered and selected by BRSKI entities acting as initiators.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-eckert-anima-brski-discovery-01"/>
   
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="March"/>
  </front>
  <format type="PDF" target="https://datatracker.ietf.org/meeting/113/materials/slides-113-anima-update-on-brski-with-pledge-in-responder-mode-brski-prm-00"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="androidnsd" target="https://developer.android.com/training/connect-devices-wirelessly">
  <front>
    <title>Android Developer: Connect devices wirelessly</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230000000000*/https://developer.android.com/training/connect-devices-wirelessly"/>
</reference>
<reference anchor="androidtrustfail" target="https://developer.android.com/training/articles/security-ssl">
  <front>
    <title>Security with Network Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
  <seriesInfo name="archived at" value="https://web.archive.org/web/20230326153937/https://developer.android.com/training/articles/security-ssl"/>
</reference>



<reference anchor="I-D.richardson-anima-registrar-considerations">
   <front>
      <title>Operational Considerations for BRSKI Registrar</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <author fullname="Wei Pan" initials="W." surname="Pan">
         <organization>Huawei Technologies</organization>
      </author>
      <date day="11" month="May" year="2023"/>
      <abstract>
	 <t>   This document describes a number of operational modes that a BRSKI
   Registration Authority (Registrar) may take on.

   Each mode is defined, and then each mode is given a relevance within
   an over applicability of what kind of organization the Registrar is
   deployed into.  This document does not change any protocol
   mechanisms.

   This document includes operational advice about avoiding unwanted
   consequences.

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-richardson-anima-registrar-considerations-07"/>
   
</reference>

<reference anchor="RFC8971">
  <front>
    <title>Bidirectional Forwarding Detection (BFD) for Virtual eXtensible Local Area Network (VXLAN)</title>
    <author fullname="S. Pallagatti" initials="S." role="editor" surname="Pallagatti"/>
    <author fullname="G. Mirsky" initials="G." role="editor" surname="Mirsky"/>
    <author fullname="S. Paragiri" initials="S." surname="Paragiri"/>
    <author fullname="V. Govindan" initials="V." surname="Govindan"/>
    <author fullname="M. Mudigonda" initials="M." surname="Mudigonda"/>
    <date month="December" year="2020"/>
    <abstract>
      <t>This document describes the use of the Bidirectional Forwarding Detection (BFD) protocol in point-to-point Virtual eXtensible Local Area Network (VXLAN) tunnels used to form an overlay network.</t>
    </abstract>
  </front>
  <seriesInfo name="RFC" value="8971"/>
  <seriesInfo name="DOI" value="10.17487/RFC8971"/>
</reference>


<reference anchor="I-D.irtf-t2trg-taxonomy-manufacturer-anchors">
   <front>
      <title>A Taxonomy of operational security considerations for manufacturer installed keys and Trust Anchors</title>
      <author fullname="Michael Richardson" initials="M." surname="Richardson">
         <organization>Sandelman Software Works</organization>
      </author>
      <date day="6" month="August" year="2023"/>
      <abstract>
	 <t>   This document provides a taxonomy of methods used by manufacturers of
   silicon and devices to secure private keys and public trust anchors.
   This deals with two related activities: how trust anchors and private
   keys are installed into devices during manufacturing, and how the
   related manufacturer held private keys are secured against
   disclosure.

   This document does not evaluate the different mechanisms, but rather
   just serves to name them in a consistent manner in order to aid in
   communication.

   RFCEDITOR: please remove this paragraph.  This work is occurring in
   https://github.com/mcr/idevid-security-considerations

	 </t>
      </abstract>
   </front>
   <seriesInfo name="Internet-Draft" value="draft-irtf-t2trg-taxonomy-manufacturer-anchors-02"/>
   
</reference>




    </references>


<?line 2170?>

<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher-Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".
The message size of this PVR is: 4649 bytes</t>

<figure title="Example Pledge Voucher-Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDQtMjZUMDU6MTY6MTcuNzA5WiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
    "signatures":[{
      "protected":"eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVN\
U1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBe\
EthVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ\
0FYRFRJeE1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q\
1FZRFZRUUdFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZR\
FZRUUZFd293TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtb\
GpaVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjR\
UVYdzdyVWVhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2T\
XgyWStTTWdROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxa\
GMyRXRkR1Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CY\
UFGRlFMak56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR\
0FRVUZCd01DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBR\
EJFQWlCdTN3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnW\
ENtSkxUekVsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sImFsZ\
yI6IkVTMjU2In0",
      "signature":"Y_ohapnmvbwjLuUicOB7NAmbGM7igBfpUlkKUuSNdG-eDI4BQ\
yuXZ2aw93zZId45R7XxAK-12YKIx6qLjiPjMw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher-Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In <xref target="RFC8995"/>, the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".
The message size of this RVR is: 13257 bytes</t>

<figure title="Example Registrar Voucher-Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiY2FmZmUtOTg3NDUiLCJ\
ub25jZSI6ImM1VEVPb29NTE5hNEN4L1UrVExoQ3c9PSIsInByaW9yLXNpZ25lZC12b3V\
jaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbTFNV0ZwMlpGZE9\
iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYVVrMlpYbEthR01\
6VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1pFaHJhVXhEU25\
wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFWa3lSbTFhYlZWMFQxUm5NMDVFVldsTVE\
wcDFZakkxYWxwVFNUWkpiVTB4VmtWV1VHSXlPVTVVUlRWb1RrVk9ORXd4VlhKV1JYaHZ\
VVE5qT1ZCVFNYTkpiVTU1V2xkR01GcFhVWFJpTWpScFQybEplVTFFU1hsTVZFRjVURlJ\
KZVZaRVFUTlBhazE2VDJwQk5FeHFSVFZPYkc5cFRFTkthRm95Vm5Wa1F6RjNZMjA1TW1\
GWFVteGFRekYzWTIwNU5HRlhNWEJrU0d0MFkyMVdibUZZVGpCamJVWjVURmRPYkdOdVV\
XbFBhVXBPVTFWc1JGSkdVa1JSTUVacFZESmtRbVF3YkVOUlYyUktVakJHV1ZkWVRuZFR\
WMVoyVkZWR2RsSXdUa1JqVldSVVZGUlJOVkZyUms1Uk1ERkhaRE5vUkdWclJrdFJiV1J\
QVm10S1FsZFdVa0poTUZwVFZGWktTbVF3VmtKWFZWSlhWVlpHVEZKRlJuTlViVlpXVkc\
1YWFWZEZTbTlaYlRWeVpVVmFWVkZXVWtOYU1EVlhVV3RHZWxSVlVrWk5WRlpXVFRGYWN\
GbDZTbk5oTWtaWVVtNXNiRlpGVmxGVVZVVjNVakJGZUZaVlZrTmtNMlJJVmtab2MxWkh\
SbGxWYlhoT1ZXdFdNMUpJWkZwU1JscFNWVlZTUlZGWGFFOWFWbHBQWTBkU1NGWnJVbEp\
XUlVac1VtNWpkMlZWTVVWU1dHeE9Va1pHTTFSdWNFcE5WVFZGWVVkR1IyUjZRalpVVlZ\
KR1pWVXhSVlZZWkU5bGEydDRWR3RTYjFsVk1VaFRXR2hFWld0R1MxRnRaRTlXYTBwQ1Y\
xWlNRbUV3V2xOVVZrcEtaREJXUWxkVlVsZFZWa1pNVWtWR2MxUnRWbFpVYmxwcFYwVkt\
iMWx0TlhKbFJWcEZVVlpPUTFvd05WZFJhMFo2VkZWTmQwMVVWbFpOTVZwd1dYcEtjMkV\
4YkZsVGFsWk9WVlJvTTFKR1JscFNSbHBTVlZWb1JWRldjRTlhVmxwUFkwZFNTRlpZYUV\
oU1JVWllVVzFrVDFaclNrSlVWVEZGVFVSRk1WWlVTbk5OUm5CWFUyMTRZVTF0ZURaYVJ\
XaExZVWRPY1ZGc2NFNVJhekZJVVc1c2VGSXhUazVPUkd4Q1dqQldTRkV3VG5oU01VNU9\
Ua1JzUW1Rd1ZrbFJWRUpLVVZWS1NsVklhRmhrVlRGSlVucG9TMVJIV2taVlJVVTFUMWh\
hZDAxdVZrbFNWVFZxVlROc2JWa3pWVE5VUjJSYVRraEJlRTVGUmtOT01GSk9XbFJGTkU\
xSVRrWmxSV1J4VkZOME0yTnJOVFJPTURVMVdWaE9lRXQ2Um5CTlJXUlVVVEZKTlU1VVV\
UTk5SRVp0VWpKV1dGUldSbWxqVjNCWVpXdEtZVlJWU1hkU01FVjRWbGRTUzFWV1JsaFV\
WVXBTVWpCT1JHTXdaRUpWVmxaSFVXNWtUbEZyU201YU0wcERXakJXUjFGc1JtcFNSV2h\
GVVZVNVExb3dOVmRUUmtVMFVXdEdiVTlGVmtOUlZURkVVV3BTUW1Rd2RFSlhWVkpYVld\
wQ1UxRnJUa1prTUdjd1UxZFNhVmRIZURaWlZtaFRZa2RPZEZadE5XaFhSVFIzV1RJeFI\
yVlZlSFJOVkZaYVRXcHNNRmt3WkVka1YxWlVUbGR3YVUxcVFqTlJNbVJhVTFWMGRsZHJ\
iRFpoYWtKR1VWaGtTbEpHVGtKUldHUlRWVlZzYjFGV1FqVlBXRnBOVTFkR01WVnJWbEp\
qYlhnMVlteGtNRlI2VmxOaVZYQXdZVmhTVW1GNlpFOVhSRkpMVlVoV2RWVklRazlVYXp\
BeFZWUnNRbUZWUm5sa1JVNTBWRVprWVZSVmJFMVdiRTEyVFZWc1JWbFhjR2xqTVU1Sll\
tNXdkbUpYYjNkV1F6a3paVmhKY21Nd2RFdGpRM1IxVFhwU1VsQlVNR2xNUTBwb1dqSld\
kV1JETVhwaFYyUjFXbGRSZEZwSFJqQlpVMGsyU1cxV05WTnVaRnBYUjNoNldXcEtSMkV\
3YkhGaU1teGhWMGQ0VEZrd1duZFhWbFowVFZVeFdGSnVRWGxYYTFwclZESkplR05HYkZ\
SWFJrcHhXV3hhWVU1R2NFZGFSbVJzWWxaS1JWUldhR3RoYlVwVlVWUktXRlp0VW5KWmE\
yUkxaRlpXV1ZWdGNFNWlXR2d4VjFjd2VGWXlSWGRsUm1oV1lsZG9jbFZxUWxkalJsRjV\
UbGh3YUZadGREWlZNakUwVjJ4a1IxTnVUbGhoTURFMFdrY3hTMk5HVGxWWGEzQm9ZVEo\
zZWxaR1pIZFNiVkpHVFZaV1UxZEdTazlXYTFwM1ZteFNWbFZyY0U5aGVrVXlWVlpTWVZ\
Sc1NrWlNha1pWVmxaS1ExcEVSbXRqUms1WlZHdHdhV0Y2Vm5wWFZFbDRZekpHU0ZOclV\
rNVhSbHB5Vm01d1IyTkdaSE5oUlhCb1ZsUnNkMVV5TVhkWGJGbDRZMGhTV0dKRk1UTlV\
iRlUxVWxac05sRnJPVlpOUnpneFYyMTRSbUZWZUVSVGJuQm9WakpTTVZkV2FGTk5WMDU\
wVm01d1NtRnVRbWxhV0d4TFpESk9kRTlVUW1GV01EUjNWMnhrVW1GVk9YQlRiWGhzVmx\
oQ2RsZFhkR3RoYlVaV1QxaENWR0V4Y0ZkYVYzUnlaVVpTZEdKRmNHcE5SM2d3V2tWb1E\
xbFdSWGRoZWtwVVZqTm9kbFZ0ZEhwbFZsWlpVMnhTYVdKclNrcFdhMVpUVVcxV2MxSnV\
VbFJpVlZwVlZXdGFjbVZzVFhwalJ6bFhUVlpHTmxkWWNFTmhiRWw1V1ROa1ZVMUdSak5\
aVm1SaFZXdHNjR1F5YkdwTmJYaDFXVzB4UjAxSFVsbFRiWGhLWVcwNWNGZEVRazlsYXp\
sV1QxWm9VMkpyY0dGWmJHTTFaV3hOZDA5WVZsSlhSMUpUVjFSR1YyRXhiM2RqUlZaWVV\
qRndUVmxzVWt0WFZUbFhVMnhXVjFJd05URlVSazE0WXpGUmQwNVdRbWxTZWxaMlZqSjB\
SazFGT1VaWGJYUlhZa2hCZDFReFVrOWhNbEY0Vld0d1YxWlVWbGRYUkVwaFYyczVWMWR\
1UWxkaVJHdzFWWHBPVDFaV1JuSmhSa3BRVmpOQ2Vsa3haSHBsVjBsNldUSnNiVlpxUlR\
WSmFYZHBXVmRrYkdKdVVYUmpNbXh1WW1reGFscFlTakJKYW5CaVNXc3hTbE5WVGt0U1J\
VNUVVVmRPZUZvd1JqTlRWVXBDV2pCc1JsZEhlSEZSTURGRlVWVjBRMW95WkhoaFIzUnh\
WREZDVWxWVlVrSmhhMHB6VkZaR2VtUXdUbEpYVlZKWFZWWkdTRkpZWkV0UmJGWlZVbFp\
PVGxGclJraFJWRVpXVWxWT2JtUXdjRlZYUjNoRldXcEplR1F4YkZoT1ZGWk9WV3hXTTF\
KWVpGcFNSbHBTVlZWNFJWRllhRTlhVmxwUFRWWnNkVlJ1UW1GU01uaHZXVEkxY21WRlV\
qWlJWVFZEV2pBMVYxRnJSbXBVVlVweVRWUldWazF0ZDNkWGJGSkdXVlV4UTFvd1pFSk5\
WbFpHVVZoa00xVnNVbGxpUmxKb1YwWktjMVpWYUZkbGJVWkdUVmhhWVZJeFducFZWRUp\
HWkRCb2Ixa3dOVTVoYTBZelZGZHdTazVGTVVWWk0zQk9aV3RGZDFZeWFHcFVhekUyVVZ\
oa1RtRnJhekJVVlZKcVpXc3hObEZVUWxoaGEwcDBWRlpHZW1Rd1RsSlhWVkpYVlZaR1N\
GSllaRXRSYkZaVlVsWk9UbEZyUmtoUlZFWldVbFZPYm1Rd2NGVlhSM2hGV1dwSmVHUXh\
iRmhPVkZaT1ZXeFdNMUpZWkZwU1JscFNWVlY0UlZGWWFFOWFWbHBQVFZac2RWUnVRbUZ\
TTW5odldUSTFjbVZGVWpaUlZUVkRXakExVjFGclJtcFVWVXB5VFZSV1ZrMXRkM2RYYkZ\
KR1dXc3hRMkV3WkVKTlZsWkdVVmhrTTFVeFVsbGlSbEpvVjBaS2MxWlZhRmRsYlVaR1R\
WaGFZVkl4V25wVlZtaERaREF4UjJFelpFWmtNV3hKVXpJNVlWTlljSEZOUlU1Q1ZWWnN\
TbE15T1dGVFdIQnhUVVZTUWxWWFRrVlZWMlJDVWxSWmQwMVZPSEppTW5CRVlUTktSVlZ\
1WXpOYU1Hd3lWMnRWTUdGVVRUQmFSMHB2VVROR2NGSjZaSEZpTWprelYyNUJNR1ZJV2p\
aU2JsSk5XbnBhVlZaNlFtOVViVkpKWkd4Q1JWVXhVbnBrVm1oVVpWWmpOV1JJU1hwUld\
HUkVZa2RhUkdJd1VsZFVia1pRWkhwc05WUldaekpVYlRWT1VqRldNMUpIWkZwU1JscFR\
UVVpDUWxWVlozWlJhMFpTVWtWR2JscFZSazVSYW1oSVVWUkdWbHBGYkROVlZteE9VVzF\
HUWxKcmJ6TlRTRkpVWkROQ1RWUklWbEJYYW1ScVlUQkdjMVZWYUZaTk1tUkNWRmRqZGx\
Ock1VTk5SV1JDVFZaV2ExSkhaRkpXTUVwRFZXMU9WVTVVVFRCaWF6RmFaR3hTYWxKdVV\
uSmFia295VGpOb1ZrNHdVbkJpVldoeFpXdEdWVkZ0WkU5V2EyaFVWbFZXUlZKRlJreFJ\
iV1J1WTJ0S2JsSlZXa05WVjA1RlVWZHdRbE13U201YU0wWnZZVEp3VUZWR1JsSlNSVVp\
1Vkd0c1FsSkZTa2RSVjJ4R1VWaENTMDR6YUhkVWJGWXlWVlZ3U0UxRk5XOVVSMGwyV2x\
oU2FVMXFRazFTUmxWNFRtMTRkMVV3YUZCT01rWnNZbnBDVjFkWVozZGxTR1JFVTFWRmN\
sUjZWWFpYVkZwRllVTjBhVkZxU1RSTmFsSXhZVmRHVUZWWFJsWlNSRnB1VVZVMWIxZFV\
iRmRTYlZGeVlXNUtlVmt3VmpKVGJsRnBURU5LVGxOVmJFUlNNVkpFVVRCR2FVc3laRUp\
rTUd4RFVWZGtTbEpXYUhOaGEwVjJaV3RHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1ZSVjN\
CRFdUQXhVbU16WkVSVlZteEZWbXhHVWxJd1ZqTlRhMHBXVmtWV1ZGUlZTa0pTTUVWNFZ\
sVldSRm96WkV0V1JtaHpVa2RKZVUxWVpGcFdlbFV4VkZaS1ZtUXdWak5YVlZKWFZWWkd\
UVkpGUmpSVWJWWlhWR3BHV21Kck5YZFhhMlJ6WVVkT2RXRXphRVZsYTBaUFVXMWtUMVp\
yU2tKWk1ERkRZWHBGTVZaVVNuTk5SbkJWVWxaS1RsRlVhRWhSVkVaV1VsVkdNMlF3YkZ\
WWFIzaFZXVlpvVTJKR1JYZFNXR1JKWVVkT1QxUlhjRUprTURGeFUxUlNUbEpIVGpWVWJ\
uQldUbFprYjFrd05VNWxhMFl6VkZkd1NrNUZNVVZaTTJ4UFpXeFZNVll5Y0VOaVJURlN\
Zek5rUkZWV2JFVldiRVpTVWpCV00xTnJTbFpXUlZaVVZGVktRbEl3UlhoV1ZWWkVXak5\
rUzFaR2FITlNSMGw1VFZoa1dsWjZWVEZVVmtwV1pEQldNMWRWVWxkVlZrWk5Va1ZHTkZ\
SdFZsZFVha1phWW1zMWQxZHJaSE5oUjA1MVlUTm9SV1ZyUms5UmJXUlBWbXRLUWxrd01\
VTmhla1V4VmxSS2MwMUdjRlZTVjBaT1VXMWtTRkZVUmxaU1ZVWXpaREZLVlZkSGVGVlp\
WbWhUWWtaV1NWWnVjR2hTVkVZeVYydGtWMk14UlhkU1dHUllWa1ZHVlZGdFpHcGpWMmh\
5WVdzNVVWVlZiRU5SYldSdVkxZG9jbUZyT1ZGVlZURkRVVzVrVDFFd1JrSlZhM0JEVm0\
wNWVscEZkRE5YVlRVMFlWWkNORk5JV25CU2JrWk1aV3RTYzA5WFdqQlVTRlpPV1ZjeGQ\
xSnNSbXBYU0dONFRXcGthRlJ0T1ZOWmJrNUpUREJhVG1OdE1UWlJNRVpKVFhwak0wMTZ\
UbXBOYlRscFZVZE9jMlJzVG5sWFZVb3lUVVZPTUZZeFJqQlpWRnBvU3pKT2RrMXNiRE5\
YYTFKQ1ZUQktibFJzV2tsVmF6RkRVVmRaTkZKVlRrVlJWV1JDVlZWbmRsRlhaRVpSVlR\
GQ1RrVmtRazFXVm10U1NHUkdVV2s1TTFWVlZrSmtNR3hFVVd0U1FscHJTbTVVYkZwSlZ\
UQXhSbEl3VWtKV01tUkRWVmh3TkdWdVpIZFZia0pOWlZNNWVWUldWbHBsYlVadlRXNU5\
lRTB5VmxaUFYyUkhaV3RHYTFGdFpFOVdhMmhTVGtWV1Ixb3hSbFppYms1c1RWVjRSR0V\
6VGpGT1JGWjFaRWhzVWxFeFdrSmFSbEpzVVZWR05WSkVhSEprTUU1dVYxVnNUR0l4Y0V\
wbGJXOTNVbFZHTTFOVlVsUlJWVVl6Vld4R1NtRkZSa3BqTVd4eldsWndUR015Y0VkVWE\
wNTZVMnQwYkZWSGVFaFVWVVpOV2xoQ1YxcFViRVpVUkdSUFlqTlJNVTFVVmpObFJ6Rlh\
aRlZ3UTFGWGJFSlpNRlpPVmxaV2IxSldUbnBVUm1SUlRsaG9WRlZXVlhkWFNFWTJWbTV\
GTkZkWVduQlNha1pwVm0wNU5sSXpjRFJPV0hCUFdqSk9lbVI2TURsSmJERTVabEVpTEN\
KemFXZHVZWFIxY21WeklqcGJleUp3Y205MFpXTjBaV1FpT2lKbGVVbzBUbGROYVU5c2M\
ybFVWV3hLVVRCb2NWRXdUa0paTVU1dVVWaGtTbEZyUm01VFZXUkNWMGRvTUUxVVVucGl\
NREZDWWpCa1JGRXpSa2hWTURBd1QxVktRbFJWVGs1U1ZtdzBVVE53UWxOclNtNVViRnB\
EVVZac1ZWRlhkRTlUVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW1OR1VtaFdNVm93VjJ\
4ak1XVnJiRVpTYTJoT1ZWUm9NMUpHUmxwU1JscFNWVlY0UlZGV2NFUldhMDVEVWtaV1I\
xUllhRVpXUlVaUlVXMWtUMVpyU2tKVVZURkVVbXh3YzFsdE1WTmtiVTV5Vkd0S1RsRXd\
SbGxTUmxKS1pVVXhSVlJZYkU5aGEwVXhWRmR3U21WVk5WZGlNV3hGWlcxek1WUXhVbkp\
sUlRGeFZGaG9UbUZyTUhoVU1WSldUbFprY1ZGdGFFNVZXRTR6VVRGR1dsSkdXbEpWVld\
SR1pEQndSVlV3VWtaV1JURkRVbFZrUWsxV1ZrWlJNbVF6VXpGVmVXSkhlR2xXTVZveFd\
UTnNRMUZzU2paU1ZrSk9VVlJDU0ZGVVJsWlNWVTR6WkRCa1VtSkdSbTVWVkVaRFZrVXh\
VMVZZWkVaYU1XeEZWbXhHVWxKclZqTmtSM0JhVmpGd2RGZHNUWGRPVlRsRldYcENUMVp\
GVmxoVVZVcFNVakJGZUZaVlZrSmtNMlJQVmxWYWIxSkZNVFZPVlZwUFpXeFdNRlJXVWt\
Ka01VWlZVV3h3VGxGck1VaFJibXg0VWpGT1RrNUViRUphTUZaSVVUQk9lRkl4VGs1T1J\
HeENaREJXU1ZGVVFrcFJWVXBQVFVSb2NWWXdlSHBOUjBadlV6Qm9XbGR1Vm05aVZ6Rmp\
UREpqTkdScVVsaFRNR2d5VVZoU2FGcHNSazFSVTNSS1pGVXhUMkZITVc1aFZ6RllUakJ\
HVG1OdVJtOWlWMHBWVFRCc2FGVkZUalZoUnpGaFUxWk9kMVI2V20xaVUzTXlVMWhhWTB\
3eldrcGphM1J2VlZaU01WWnRPVXhoYldSYVVWaGtiV0ZyUm5aUmJXUnVZMnRLYmxKVld\
rTlZWMDVEVTFWR1Vsa3dVa05qU0ZKYVYwVTFiMVJHYUZOaVIwMTZWVmhXYWsxdGVITlp\
iR1JYWkZkT05VNVhjR2xOYWtFeVZERlNVazFGTVRaUlZsSkRXakExVjFOR1RsWlNWVkp\
GVVZWMFExb3laSGxSYldSR1VtdEtVbGt3VWtKV1JVWlFVVzFrVDFacmFGSlBSVXBDV21\
wb1JsRnJSazVSTUVrd1VWaGtUVlZXYkVWV2JFbDNWV3RLUkZkWVpFdFRWV3h3V2tWa2I\
ySkZlSFZYYlhocFlsWktNbGt5YXpGaGJHeFlUa2hXYVdKVWEzZFVSekV3WkZkSmVsa3p\
WbXRTTW1oM1dUTnJNVTFzYkZobFJFWmhWa1ZHVEZGdFpHNWpWMmh5WVdzNVVWVldSa1Z\
SVjJSUFUxVkdSVkZyV2tKaFZVazFVVzB4ZUZRemNIRlZWR2hzV1ZkamVWTnVVblprVmx\
KdlVsWm9lVm93T1VOWFZsRjNVWHBvWVdSRGREVlBWemxKVWtad1JWbHNVbEpUVjJoQ1Z\
HMXpNbVJIT1ZOaU1sWkVXVmMxYUZSWGNFNVdSWGgwWWxaV2RXSlhTbkphYWtKNldsaGF\
jbEV3YnpSTmJXc3hWbGhHY1ZWcldsZFZVMHBrVEVOS2FHSkhZMmxQYVVwR1ZYcEpNVTV\
wU2praUxDSnphV2R1WVhSMWNtVWlPaUphWTFwa1dYbzBiMUl3UjJKc09UWnFNWGxZWm5\
kdlRYZGxVVGt6VGpCdFNVUmxjVFkyVTBacWRFdG9lR1pSWjNJMGRUWkpOVEJKWldNMmE\
xWTJhSEV3YVcxdlptTlBhVGs0VW1OSVpXUmpNVzFuZHpCWVp5SjlYWDA9IiwiY3JlYXR\
lZC1vbiI6IjIwMjItMDItMjJUMDc6MzM6MjUuMDIwWiIsImFnZW50LXNpZ24tY2VydCI\
6WyJNSUlDSkRDQ0FjcWdBd0lCQWdJRVhsakNNREFLQmdncWhrak9QUVFEQWpCbE1Rc3d\
DUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUVDZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVF\
MREF4TmVWTjFZbk5wWkdsaGNua3hEekFOQmdOVkJBY01CazE1VTJsMFpURWFNQmdHQTF\
VRUF3d1JUWGxUYVhSbFVIVnphRTF2WkdWc1EwRXdIaGNOTWpBd01qSTRNRGN6TXpBMFd\
oY05NekF3TWpJNE1EY3pNekEwV2pCbU1Rc3dDUVlEVlFRR0V3SkJVVEVTTUJBR0ExVUV\
DZ3dKVFhsRGIyMXdZVzU1TVJVd0V3WURWUVFMREF4TmVWTjFZbk5wWkdsaGNua3hEekF\
OQmdOVkJBY01CazE1VTJsMFpURWJNQmtHQTFVRUF3d1NUWGxUYVhSbFVIVnphRTF2Wkd\
Wc1FYQndNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRFFnQUU2MDFPK29qQ2t\
yRFJ3N2dJdlpFNGkzNGRiaENxaUc3am9vd1pwNHh2ekZ0TGc2VFcwaE5kSHZQRFNUc3V\
YU3lXOXRyM0F3Q2xmQ29EVk5xT3c5eU1YNk5uTUdVd0RnWURWUjBQQVFIL0JBUURBZ2V\
BTUI4R0ExVWRJd1FZTUJhQUZKN0h0U3dwTEx1T1o3Y2tBbFFIVTNnQU1nL0pNQjBHQTF\
VZERnUVdCQlJjVDUzNG5NWXZUY0Z0a2Zydjd4VTdEaW1IanpBVEJnTlZIU1VFRERBS0J\
nZ3JCZ0VGQlFjREFqQUtCZ2dxaGtqT1BRUURBZ05JQURCRkFpRUFwSjd4cE5VdlFKRzB\
OaExiL2V0YjIwTERVMTZscFNITzdhZW8wVll4MHh3Q0lBK081L1k2RGgrYkIyODI0dWl\
hT1FhVUQ2Z0FOaFk5VkZkK2pycmNFdkp0IiwiTUlJQ0dUQ0NBYitnQXdJQkFnSUVYbGp\
BL3pBS0JnZ3Foa2pPUFFRREFqQmNNUXN3Q1FZRFZRUUdFd0pCVVRFU01CQUdBMVVFQ2d\
3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5OcFpHbGhjbmt4RHpBTkJ\
nTlZCQWNNQmsxNVUybDBaVEVSTUE4R0ExVUVBd3dJVFhsVGFYUmxRMEV3SGhjTk1qQXd\
Nakk0TURjeU56VTVXaGNOTXpBd01qSTRNRGN5TnpVNVdqQmxNUXN3Q1FZRFZRUUdFd0p\
CVVRFU01CQUdBMVVFQ2d3SlRYbERiMjF3WVc1NU1SVXdFd1lEVlFRTERBeE5lVk4xWW5\
OcFpHbGhjbmt4RHpBTkJnTlZCQWNNQmsxNVUybDBaVEVhTUJnR0ExVUVBd3dSVFhsVGF\
YUmxVSFZ6YUUxdlpHVnNRMEV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkN\
BQVJKQlZvc2RLd1lOeGlQeEh2aUZxS3pEbDlmdEx1TWFtcEZRY1h3MTI3YU5vUmJzSC9\
GTXJtekNBSDM3NzMzYzJvYlBjbHZTcllCdjBDdFdRdGE2YStjbzJZd1pEQVNCZ05WSFJ\
NQkFmOEVDREFHQVFIL0FnRUFNQTRHQTFVZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUd\
EQVdnQlF6eHp3cFJwTHkvck1VWXphaDJzMTNlVTlnRnpBZEJnTlZIUTRFRmdRVW5zZTF\
MQ2tzdTQ1bnR5UUNWQWRUZUFBeUQ4a3dDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWhBSXN\
ZbGVaS3NqRk5Dc0pLZVBsR01BTGVwVmU5RUw3Tm90NTE1d3htVnVKQkFpQWNFTVVVaEV\
Tc0xXUDV4U1FVMFhxelZxOFl2aUYxYlZvekd6eDV6Tmdjc3c9PSJdfX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQjhEQ0NBWmFnQXdJQkFnSUdBWEJoTUtZSU1\
Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5\
lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVV\
FQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1ZEUVRBZUZ3MHlNREF5TWp\
Bd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNSGt4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVM0d0xBWURWUVFERENWU1pXZHBjM1J\
5WVhJZ1ZtOTFZMmhsY2lCU1pYRjFaWE4wSUZOcFoyNXBibWNnUzJWNU1Ga3dFd1lIS29\
aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRUJUVFwvc1JmTDlsSnVGbVwvY24zU2pHcWp\
QXC9xdnBrNytoSTIwOE5oVkRvR2hcLzdLUCt2TXpYeVFRQStqUjZrNnJhTTI4ZlwvbHV\
FK1h1aHVwN1Vmem05Q3FNbk1DVXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBeHd3RGd\
ZRFZSMFBBUUhcL0JBUURBZ2VBTUFvR0NDcUdTTTQ5QkFNQ0EwZ0FNRVVDSUhOK3VBbUp\
ldVhlc1wveWQxd1M0Mlo0RFhKNEptMWErZzNYa1pnZjhUaGxuQWlFQXBVdTZzZnljRWt\
veDdSWlhtZitLOHc0cDZzUldyamExUVJwWTAyNjQxSFk9IiwiTUlJQjhEQ0NBWmVnQXd\
JQkFnSUdBWEJoTUtZQk1Bb0dDQ3FHU000OUJBTUNNRnd4Q3pBSkJnTlZCQVlUQWtGUk1\
SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJBc01ERTE1VTNWaWMybGt\
hV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WURWUVFEREFoTmVWTnBkR1Z\
EUVRBZUZ3MHlNREF5TWpBd05qQXlNak5hRncwek1EQXlNakF3TmpBeU1qTmFNRnd4Q3p\
BSkJnTlZCQVlUQWtGUk1SSXdFQVlEVlFRS0RBbE5lVU52YlhCaGJua3hGVEFUQmdOVkJ\
Bc01ERTE1VTNWaWMybGthV0Z5ZVRFUE1BMEdBMVVFQnd3R1RYbFRhWFJsTVJFd0R3WUR\
WUVFEREFoTmVWTnBkR1ZEUVRCWk1CTUdCeXFHU000OUFnRUdDQ3FHU000OUF3RUhBMEl\
BQkluQ3VoV1ZzZ2NONzFvWmVzMUZHXC9xZFZnTVBva01wZlMyNzFcL2V5SWNcL29EVmJ\
NRkhDYmV2SjVMTTgxOTVOYVpLTlNvSFAzS3dMeXVCaDh2MncwOVp1alJUQkRNQklHQTF\
VZEV3RUJcL3dRSU1BWUJBZjhDQVFFd0RnWURWUjBQQVFIXC9CQVFEQWdJRU1CMEdBMVV\
kRGdRV0JCUXp4endwUnBMeVwvck1VWXphaDJzMTNlVTlnRnpBS0JnZ3Foa2pPUFFRREF\
nTkhBREJFQWlCZGJIU212YW9qaDBpZWtaSUtOVzhRMGxTbGI1K0RLTlFcL05LY1I3dWx\
6dGdJZ2RwejZiUkYyREZtcGlKb3JCMkd5VmE4YVdkd2xIc0RvRVdZY0k0UEdKYmc9Il0\
sImFsZyI6IkVTMjU2In0",
    "signature":"67t3n8zyEek4IM2Ko3Y_UvE1hzp794QFNTqG-HzTrBQtE4_4-yS\
yyFd3kP6YCn35YYJ7yK35d3styo_yoiPfKA"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization". The message size of this Voucher is: 1916 bytes</t>

<figure title="Example Voucher-Response from MASA" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iTDNJSjZocHRIQ0lRb054YWFiOUhXQT09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDQtMjZ\
UMDU6MTY6MjguNzI2WiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwiYWxnIjoiRVMyNTYifQ",
    "signature":"0TB5lr-cs1jqka2vNbQm3bBYWfLJd8zdVKIoV53eo2YgSITnKKY\
TvHMUw0wx9wdyuNVjNoAgLysNIgEvlcltBw"
  }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-masa-issued-voucher-with-additional-registrar-signature-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher-Response, MASA issued Voucher with additional Registrar signature (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher-response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".
The message size of this Voucher is: 3006 bytes</t>

<figure title="Example Voucher-Response from MASA, with additional Registrar signature" anchor="ExampleVoucherResponseWithRegSignfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":"eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2V\
udC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIjo\
iUUJiSXMxNTJzbkFvVzdSeVFMWENvZz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDktMjl\
UMDM6Mzc6MjYuMzgyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0F\
3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTV\
RblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1J\
EUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXp\
BUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJ\
nTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUF\
CT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2N\
ZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRXd\
FQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0J\
CVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQkd\
BaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUUR\
HMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures":[{
    "protected":"eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU1\
Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEt\
hVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQjR\
YRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQTF\
VRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRUF\
3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQVR\
CZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOFI\
wWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0d\
CSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSXp\
qMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU5\
FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2F\
FS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In0\
",
    "signature":"ShqW8uFRkuAXIzjAhB4bolMMndcY7GYq3Kbo94yvGtjCaxEX3Hp\
6QXZUTEJ_kulQ1G7DnaU4igDPdUGtcV9Lkw"},{
    "protected":"eyJ4NWMiOlsiTUlJQjRqQ0NBWWlnQXdJQkFnSUdBWFk3MmJiWk1\
Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUx\
CZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1ERXlNRGN\
3TmpFNE1USmFGdzB6TURFeU1EY3dOakU0TVRKYU1ENHhFekFSQmdOVkJBb01DazE1UW5\
WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhHREFXQmdOVkJBTU1EMFJ2YldGcGJ\
sSmxaMmx6ZEhKaGNqQlpNQk1HQnlxR1NNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJCazE\
2S1wvaTc5b1JrSzVZYmVQZzhVU1I4XC91czFkUFVpWkhNdG9rU2RxS1c1Zm5Xc0JkK3F\
STDdXUmZmZVdreWdlYm9KZklsbHVyY2kyNXduaGlPVkNHamV6QjVNQjBHQTFVZEpRUVd\
NQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNESERBT0JnTlZIUThCQWY4RUJBTUNCNEF\
3U0FZRFZSMFJCRUV3UDRJZGNtVm5hWE4wY21GeUxYUmxjM1F1YzJsbGJXVnVjeTFpZEM\
1dVpYU0NIbkpsWjJsemRISmhjaTEwWlhOME5pNXphV1Z0Wlc1ekxXSjBMbTVsZERBS0J\
nZ3Foa2pPUFFRREFnTklBREJGQWlCeGxkQmhacTBFdjVKTDJQcldDdHlTNmhEWVcxeUN\
PXC9SYXVicEM3TWFJRGdJaEFMU0piZ0xuZ2hiYkFnMGRjV0ZVVm9cL2dHTjBcL2p3ekp\
aMFNsMmg0eElYazEiXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU\
2In0",
    "signature":"N4oXV48V6umsHMKkhdSSmJYFtVb6agjD32uXpIlGx6qVE7Dh0-b\
qhRRyjnxp80IV_Fy1RAOXIIzs3Q8CnMgBgg"
  }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="pledgehttps"><name>HTTP-over-TLS operations between Registrar-Agent and Pledge</name>

<t>The use of HTTPS between the Registrar-Agent and the Pledge has been identified as an optional mechanism.</t>

<t>Provided that the key-agreement in the underlying TLS protocol connection can be properly authenticated, the use of TLS provides privacy for the voucher and enrollment operations between the pledge and the registrar-agent.
The authenticity of the onboarding and enrollment is not dependant upon the security of the TLS connection.</t>

<t>The use of HTTPS is not mandated by this document for a number of reasons:</t>

<t><list style="numbers">
  <t>A certificate is generally required in order to do TLS.  While there are other modes of authentication including PSK, various EAP methods and raw public key, they do no help as there is no previous relationship between the Registrar-Agent.</t>
  <t>The pledge can use it's IDevID certificate to authenticate itself, but <xref target="RFC6125"/> DNS-ID methods do not apply as the pledge does not have a FQDN.  Instead a new mechanism is required, which authenticates the X520SerialNumber DN attribute which must be present in every IDevID.</t>
</list></t>

<t>If the Registrar-Agent has a preconfigured list of which serial numbers, from which manufacturers it expects to see, then it can attempt to match this pledge against a list of potential devices.</t>

<t>In many cases only the list of manufacturers is known ahead of time, so at most the Registrar-Agent can show the X520SerialNumber to the (human) operator who may then attempt to confirm that they are standing in front of a device with that serial number.
The use of scannable QRcodes may help automate this in some cases.</t>

<t><list style="numbers">
  <t>The CA used to sign the IDevID will be a manufacturer private PKI as described in <xref section="4.1" sectionFormat="comma" target="I-D.irtf-t2trg-taxonomy-manufacturer-anchors"/>.
The anchors for this PKI will never be part of the public WebPKI anchors which are distributed with most smartphone operating systems.
A registrar-agent application will need to use different APIs in order to initiate an HTTPS connection without performing WebPKI verification.
The application will then have to do it's own certificate chain verification against a store of manufacturer trust anchors.
In the Android ecosystem this involved use of a customer TrustManager: many application developers do not create these correctly, and there is significant push to remove this option as it has repeatedly resulted in security failures. See <xref target="androidtrustfail"/></t>
  <t>The use of the Host: (or :authority in HTTP/2) is explained in <xref section="7.2" sectionFormat="comma" target="RFC9110"/>. This header is mandatory, and so a compliant HTTPS client is going to insert it.
But, the contents of this header will at best be an IP address that came from the discovery process.
The pledge <bcp14>MUST</bcp14> therefore ignore the Host: header when it processes requests, and the pledge <bcp14>MUST NOT</bcp14> do any kind of name-base virtual hosting using the IP address/port combination.
Note that there is no requirement for the pledge to operate it's BRSKI-PRM service on port 80 or port 443, so if there is no reason for name-based virtual hosting.</t>
  <t>Note that an Extended Key Usage (EKU) for TLS WWW Server authentication cannot be expected in the pledge's IDevID certificate.
IDevID certificates are intended to be widely useable and EKU does not support that use.</t>
</list></t>

</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 10 -&gt; IETF draft 11:</t>

<t><list style="symbols">
  <t>issue #103, removed step 6 in verification handling for the wrapped CA certificate provisioning as only applicable after enrollment <xref target="exchanges_uc2_3c"/></t>
  <t>issue #128: included notation of nomadic operation of the registrar-agent in <xref target="architecture"/></t>
  <t>issue #130, introduced DNS service discovery name for brski_pledge to enable discovery by the registrar-agent in <xref target="iana-con"/></t>
  <t>removed unused reference RFC 5280</t>
  <t>removed site terminology</t>
</list></t>

<t>From IETF draft 09 -&gt; IETF draft 10:</t>

<t><list style="symbols">
  <t>issue #79, clarified discovery in the context of BRSKI-PRM and included information about future discovery enhancements in a separate draft in <xref target="discovery_uc2_reg"/>.</t>
  <t>issue #93, included information about conflict resolution in mDNS and GRASP in <xref target="discovery_uc2_ppa"/></t>
  <t>issue #103, included verification handling for the wrapped CA certificate provisioning in <xref target="exchanges_uc2_3c"/></t>
  <t>issue #106, included additional text to elaborate more the registrar status handling in <xref target="exchanges_uc2_4"/></t>
  <t>issue #116, enhanced DoS description in <xref target="sec_cons-dos"/></t>
  <t>issue #120, included statement regarding pledge host header processing in <xref target="pledge_ep"/></t>
  <t>issue #122, availability of serial number information on registrar agent clarified in <xref target="exchanges_uc2_1"/></t>
  <t>issue #123, Clarified usage of alternative voucher formats in  <xref target="rvr-proc"/></t>
  <t>issue #124, determination of pinned domain certificate done as in RFC 8995 included in <xref target="exchanges_uc2_2_vc"/></t>
  <t>issue #125, remove strength comparison of voucher assertions in <xref target="agt_prx"/> and <xref target="exchanges_uc2"/></t>
  <t>issue #130, aligned the usage of site and domain throughout the document</t>
  <t>changed naming of registrar certificate from LDevID(RegAgt) to EE (RegAgt) certificate throughout the document</t>
  <t>change x5b to x5bag according to <xref target="RFC9360"/></t>
  <t>updated JSON examples -&gt; "signature": BASE64URL(JWS Signature)</t>
</list></t>

<t>From IETF draft 08 -&gt; IETF draft 09:</t>

<t><list style="symbols">
  <t>issue #80, enhanced <xref target="discovery_uc2_ppa"/> with clarification on the serial number and the inclusion of GRASP</t>
  <t>issue #81, enhanced introduction with motivation for agent_signed_data</t>
  <t>issue #82, included optional TLS protection of the communication link between registrar-agent and pledge in the introduction <xref target="req-sol"/>, and <xref target="exchanges_uc2_1"/></t>
  <t>issue #83, enhanced <xref target="PER-response"/> and <xref target="exchanges_uc2_2_per"/> with note to re-enrollment</t>
  <t>issue #87, clarified available information at the registrar-agent in <xref target="exchanges_uc2_1"/></t>
  <t>issue #88, clarified, that the PVR in <xref target="pvrr"/> and PER in <xref target="PER-response"/> may contain the certificate chain. If not contained it <bcp14>MUST</bcp14> be available at the registrar.</t>
  <t>issue #91, clarified that a separate HTTP connection may also be used to provide the PER in <xref target="exchanges_uc2_2_per"/></t>
  <t>resolved remaining editorial issues discovered after WGLC (responded to on the mailing list in Reply 1 and Reply 2) resulting in more consistent descriptions</t>
  <t>issue #92: kept separate endpoint for wrapped CSR on registrar <xref target="exchanges_uc2_2_wca"/></t>
  <t>issue #94: clarified terminology (possess vs. obtained)</t>
  <t>issue #95: clarified optional IDevID CA certificates on registrar-agent <xref target="exchanges_uc2_3"/></t>
  <t>issue #96: updated <xref target="exchangesfig_uc2_3"/> to correct to just one CA certificate provisioning</t>
  <t>issue #97: deleted format explanation in <xref target="exchanges_uc2_3"/> as it may be misleading</t>
  <t>issue #99: motivated verification of second signature on voucher in <xref target="exchanges_uc2_3"/></t>
  <t>issue #100: included negative example in <xref target="vstat"/></t>
  <t>issue #101: included handling if <xref target="exchanges_uc2_3b"/> voucher telemetry information has not been received by the registrar-agent</t>
  <t>issue #102: relaxed requirements for CA certs provisioning in <xref target="exchanges_uc2_3c"/></t>
  <t>issue #105: included negative example in <xref target="estat"/></t>
  <t>issue #107: included example for certificate revocation in <xref target="exchanges_uc2_4"/></t>
  <t>issue #108: renamed heading to Pledge-Status Request of <xref target="exchanges_uc2_5a"/></t>
  <t>issue #111: included pledge-status response processing for authenticated requests in <xref target="exchanges_uc2_5b"/></t>
  <t>issue #112: added "Example key word in pledge-status response in <xref target="stat_res"/></t>
  <t>issue #113: enhanced description of status reply for "factory-default" in  <xref target="exchanges_uc2_5b"/></t>
  <t>issue #114: Consideration of optional TLS usage in Privacy Considerations</t>
  <t>issue #115: Consideration of optional TLS usage in Privacy Considerations to protect potentially privacy related information in the bootstrapping like status information, etc.</t>
  <t>issue #116: Enhanced DoS description and mitigation options in security consideration section</t>
  <t>updated references</t>
</list></t>

<t>From IETF draft 07 -&gt; IETF draft 08:</t>

<t><list style="symbols">
  <t>resolved editorial issues discovered after WGLC (still open issues remaining)</t>
  <t>resolved first comments from the Shepherd review as discussed in PR #85 on the ANIMA github</t>
</list></t>

<t>From IETF draft 06 -&gt; IETF draft 07:</t>

<t><list style="symbols">
  <t>WGLC resulted in a removal of the voucher enhancements completely from this document to RFC 8366bis, containing all enhancements and augmentations of the voucher, including the voucher-request as well as the tree diagrams</t>
  <t>smaller editorial corrections</t>
</list></t>

<t>From IETF draft 05 -&gt; IETF draft 06:</t>

<t><list style="symbols">
  <t>Update of list of reviewers</t>
  <t>Issue #67, shortened the pledge endpoints to prepare for constraint deployments</t>
  <t>Included table for new endpoints on the registrar in the overview of the registrar-agent</t>
  <t>addressed review comments from SECDIR early review (terminology clarifications, editorial improvements)</t>
  <t>addressed review comments from IOTDIR early review (terminology clarifications, editorial improvements)</t>
</list></t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Restructured document to have a distinct section for the object flow and handling and shortened introduction, issue #72</t>
  <t>Added security considerations for using mDNS without a specific product-serial-number, issue #75</t>
  <t>Clarified pledge-status responses are cumulative, issue #73</t>
  <t>Removed agent-sign-cert from trigger data to save bandwidth and remove complexity through options, issue #70</t>
  <t>Changed terminology for LDevID(Reg) certificate to registrar LDevID certificate, as it does not need to be an LDevID, issue #66</t>
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same registrar LDevID certificate domain CA</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>Included examples for several objects in section <xref target="examples"/> including message example sizes, issue #33</t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
  <t>Several editorial changes and enhancements to increasing readability.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher-request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge voucher-request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further
certificate information like the issuing CA cert for the LDevID(RegAgt)
certificate in case the registrar and the registrar-agent have different
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12).
This also required changes in the YANG module in <xref target="I-D.ietf-anima-rfc8366bis"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="architecture"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/>.</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="architecture"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="architecture"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="architecture"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="architecture"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization>IoTconsultancy.nl</organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    <contact initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei</organization>
      <address>
        <email>tte@cs.fau.de</email>
      </address>
    </contact>
    <contact initials="M." surname="Kovatsch" fullname="Matthias Kovatsch">
      <organization></organization>
      <address>
        <email>ietf@kovatsch.net</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
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
2sM7PcdOHhkHI7yLsnVGR+CZ/yQ7Vqc7pU2Atr4kzqAW6lrVEDAdPCrkRHAC
tb+hZHtmm0BRP6F2dLepWqIMMeDUKkdHOG0koxVTj7wFoaOAWBVrfAOpmtqk
DRmaKfg58vSI/2rpCg464ZzBZdlcs4iR7zcuCMKZPy1Hzw9aLOtv2kjgwRsX
+JwYIM7kjnY2YreZT2UigYYxPe9gQh/7EAyHq3IeJ92REWHyspwPtnOEHK/1
r9Q/DIwpgF/Q1ElObcDNtXF5rtFl5cXmQHaufqnOan5iMuJlnfCyNPBDM6Lc
igUHQOW+ihUoVGISGcIUBy1mWV4A25W/K4fQSHmqumKgblZkTHd090iv8oFe
vMFLqhBy2RV2Gs7blxgci5q04suFklweottfw47Y2yxC1ZH8JRgLTfAIVhJj
6WVDNPJdeMC8ce52Nras0WaOqR9MfVXMN+Fk6HkgvMHKFBTO5UBJ4XTEq9oY
Lu6KA4eaqi5mz6yRzA5LMXJqthbAj0hBSs5MP0ztt+iVeAec36PRIb2TOHLr
upCoROkopIxmFexOGwkzTd5JV+pIUZMLAgPln/z58Oyj3R3ed8RPwHgwsXn5
C0uYwE3jE0aLeUOfua2VDVdtHs9KzcRujo9fllQ96ua7THR/R/zFkelJ6NEp
MUq/UtFCVELKrObELrHavRSF8QDJh0xA4zHwrC+9fbHB3vc9l+aL0tCkgUXZ
WnpXfHp+ZFJLzta200o1JSsoSAldNZNiXDZawbl6Keqg1uvswtHuXvcwjSz7
nm4ME9Gy0Yqr0rE60GtsPW1eYnJc25vHK8tWWmRGltgfl60XbxBvjy2sYiHl
si0nBQapjRHSUEgNqdik/oJteoCF70jCS/SkK8IEWJ65/0Pxjgv81qgIGzgv
r3Pwm3Gsw7ab/1+6KvhJVGOFasPS5eemauHU9tJSOnb/hWYk75bmpkwi41bj
PB3HwxyWkU9EnHcizA8q9tp46dSauN7f5Zuvo1qrkyNRaYkM93WxaDnuOQM2
O1vOjB1UF6rDi7BxRq09p0I9ELgWY+Y1mgdqi0UjJ4HMkTP6OVBJMEOzTkJW
aYTvn16dHUnC39Pdp5IFqJWqPoGBJKamvTc/Lsd7kknNxoZjs86x0XCIgZ5T
Z8o7rGK+4cTvXq9b2XYYhpvsoZsswuPIZPX3x5RhdDB3kA9kA9KtsnXexChc
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
DhT7v2Ov+yZESS6Ka/RyuC4up3yZI8sppmSNeUd7q9rNB1EWTM12p7wl1Bkw
UuZ8Ou8X7Q30LKalNTI8Gi7KtNpyJ8M0skSCdXxsaoBk+sH3FQmpicxwNg9i
zVPsglH2DWI/SksO/BJZ7fhyEkludB6F3BWauUvuCQrkO1gONWiCiVGjHond
sU2CxXsT9QwcXhfj1wq8M2wFRykVixeKGWG+7byKeqEkkLDpPrLbiZkkaNE5
pqUFT7pUyzJukRGkB2gu4khTqYNB4uSNUlON0h1YBNYyMsMkx8+YBE92n2bf
mscM9qTvoSPuDd5HZjuCtKm6s2QcZJFEEkQpGslpBj0PDwKgKDfFJzs72Zf5
xGXShbN67FwKLqi7MpnoHnztwBgXXxBNsQ9NZsRtpETPJxP74o4uSu6sTaDO
a55e6Yg7lbHewY1U/qUgqLpf/ZPpNt3priIz7ibn8/DIbAK6lqSVnV2gFZPa
Zs4Cs7iJeUxNCn0EHYDX9JI1SzHjpXSEuIJkvymog/gvR4HfqOMtCrjh6jSy
xObIIH5Usw+r7kwHoyy9fFmS4lQwQIVZ19ORL5roY+jSUqopppeCUAn3ZFSM
EEIiW9FmbGDy62aOCqiuk/mkd29aidHfSerJaJd7Sf0gyVx/jTWooPCyE19Y
K5bA0Z8PGEooekMJ8asSkQQJlTOj6CSyNSamls6W76SXyCpB78bOz9jlh1GJ
VuURM5wkNquZx21qEskC6jrTrAnFgUw0odj4dlFxCvDCQ6sEKofJ0HQEmvK2
dXQV9QyZM826fiFqcqE7dY/3R+9uQn1J7ELYaUzeDG8FlQT0WefMk96skdXP
naNuS55NZCf3k3zsyNuw2/IBXHFfjJ50nHEHHneG210FeTdC4fImL/jiFMxk
QVcoyB1E6z20EKr1DoraSTR3zh6+C5NwEyDKoUpdqBtOsISQT3OhelMkCFcR
bnxX91R783tcems78N7bMZl2/gXHFvn+enMy0RO4pu8vGP/X6PqLNuiX9/z5
W+7P+b28gMWvywuYWnfQlFLZwn2uvXDdYFgR5BXpwEb3+LU694q1nHuhGLzf
t+dg/mMtAjkMaBpTbVAapIY4YOYouTLwKRn561IOZF4uzUuVOx+YiiJWKEWY
QPSTrzXnJlXS9JytlRWVTU/exf1cWQ/lWj5fPt+XvNvdF5V8qRxPTeY8Tvrq
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
9fPNKWDa0jjeDR33LmXHnYilf7Z7xeZewszH2SFisCPNPt7N41XkL8TwBAuT
MQY1VlnPVvw8To2j4fQlcySf3FxRvVWUh7nydN+b9Rc90zdYpAfyBtINsuJ2
hrWA/o5nNrRINjGmyXMkKgrpg6VGwGafe2BLMQzMADKJ1rNMkxbiDKwNHjbT
c0+yZWYGitOz5OTHfc+/f5BmPQte3pe5j544tqlgtQFDyT5Gj1Yv2YWyLE1V
SNHxv14BKhIW5X2NjXwz6kUKcJZ7qwU8GX4e+WKmWVibGbwdg9wiIevNpMi3
nPLZTbPbYAWs46M2FWOAfy3HydZY3b6xTiBB89kBh7HWxnoh3+k6828sOXoO
RbMfyuzg5P6triiSQXakOGNPgN5qjmO4sTs5mqvslq2Mp6ntbBfSYe2n/r0v
Fg4T2K2hmrbneKdgXFiOOzm5azbUVxlmVFugYTnZME7N0UxQPFOKaORgPRgn
S7wgTfZv+ERIvRjoDmndf1JvzSkhptzVWzdj3E/jW0okJNx2mFr2YO9KDJYG
2T2asnBkUrKyU/FH0IsemQybvgGFxOjvZNvW5kEqbwHvRiQws7bvB8wE3p8x
a6UQdyCuMAUPNPVxNKrWEzZtWhiDk5mJq2g7tLCOBH9dtyCbstxnNKvVgAFz
bz3HOURZMWZrwwQb6DFgEpNhAWvvjErArQuUMmbEkFJoATN35mmQR+LspEt3
WZxtDlFeThxXy8AHEE0s3M12lt+592KhhlKx8jOlp2fmYyAUs0C+29qSP/DW
Tt/L9EPIimI6zhKTeTcLcHVL2j8bGfTF83L/xpbEYbDWrDA3vMVJ8yOxwDoY
te1oGJOST2U2goyIx00eBEIEpbE98LqX1jcTtHeszySNB+4paSjMnoPl71tf
/P5sSGDNQ2vNVtbwzlu4b1ifO5FMO1suskRYLMsCcYLG0rubeDR7DtdZrktg
83NCKW5t0l0AG/4BuZPOyo6oDCJR4xzLUftDfRweIGUxzBNw9aIXSf4PYNLa
VLMiVsF3mescQM43fd+56QfS3QYOjgWpUmDePUNJe4uxecOkbBYJpaA7m/4i
L/p+ak4XI2ZEDpNnOeyojJUJ4rcEcy7Hzlxjj5YWfZsLzX3q7r34//XWjXgK
Om8MVz+7vWXpkNvzHKNxe3B60cBV+26wBiDBlYqDhRB1wFobIIiiMONm1isG
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
MJO5BVfkHtbk1EwGXmx7y2+zt2iZYA/62fZjuBNXP9JAejYWs7y3GHjutwct
+v0UsfvJhvV78UbyvlsTe31/7329sp/HurMX9oe7fXR8MtjK2Hz5/nDcGZPv
8nMWZuXg/fchWjZWsZe36dgrKtVynP8QE/tQ0aPlbvcURy11qWqnnKvfnfnS
uRDB//sp3PvPHnQpXE8Q/v9A4RxHW1pz/WDY2gmo/MxOkRUzRXdl49k//RWF
S0v+ghkonH6rn0JQOO9JP30//heF+y8K918U7r8o3H9RuP+icP9bKVw0zvbk
1M4uUvwR9fRtsDbINb2Vevt69RbLs5If7u9Pipk+fZlPTqsvyeBmscl0fR2F
3mfV+9G7X2zubo7ParkaBgd53htDNLeYhGPL2p/pUzYT1c+jdeDcLL+PHiNH
LUN295Duf/n3D39rj838wTP47qXhukra03Nt6abvGm7lW/6uZyEFfd+3vONZ
lKzybu277DCWzsvsanQa3FaGSkdjoICpI8A/3tODLsY4UeJUsRqPuxDEER1b
cWjj26WjzoYLHyuIN4CCgS13Nr5Tfxqq5pjNkzEUdt60YKNVXdEkL4tUmOnX
q52VH7rvidOB/uqZu3XW8ATwCNblDVBoNpnZA20Gk8R4vl5JFj2aV73b/urV
dnpyLjwpqaOwwk0TI1Lvto5kHiwxFP28Pw8FLb3vKfTq6iiaO7mf+yzaxm6U
efndvZ9mO4DF0ZPSozGPngIVYJca4yAHZ1mx5vhJ9SQfvQJuzDKlepTv/CTf
kHstrJGJn2mvjV5DtYVmuzrhftOstGJoUA68B89d721pQzTcc0am5qtGyfJ+
Qvt9niSqsXPwKpajiPy1bVWbszVbwXcXvqx/vRLprVhHMCaLtH0dv3ob35b3
/N1luV8Yc2ia6AuALTFOD3NrNdAXNtv5nSMxLx8LzCg/r1J+PlYP6SxPgpDe
lV2xe3ukzcIsGsG4bSNPZJeFh9iB1j1iHSxvzpahrINhKRp8vxaAzzlCsfSF
w5MvJUsPtqOr5gpOj7Ec4MFfbh/g36IX03HRQFeMnZ5/F2I587D2/xEggb68
k8U3bjZzdvM7u33Kd2P9Pk0iy8o1TynZ4jb4vhr1pKd5McnUw+0PJn8eJcLH
BTA2Mc3jan0ofhcm7E/lKJpfpvPJ5LTrzX4frvXvg+/f/2646CJmQxhkYUj/
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
KHlTBa9vFKt6sbjdIUB1aZ/gwI2sDeyrdGK9WLt/msT2/1IacS2Nzpc+d77U
fJZG0dWXbfy8Cd/VgktyK/xOU6OALOIEtPb91WbdR6viys1los1rofcvQwGx
u1iVw/pYE+72tGiH4HJn2t2Ha/M3b428v7jsC6sC8o8v/dJsn6bx8XoPBkPf
fqf3irDjlwiXLsm62Pvj7Ba7HJ/0vmmF8I9G/QvlNjfb48co/hYACn+pKe/P
RwykGhJORp0Y+4IkVMQRTT3W244XH9912+r/J9uq/QxxkvN2SHZsNzz5xtiL
wLF2movNpiRLqc7QZss0bgTU+TA4Rhl+6o4YeCi/F0eRd8kRx32v51K0PLzN
qoYXs91V7rPDTNugf3f1Bt38/JJu/s7pZus8/67L3JWU6dwUlHisPti63d+6
7X1bbnc8U1gjRZP3tJK4AEDRcJ+X8Z7vdqCnJ14IjxbLBNHpN874izHRv1x/
B+16WrwxqduXk/rMJ8VH2s1MB1UEhMnV1LOByYs0A08Jw5+QilfD7e4FQ114
ANa7vV0sdx8afsTzUpDIRUu0msHTd/qhVrbLfhuO3CRYXxblg1D2MSWUqz1K
hG2UGwm+b4OcbGCXo0cafbtmtRflNvJaTP2XYrrlYnK44tDQmj2+ak3iLXUy
qdT2FnR2l2y2MJD4IqHcsJfakIjU1FCMQcA4lpwJFdnmyGVCLTbAWHIGyZO2
0IBzQ/Win7lPbW+khlxZ3k7Joek6PR23anWpeJY8HE3M6zjY8i0L/olfu0zp
IozC4nasISe/Vq3rb3/d02Rq/+/p6fUq3rxcxT5fRRMKs33imcjoQlvrTXLa
q4O2lQ1itLmozWJF2Pct2+y5wrbcgu+RtEveDbQ+tClACT1/4c7nbXyquEG1
hcAzas2+HCKBIg5JAoS+1O7HKlz9WIWr5y766OKcdnnbnVU5dMz5KeP84fzt
HhdNlfHkWsIrS34knlBb93b5/TuMiOJXvlNL4lpg7vtlRAeN1lGTNqlw4UBz
rNMJDT6fu6ME67BOYXSXm6Rwzlb89vKExFnVH17tD3yoyWqb+2+2R6vtpeoL
7Qhub9sVIaNqD3S2aTXEHDmlna5/rTYFo4+b9W8ccRFg0fzrnYVvkG2y5lFD
kC2j4GLdb7tiPWeZ8fXhl8G1stk+5dfBebQVNe/u8NRrT5723CitdOsZ4+2W
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
wdoN9LoCAA==

-->

</rfc>

