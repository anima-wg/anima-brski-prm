<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.17 (Ruby 2.7.4) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc compact="yes"?>
<?rfc iprnotified="no"?>
<?rfc strict="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-anima-brski-prm-05" category="std" consensus="true" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="BRSKI-PRM">BRSKI with Pledge in Responder Mode (BRSKI-PRM)</title>

    <author initials="S." surname="Fries" fullname="Steffen Fries">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>steffen.fries@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="T." surname="Werner" fullname="Thomas Werner">
      <organization abbrev="Siemens">Siemens AG</organization>
      <address>
        <postal>
          <street>Otto-Hahn-Ring 6</street>
          <city>Munich</city>
          <code>81739</code>
          <country>Germany</country>
        </postal>
        <email>thomas-werner@siemens.com</email>
        <uri>https://www.siemens.com/</uri>
      </address>
    </author>
    <author initials="E." surname="Lear" fullname="Eliot Lear">
      <organization>Cisco Systems</organization>
      <address>
        <postal>
          <street>Richtistrasse 7</street>
          <city>Wallisellen</city>
          <code>CH-8304</code>
          <country>Switzerland</country>
        </postal>
        <phone>+41 44 878 9200</phone>
        <email>lear@cisco.com</email>
      </address>
    </author>
    <author initials="M." surname="Richardson" fullname="Michael C. Richardson">
      <organization>Sandelman Software Works</organization>
      <address>
        <email>mcr+ietf@sandelman.ca</email>
        <uri>http://www.sandelman.ca/</uri>
      </address>
    </author>

    <date year="2022"/>

    <area>Operations and Management</area>
    <workgroup>ANIMA WG</workgroup>
    

    <abstract>


<t>This document defines enhancements to bootstrapping a remote secure key infrastructure (BRSKI, <xref target="RFC8995"/>) to facilitate bootstrapping in domains featuring no or only timely limited connectivity between a pledge and the domain registrar.
It specifically targets situations, in which the interaction model changes from a pledge-initiator-mode, as used in BRSKI, to a pledge-responder-mode as described in this document.
To support both, BRSKI-PRM introduces a new registrar-agent component, which facilitates the communication between pledge and registrar during the bootstrapping phase.
For the establishment of a trust relation between pledge and domain registrar, BRSKI-PRM relies on the exchange of authenticated self-contained objects (signature-wrapped objects).
The defined approach is agnostic regarding the utilized enrollment protocol, deployed by the domain registrar to communicate with the Domain CA.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-ietf-anima-brski-prm/"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/anima-wg/anima-brski-prm"/>.</t>
    </note>


  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>
<t>BRSKI as defined in <xref target="RFC8995"/> specifies a solution for secure zero-touch (automated) bootstrapping of devices (pledges) in a (customer) site domain.
This includes the discovery of network elements in the customer site/domain and the exchange of security information necessary to establish trust between a pledge and the domain.</t>

<t>Security information about the customer site/domain, specifically the customer site/domain certificate, is exchanged utilizing voucher requests and voucher responses as defined in <xref target="RFC8366"/>.
These vouchers are signed objects, provided via the domain registrar to the pledge and originate from a Manufacturer's Authorized Signing Authority (MASA).</t>

<t>BRSKI addresses scenarios in which the pledge acts as client for the bootstrapping and is the initiator of the bootstrapping (this document refers to the approach as pledge-initiator-mode).
In industrial environments the pledge may behave as a server and thus does not initiate the bootstrapping with the domain registrar.
In this scenarios it is expected that the pledge will be triggered to generate requests to be bootstrapped in the customer site/domain (this document refers to the approach as pledge-responder-mode).
For this, an additional component is introduced acting as an agent for the domain registrar (registrar-agent) towards the pledge.
This may be a functionality of a commissioning or configuration tool or it may be even co-located with the registrar.</t>

<t>In contrast to BRSKI the registrar-agent facilitates the data exchange with the pledge and provides/retrieves data objects to/from the domain registrar.
For the interaction with the domain registrar the registrar-agent will use existing BRSKI <xref target="RFC8995"/> endpoints.</t>

<t>The term endpoint used in the context of this document is similar to resources in CoAP <xref target="RFC7252"/> and also in HTTP <xref target="RFC9110"/>. It is not used to describe a device. Endpoints are accessible via .well-known URIs.</t>

<t>The goal is to enhance BRSKI to support pledges in responder mode.
This is addressed by</t>

<t><list style="symbols">
  <t>introducing the registrar-agent as new component to facilitate the communication between the pledge and the registrar, if the pledge is in responder mode (acting as server).</t>
  <t>handling the security on application layer only to enable application of arbitrary transport means between the pledge and the domain registrar, by keeping the registrar-agent in the communication path.
Examples may be connectivity via IP based networks (wired or wireless) but also connectivity via Bluetooth or NFC between the pledge and the registrar-agent.</t>
  <t>allowing to utilize credentials different from the pledge's IDevID to establish a TLS connection to the domain registrar, which is necessary in case of using a registrar-agent.</t>
  <t>defining the interaction (data exchange and data objects) between a pledge acting as server and a registrar-agent and the domain registrar.</t>
</list></t>

<t>For the enrollment of devices BRSKI relies on EST <xref target="RFC7030"/> to request and distribute customer site/domain specific device certificates.
EST in turn relies on a binding of the certification request to an underlying TLS connection between the EST client and the EST server.
According to BRSKI the domain registrar acts as EST server and is also acting as registration authority (RA) for its domain.
To utilize the EST server endpoints on the domain-registrar, the registrar-agent defined in this document will act as client towards the domain registrar.
The registrar-agent will also act as client when communicating with the pledge in responder mode. 
Here, TLS with server-side, certificate-based authentication is not directly applicable, as the pledge only possesses an IDevID certificate, which does not contain a subject alternative name (SAN) for the customer site/domain and does also not contain a TLS server flag. 
This is one reason for relying on higher layer security by using signature wrapped objects for the exchange between the pledge and the registrar agent. 
A further reason is the application on different transports, for which TLS may not be available, like Bluetooth or NFC.
Instead of using TLS to provide secure transport between the pledge and the registrar-agent, BRSKI-PRM will rely on an additional wrapping signature of the enrollment request by the pledge. For EST <xref target="RFC7030"/> the registrar then needs to do additional pre-processing by verifying this signature, which is not present in EST.</t>

</section>
<section anchor="terminology"><name>Terminology</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCPÂ 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<t>This document relies on the terminology defined in <xref target="RFC8995"/>, section 1.2.
The following terms are defined additionally:</t>

<dl>
  <dt>authenticated self-contained object:</dt>
  <dd>
    <t>Describes an object, which is cryptographically bound to the end entity (EE) certificate (IDevID certificate or LDEVID certificate).
The binding is assumed to be provided through a digital signature of the actual object using the corresponding private key of the EE certificate.</t>
  </dd>
  <dt>CA:</dt>
  <dd>
    <t>Certification authority, issues certificates.</t>
  </dd>
  <dt>Commissioning tool:</dt>
  <dd>
    <t>Tool to interact with devices to provide configuration data</t>
  </dd>
  <dt>CSR:</dt>
  <dd>
    <t>Certificate Signing Request
EE:</t>
  </dd>
  <dt/>
  <dd>
    <t>End entity</t>
  </dd>
  <dt>mTLS:</dt>
  <dd>
    <t>Mutual authenticated Transport Layer Security.</t>
  </dd>
  <dt>on-site:</dt>
  <dd>
    <t>Describes a component or service or functionality available in the customer site/domain.</t>
  </dd>
  <dt>off-site:</dt>
  <dd>
    <t>Describes a component or service or functionality not available in the customer site/domain.
This may be a central site or a cloud service, to which only a temporary connection is available, or which is in a different administrative domain.</t>
  </dd>
  <dt>PER:</dt>
  <dd>
    <t>Pledge-enrollment-request is a signature wrapped CSR, signed by the pledge that requests to enroll in a domain</t>
  </dd>
  <dt>POP:</dt>
  <dd>
    <t>Proof of possession (of a private key)</t>
  </dd>
  <dt>POI:</dt>
  <dd>
    <t>Proof of identity</t>
  </dd>
  <dt>PVR:</dt>
  <dd>
    <t>Pledge-voucher-request is a voucher request signed by the pledge that requests to be part of a domain</t>
  </dd>
  <dt>RA:</dt>
  <dd>
    <t>Registration authority, an optional system component to which a CA delegates certificate management functions such as authorization checks.</t>
  </dd>
  <dt>RER:</dt>
  <dd>
    <t>Registrar-enrollment-request is the PER send to the CA by the registrar</t>
  </dd>
  <dt>RVR:</dt>
  <dd>
    <t>Registrar-voucher-request is a request containing the PVR sent to the MASA</t>
  </dd>
</dl>

</section>
<section anchor="scope-of-solution"><name>Scope of Solution</name>

<section anchor="sup-env"><name>Supported Environments and Use Case Examples</name>

<t>BRSKI-PRM is applicable to environments where pledges may have different behavior: pledge-responder-mode, or pledges may have no direct connection to the domain registrar. Either way pledges are expected to be managed by the same registrar.
This can be motivated by pledges deployed in environments not yet connected to the operational customer site/domain network, e.g., at construction time. 
Another environment relates to the assembly of cabinets, which are prepared in advance to be installed on a customer site/domain. 
As there is no direct connection to the registrar available in these environments the solution specified allows the pledges to act in a server role so they can be triggered for bootstrapping e.g., by a commissioning tool. As BRSKI focuses on the pledge in a client role, initiating the bootstrapping (pledge-initiator-mode), BRSKI-PRM defines pledges acting as a server (pledge-responder-mode) responding to PVR and PER and consumption of the results.</t>

<t>The following examples motivate support of BRSKI-PRM to support pledges acting as server as well as pledges with limited connectivity to the registrar.</t>

<t>While BRSKI-PRM defines support for pledges in responder mode, there may be pledges, which can act in both modes, initiator and responder. 
In these cases BRSKI-PRM can be combined with BRSKI as defined in <xref target="RFC8995"/> or BRSKI-AE <xref target="I-D.ietf-anima-brski-ae"/> to allow for more bootstrapping flexibility. 
Once a pledge with such combined functionality has been bootstrapped, it may act as client for enrollment or re-enrollment of further certificates needed, e.g., using the enrollment protocol of choice. 
If it still acts as server, the defined endpoints can be used to trigger a PER for further certificates.</t>

<section anchor="building-automation"><name>Building Automation</name>

<t>In building automation a typical use case exists where a detached building (or a cabinet) or the basement of a building is equipped with sensors, actuators and controllers, but with only limited or no connection to the central building management system.
This limited connectivity may exist during installation time or also during operation time.
During the installation in the basement, a service technician collects the device specific information from the basement network and provides them to the central building management system, e.g., using a laptop or a mobile device to transport the information.
A domain registrar may be part of the central building management system and already be operational in the installation network.
The central building management system can then provide operational parameters for the specific devices in the basement.
This operational parameters may comprise values and settings required in the operational phase of the sensors/actuators, among them a certificate issued by the operator to authenticate against other components and services.
These operational parameters are then provided to the devices in the basement facilitated by the service technician's laptop.</t>

</section>
<section anchor="infrastructure-isolation-policy"><name>Infrastructure Isolation Policy</name>

<t>This refers to any case in which the network infrastructure is normally isolated from the Internet as a matter of policy, most likely for security reasons.
In such a case, limited access to a domain registrar may be allowed in carefully controlled short periods of time, for example when a batch of new devices are deployed, but prohibited at other times.</t>

</section>
<section anchor="less-operational-security-in-the-target-domain"><name>Less Operational Security in the Target-Domain</name>

<t>The registration authority (RA) performing the authorization of a certificate request is a critical PKI component and therefore requires higher operational security than other components utilizing the issued certificates .
CAs may also require higher security in the registration procedures. 
There may be situations in which the customer site/domain does not offer enough security to operate a RA/CA and therefore this service is transferred to a backend that offers a higher level of operational security.</t>

</section>
</section>
<section anchor="limitations"><name>Limitations</name>

<t>The mechanism described in this document presume the availability of the pledge to communicate with the registrar-agent.<br />
This may not be possible in constrained environments where, in particular, power must be conserved.<br />
In these situations, it is anticipated that the transceiver will be powered down most of the time.<br />
This presents a rendezvous problem: the pledge is unavailable for certain periods of time, and the registrar-agent is similarly presumed to be unavailable for certain periods of time.</t>

</section>
</section>
<section anchor="req-sol"><name>Requirements Discussion and Mapping to Solution-Elements</name>

<t>Based on the intended target environment described in <xref target="sup-env"/> and the application examples described in <xref target="sup-env"/> the following requirements are derived to support bootstrapping of pledges in responder mode (acting as server).</t>

<t><list style="symbols">
  <t>To facilitate the communication between a pledge in responder mode and registrar, additional functionality is needed either on the registrar (if the registrar needs to interact with pledge in responder mode directly) or as a stand-alone component. 
This component acts as an agent of the registrar to trigger the pledge to generate requests for voucher and enrollment. These requests are than to be provided by the so called registrar-agent to the registrar.
This requires the definition of endpoints on the pledge.</t>
  <t>The communication between the registrar-agent and the pledge <bcp14>MUST</bcp14> not rely on transport layer security (TLS) to support also other technology stacks (e.g., BTLE). 
Therefore authenticated self-contained objects are required.</t>
  <t>The registrar-agent must be authenticated by the registrar as a component, acting on behalf of the registrar. 
In addition the registrar must be able to verify, which registrar-agent was in direct contact with the pledge.</t>
  <t>The pledge cannot get the assertion with value "proximity" in the voucher, as it was not in direct contact with the registrar for bootstrapping. 
Therefore the "agent-proximity" assertion value is necessary for distinguishing assertions the MASA can state.</t>
</list></t>

<t>At least the following properties are required for the voucher request and response processing as well as the enrollment:</t>

<t><list style="symbols">
  <t>Proof of Identity (POI): provides data-origin authentication of a data object, e.g., a voucher request or an enrollment request, utilizing an existing IDevID.
Certificate updates may utilize the certificate that is to be updated.</t>
  <t>Proof of Possession (POP): proves that an entity possesses and controls the private key corresponding to the public key contained in the  certification request, typically by adding a signature using the private key to the certification request.</t>
</list></t>

<t>Solution examples based on existing technology are provided with the focus on existing IETF RFCs:</t>

<t><list style="symbols">
  <t>Voucher requests and responses as used in <xref target="RFC8995"/> already provide both, POP and POI, through a digital signature to protect the integrity of the voucher, while the corresponding signing certificate contains the identity of the signer.</t>
  <t>Certification requests are data structures containing the information from a requester for a CA to create a certificate. 
The certification request format in BRSKI is PKCS#10 <xref target="RFC2986"/>.
In PKCS#10, the structure is signed to ensure integrity protection and proof of possession of the private key of the requester that corresponds to the contained public key.
In the application examples, this POP alone is not sufficient. POI is also required for the certification request and therefore needs to be additionally bound to the existing credential of the pledge (IDevID).
This binding supports the authorization decision for the certification request through a proof of identity (POI).
The binding of data origin authentication or POI to the certification request may be provided directly by with the certification request.
While BRSKI uses the binding to TLS, BRSKI-PRM aims at an additional signature of the PKCS#10  using existing credentials on the pledge (IDevID). This ensures independence of the selected transport.</t>
</list></t>

</section>
<section anchor="architecture"><name>Architectural Overview and Communication Exchanges</name>

<t>For BRSKI with pledge in responder mode, the base system architecture defined in BRSKI <xref target="RFC8995"/> is enhanced to facilitate the new use cases.
The pledge-responder-mode allows delegated bootstrapping using a registrar-agent instead of a direct connection between the pledge and the domain registrar.
The communication model between registrar-agent and pledge in this document assumes that the pledge is acting as server and responds to requests.</t>

<t>Necessary enhancements to support authenticated self-contained objects for certificate enrollment are kept at a minimum to enable reuse of already defined architecture elements and interactions.</t>

<t>For the authenticated self-contained objects used for the certification request, BRSKI-PRM relies on the defined message wrapping mechanisms of the enrollment protocols stated in <xref target="req-sol"/> above.</t>

<t>The security used within the document for bootstrapping objects produced or consumed by the pledge bases on JOSE <xref target="RFC7515"/>. In constraint environments it may provided based on COSE <xref target="RFC8152"/>.</t>

<t>An abstract overview of the BRSKI-PRM protocol can be found in  <xref target="BRSKI-PRM-abstract"/>.</t>

<section anchor="uc2"><name>Pledge-responder-mode (PRM): Registrar-agent Communication with Pledges</name>

<t>To support mutual trust establishment between the domain registrar and pledges not directly connected to the customer site/domain, this document specifies the exchange of authenticated self-contained objects (the voucher request/response as known from BRSKI and the enrollment request/response as introduced by BRSKI-PRM) with the help of a registrar-agent.
This allows independence from protection provided by the utilized transport protocol.</t>

<t>The registrar-agent may be implemented as an integrated functionality of a commissioning tool or be co-located with the registrar itself.
This leads to extensions of the logical components in the BRSKI architecture as shown in <xref target="uc2figure"/>. 
Note that the Join Proxy is neglected in the figure as not needed by the registrar-agent.
The registrar-agent interacts with the pledge to transfer the required data objects for bootstrapping, which are then also exchanged between the registrar-agent and the domain registrar.
The addition of the registrar-agent influences the sequences of the data exchange between the pledge and the domain registrar as described in <xref target="RFC8995"/>.
To enable reuse of BRSKI defined functionality as much as possible, BRSKI-PRM:</t>

<t><list style="symbols">
  <t>uses existing endpoints were the required functionality is provided</t>
  <t>enhances existing with new supported media types, e.g., for JWS voucher</t>
  <t>defines new endpoints were additional functionality is required, e.g., for wrapped certification request.</t>
</list></t>

<figure title="Architecture overview using registrar-agent" anchor="uc2figure"><artwork align="left"><![CDATA[
                            +------------------------+
   +---- Drop Ship ---------| Vendor Service         |
   |                        +------------------------+
   |                        | M anufacturer|         |
   |                        | A uthorized  |Ownership|
   |                        | S igning     |Tracker  |
   |                        | A uthority   |         |
   |                        +--------------+---------+
   |                                       ^
   |                                       |  BRSKI-
   |    BRSKI-PRM                          |   MASA
   |          .............................|.........
   V          .                            |        .
+-------+     .  +-----------+       +-----v-----+  .
|       |     .  |           |       |           |  .
|Pledge |     .  | Registrar |       | Domain    |  .
|       |     .  | Agent     |       | Registrar |  .
|       <-------->...........<-------> (PKI RA)  |  .
|       |     .  | LDevID    |       |           |  .
|       |     .  +-----------+       +-----+-----+  .
|IDevID |     .                            |        .
|       |     .         +------------------+-----+  .
+-------+     .         | Key Infrastructure     |  .
              .         | (e.g., PKI Certificate |  .
              .         |       Authority)       |  .
              .         +------------------------+  .
              .......................................
                       "Domain" components
]]></artwork></figure>

<t>For authentication to the domain registrar, the registrar-agent uses its LDevID(RegAgt).
The provisioning of the registrar-agent LDevID is out of scope for this document, but may be done in advance using a separate BRSKI run or by other means like configuration.<br />
It is recommended to use short lived registrar-agent LDevIDs in the range of days or weeks as outlined in <xref target="sec_cons_reg-agt"/>.</t>

<t>If a registrar detects a request that originates from a registrar-agent it is able to switch the operational mode from BRSKI to BRSKI-PRM.
This may be supported by a specific naming in the SAN (subject alternative name) component of the LDevID(RegAgt) certificate. 
Alternatively, the domain may feature an own issuing CA for registrar-agent LDevID certificates. 
This allows the registrar to detect registrar-agents based on the issuing CA.</t>

<t>The following list describes the components in a (customer) site domain:</t>

<t><list style="symbols">
  <t>Pledge: The pledge is expected to respond with the necessary data objects for bootstrapping to the registrar-agent.
The protocol used between the pledge and the registrar-agent is assumed to be HTTP in the context of this document.
Other protocols may be used like CoAP, Bluetooth, or NFC, but are out of scope of this document.
A pledge acting as a server during bootstrapping leads to some differences to BRSKI:  <list style="symbols">
      <t>Discovery of the pledge by the registrar-agent must be possible.</t>
      <t>As the registrar-agent must be able to request data objects for bootstrapping of the pledge, the pledge must offer corresponding endpoints.</t>
      <t>The registrar-agent may provide additional data to the pledge in the context of the voucher triggering request, to make itself visible to the domain registrar.</t>
      <t>Order of exchanges in the call flow may be different as the registrar-agent collects both, PVR and PER, at once and provides them to the registrar.
This approach may also be used to perform a bulk bootstrapping of several devices.</t>
      <t>The data objects utilized for the data exchange between the pledge and the registrar are self-contained authenticated objects (signature-wrapped objects).</t>
    </list></t>
  <t>Registrar-agent: provides a communication path to exchange data objects between the pledge and the domain registrar.
The registrar-agent brokers in situations, in which the domain registrar is not directly reachable by the pledge, either due to a different technology stack or due to missing connectivity.
The registrar-agent triggers a pledge to create bootstrapping artifacts such as voucher-request and enrollment-request on one or multiple pledges and performs a (bulk) bootstrapping based on the collected data.
The registrar-agent is expected to possess information of the domain registrar (i.e., LDevID(Reg) certificate, LDevID(CA) certificate, address), either by configuration or by using the discovery mechanism defined in <xref target="RFC8995"/>.
There is no trust assumption between the pledge and the registrar-agent as only authenticated self-contained objects are used, which are transported via the registrar-agent and provided either by the pledge or the registrar.
The trust assumption between the registrar-agent and the registrar is based on the LDevID of the registrar-agent, provided by the PKI responsible for the domain.<br />
This allows the registrar-agent to authenticate towards the registrar, e.g., in a TLS handshake.
Based on this, the registrar is able to distinguish a pledge from a registrar-agent during the session establishment and also to verify that the registrar-agent is authorized to perform the bootstrapping of the distinct pledge.</t>
  <t>Join Proxy (not shown): same functionality as described in <xref target="RFC8995"/> if needed.
Note that a registrar-agent may use a join proxy to facilitate the TLS connection to the registrar, in the same way that a BRSKI pledge would use a join proxy. This is useful in cases where the registrar-agent does not have full IP connectivity via the domain network, or cases where it has no other means to locate the registrar on the network.</t>
  <t>Domain Registrar: In general the domain registrar fulfills the same functionality regarding the bootstrapping of the pledge in a (customer) site domain by facilitating the communication of the pledge with the MASA service and the domain PKI service.
In contrast to <xref target="RFC8995"/>, the domain registrar does not interact with a pledge directly but through the registrar-agent.
The registrar detects if the bootstrapping is performed by the pledge directly or by the registrar-agent.
The manufacturer provided components/services (MASA and Ownership tracker) are used as defined in <xref target="RFC8995"/>.
For issuing a voucher, the MASA may perform additional checks on a voucher-request, to issue a voucher indicating agent-proximity instead of (registrar-)proximity.</t>
</list></t>

</section>
<section anchor="agt_prx"><name>Agent-Proximity Assertion</name>

<t>"Agent-proximity" is a weaker assertion then "proximity".
It is defined as additional assertion type in <xref target="I-D.ietf-anima-rfc8366bis"/>
"agent-proximity" is a statement, that the proximity registrar certificate was provided via the registrar-agent as defined in <xref target="exchanges_uc2"/> and not directly to the pledge.
This can be verified by the registrar and also by the MASA during the voucher-request processing.
Note that at the time of creating the voucher-request, the pledge cannot verify the registrar's LDevID(Reg) certificate and has no proof-of-possession of the corresponding private key for the certificate. 
The pledge therefore accepts the LDevID(Reg) provisionally until it receives the voucher as described in  <xref target="exchanges_uc2_3"/>.
See also <xref target="RFC8995"/> "PROVISIONAL accept of server cert".</t>

<t>Trust handover to the domain is established via the "pinned-domain-certificate" in the voucher.</t>

<t>In contrast, "proximity" provides a statement, that the pledge was in direct contact with the registrar and was able to verify proof-of-possession of the private key in the context of the TLS handshake.
The provisionally accepted LDevID(Reg) certificate can be verified after the voucher has been processed by the pledge. 
As the returned voucher includes an additional signature by the registrar, the pledge can also verify that the registrar possesses the corresponding private key.</t>

</section>
<section anchor="pledge_ep"><name>Behavior of Pledge in Pledge-Responder-Mode</name>

<t>In contrast to BRSKI the pledge acts as server.
It is triggered by the registrar-agent for the generation of the PVR and PER as well as for the processing of the responses and the generation of status information.
Due to the use of the registrar-agent, the interaction with the domain registrar is changed as shown in <xref target="exchangesfig_uc2_1"/>.
To enable interaction with the registrar-agent, the pledge provides endpoints using the BRSKI defined endpoints based on the "/.well-known/brski" URI tree.</t>

<t>The following endpoints are defined for the <em>pledge</em> in this document. 
The URI path begins with "http://www.example.com/.well-known/brski" followed by a path-suffix that indicates the intended operation.</t>

<figure title="Endpoints on the pledge" anchor="eppfigure"><artwork align="left"><![CDATA[
Operations and their corresponding URIs:
+------------------------+----------------------------+---------+
| Operation              |Operation path              | Details |
+========================+============================+=========+
| Trigger pledge-voucher-| /pledge-voucher-request    | Section |
| request creation       |                            | 5.5.1   |
| Returns PVR            |                            |         |
+------------------------+----------------------------+---------+
| Trigger pledge-        | /pledge-enrollment-request | Section |
| enrollment-request     |                            | 5.5.1   |
| Returns PER            |                            |         |
+------------------------+----------------------------+---------+
| Provide voucher to     | /pledge-voucher            | Section |
| pledge                 |                            | 5.5.3   |
| Returns                |                            |         |
| pledge-voucher-status  |                            |         |
+------------------------+----------------------------+---------+
| Provide enrollment     | /pledge-enrollment         | Section |
| response to pledge     |                            | 5.5.3   |
| Returns pledge-        |                            |         |
| enrollment-status      |                            |         |
+------------------------+----------------------------+---------+
| Provide CA certs to    | /pledge-CACerts            | Section |
| pledge                 |                            | 5.5.3   |
+------------------------+----------------------------+---------+
| Query bootstrapping    | /pledge-bootstrap-status   | Section |
| status of pledge       |                            | 5.5.5   |
+------------------------+----------------------------+---------+
]]></artwork></figure>

</section>
<section anchor="behavior-of-registrar-agent"><name>Behavior of Registrar-Agent</name>

<t>The registrar-agent is a new component in the BRSKI context.
It provides connectivity between the pledge and the domain registrar and reuses the endpoints of the domain registrar side already specified in <xref target="RFC8995"/>.
It facilitates the exchange of data between the pledge and the domain registrar, which are the voucher request/response, the enrollment request/response, as well as related status information.
For the communication with the pledge the registrar-agent utilizes communication endpoints provided by the pledge.
The transport in this specification is based on HTTP but may also be done using other transport mechanisms.
This new component changes the general interaction between the pledge and the domain registrar as shown in <xref target="uc2figure"/>.</t>

<t>The registrar-agent is expected to already possess an LDevID(RegAgt) to authenticate to the domain registrar.
The registrar-agent will use this LDevID(RegAgt) when establishing the TLS session with the domain registrar for TLS client authentication.
The LDevID(RegAgt) certificate <bcp14>MUST</bcp14> include a SubjectKeyIdentifier (SKID), which is used as reference in the context of an agent-signed-data object as defined in <xref target="exchanges_uc2_1"/>.
Note that this is an additional requirement for issuing the certificate, as <xref target="IEEE-802.1AR"/> only requires the SKID to be included for intermediate CA certificates.
In BRSKI-PRM, the SKID is used in favor of a certificate fingerprint to avoid additional computations.</t>

<t>Using an LDevID for TLS client authentication is a deviation from <xref target="RFC8995"/>, in which the pledge's IDevID credential is used to perform TLS client authentication.
The use of the LDevID(RegAgt) allows the domain registrar to distinguish, if bootstrapping is initiated from a pledge or from a registrar-agent and adopt the internal handling accordingly.
As BRSKI-PRM uses authenticated self-contained data objects between the pledge and the domain registrar, the binding of the pledge identity to the requests is provided by the data object signature employing the pledge's IDevID.
The objects exchanged between the pledge and the domain registrar used in the context of this specifications are JOSE objects.</t>

<t>In addition to the LDevID(RegAgt), the registrar-agent is provided with the product-serial-numbers of the pledges to be bootstrapped.
This is necessary to allow the discovery of pledges by the registrar-agent using mDNS.
The list may be provided by administrative means or the registrar agent may get the information via an interaction with the pledge. For instance, <xref target="RFC9238"/> describes scanning of a QR code, the product-serial-number would be initialized from the 12N B005 Product Serial Number.</t>

<t>According to <xref target="RFC8995"/> section 5.3, the domain registrar performs the pledge authorization for bootstrapping within his domain based on the pledge voucher-request object.</t>

<t>The following information must therefore be available at the registrar-agent:</t>

<t><list style="symbols">
  <t>LDevID(RegAgt): own operational key pair.</t>
  <t>LDevID(reg) certificate: certificate of the domain registrar.</t>
  <t>Serial-number(s): product-serial-number(s) of pledge(s) to be bootstrapped.</t>
</list></t>

<section anchor="discovery_uc2_reg"><name>Discovery of Registrar by Registrar-Agent</name>

<t>The discovery of the domain registrar may be done as specified in <xref target="RFC8995"/> with the
deviation that it is done between the registrar-agent and the domain registrar.
Alternatively, the registrar-agent may be configured with the address of the domain registrar and the certificate of the domain registrar.</t>

</section>
<section anchor="discovery_uc2_ppa"><name>Discovery of Pledge by Registrar-Agent</name>

<t>The discovery of the pledge by registrar-agent should be done by using DNS-based Service Discovery <xref target="RFC6763"/> over Multicast DNS <xref target="RFC6762"/> to discover the pledge. The pledge constructs a local host name based on device local information (product-serial-number), which results in "product-serial-number._brski-pledge._tcp.local".</t>

<t>The registrar-agent <bcp14>MAY</bcp14> use</t>

<t><list style="symbols">
  <t>"product-serial-number._brski-pledge._tcp.local", to discover a specific pledge, e.g., when connected to a local network.</t>
  <t>"_brski-pledge._tcp.local" to get a list of pledges to be bootstrapped.</t>
</list></t>

<t>To be able to detect the pledge using mDNS, network connectivity is required. For Ethernet it is provided by simply connecting the network cable. For WIFI networks, connectivity can be provided by using a pre-agreed SSID for bootstrapping. The same approach can be used by 6LoWPAN/mesh using a pre-agreed PAN ID. How to gain network connectivity is out of scope of this document.</t>

</section>
</section>
<section anchor="exchanges_uc2"><name>Bootstrapping Data Objects and Corresponding Exchanges</name>

<t>The interaction of the pledge with the registrar-agent may be accomplished using different transport means (protocols and or network technologies).
For this document the usage of HTTP is targeted as in BRSKI.
Alternatives may be CoAP, Bluetooth Low Energy (BLE), or Nearfield Communication (NFC).
This requires independence of the exchanged data objects between the pledge and the registrar from transport security.
These transport means may differ from, and are independent from, the ones used between the registrar-agent and the registrar.
Therefore, authenticated self-contained objects (here: signature-wrapped objects) are applied in the data exchange between the pledge and the registrar.</t>

<t>The registrar-agent provides the domain-registrar certificate (LDevID(Reg) certificate) to the pledge to be included into the "agent-provided-proximity-registrar-certificate" leaf of the PVR.
This enables the registrar to verify, that it is the target registrar for handling the request.
The registrar certificate may be configured at the registrar-agent or may be fetched by the registrar-agent based on a prior TLS connection establishment with the domain registrar.
In addition, the registrar-agent provides agent-signed-data containing the product-serial-number in the body, signed with the LDevID(RegAgt).
This enables the registrar to verify and log, which registrar-agent was in contact with the pledge, when verifying the PVR.
Optionally the registrar-agent may provide its LDevID(RegAgt) certificate (and optionally also the issuing CA certificate) to the pledge to be used in the "agent-sign-cert" component of the PVR. If contained, the LDevID(RegAgt) certificate <bcp14>MUST</bcp14> be the first certificate in the array.
Note, this may be omitted in constraint environments to save bandwidth between the registrar-agent and the pledge.
If not contained, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate based on the SubjectKeyIdentifier (SKID) in the header of the agent-signed-data of the PVR.
The registrar includes the LDevID(RegAgt) certificate information into the RVR if the PVRs contains the assertion of "agent-proximity".</t>

<t>The MASA in turn verifies the LDevID(Reg) certificate is included in the PVR (prior-signed-voucher-request) in the "agent-provided-proximity-registrar-certificate" leaf and may assert in the voucher "verified" or "logged" instead of "proximity", as there is no direct connection between the pledge and the registrar. 
In addition, the MASA can provide the assertion "agent-proximity" as following.
If the LDevID(RegAgt) certificate information is contained in the "agent-sign-cert" component of the RVR, the MASA can verify the signature of the agent-signed-data contained in the prior-signed-voucher-request.
If both can be verified successfully, the MASA can assert "agent-proximity" in the voucher. Otherwise, it may assert "verified" or "logged". 
Depending on the MASA verification policy, it may also respond with a suitable 4xx or 5xx status code as described in section 5.6 of <xref target="RFC8995"/>.<br />
The voucher can then be supplied via the registrar to the registrar-agent.</t>

<t><xref target="exchangesfig_uc2_all"/> provides an overview of the exchanges detailed in the following sub sections.</t>

<figure title="Overview pledge-responder-mode exchanges" anchor="exchangesfig_uc2_all"><artwork align="left"><![CDATA[
+--------+  +-----------+    +-----------+   +--------+   +---------+
| Pledge |  | Registrar |    | Domain    |   | Domain |   | Vendor  |
|        |  | Agent     |    | Registrar |   | CA     |   | Service |
|        |  | (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+--------+  +-----------+    +-----------+   +--------+   +---------+
     |              |                  |              |   Internet |
/* discover pledge */
     | mDNS query   |                  |              |            |
     |<-------------|                  |              |            |
     |------------->|                  |              |            |
     |              |                  |              |            |
/* trigger PVR and PER generation */
     |<- vTrigger --|                  |              |            |
     |-Voucher-Req->|                  |              |            |
     |              |                  |              |            |
     |<- eTrigger --|                  |              |            |
     |- Enroll-Req->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide PVR to infrastructure */
     |              |<------ TLS ----->|              |            |
     |              |          [Reg-Agt authenticated |            |
     |              |           and authorized?]      |            |
     |              |-- Voucher-Req -->|              |            |
     |              |          [Reg-Agt authorized?]  |            |
     |              |          [accept device?]       |            |
     |              |          [contact vendor]       |            |
     |              |                  |------- Voucher-Req ------>|
     |              |                  |           [extract DomainID]
     |              |                  |           [update audit log]
     |              |                  |<-------- Voucher ---------|
     |              |<---- Voucher ----|              |            |
     |              |                  |              |            |
/* provide PER to infrastructure */
     |              |-- Enroll-Req --->|              |            |
     |              |                  |- Cert-Req -->|            |
     |              |                  |<-Certificate-|            |
     |              |<-- Enroll-Resp --|              |            |
     |              |                  |              |            |
/* query cACerts from infrastructure */
     |              |-- cACerts-Req -->|              |            |
     |              |<- cACerts-Resp --|              |            |
     ~              ~                  ~              ~            ~
/* provide voucher and certificate and collect status info */
     |<-- Voucher --|                  |              |            |
     |-- vStatus -->|                  |              |            |
     |<-- cACerts --|                  |              |            |
     |<-Enroll-Resp-|                  |              |            |
     |-- eStatus -->|                  |              |            |
     ~              ~                  ~              ~            ~
/* provide voucher status and enroll status to registrar */
     |              |<------ TLS ----->|              |            |
     |              |----  vStatus --->|              |            |
     |              |                  |-- req. device audit log ->|
     |              |                  |<---- device audit log ----|
     |              |           [verify audit log]
     |              |                  |              |            |
     |              |----  eStatus --->|              |            |
     |              |                  |              |            |
]]></artwork></figure>

<t>The following sub sections split the interactions between the different components into:</t>

<t><list style="symbols">
  <t><xref target="exchanges_uc2_1"/> describes data exchanged between the registrar-agent and the pledge.</t>
  <t><xref target="exchanges_uc2_2"/> describes data exchanged between the registrar-agent and the registrar and also the interaction of the registrar with the MASA and the domain CA.</t>
  <t><xref target="exchanges_uc2_3"/> describes data exchanged between the registrar-agent and the pledge including the status information.</t>
  <t><xref target="exchanges_uc2_4"/> describes the status handling addresses the exchanges between the registrar-agent and the registrar.</t>
</list></t>

<section anchor="exchanges_uc2_1"><name>Request Objects Acquisition by Registrar-Agent from Pledge</name>

<t>The following description assumes that the registrar-agent already discovered the pledge.
This may be done as described in <xref target="discovery_uc2_ppa"/> based on mDNS.</t>

<t>The focus is on the exchange of signature-wrapped objects using endpoints defined for the pledge in <xref target="pledge_ep"/>.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Pledge: possesses IDevID</t>
  <t>Registrar-agent: possesses/trusts IDevID CA certificate and an own LDevID(RegAgt) credential for the registrar domain.
In addition, the registrar-agent <bcp14>MUST</bcp14> know the product-serial-number(s) of the pledge(s) to be bootstrapped. 
The registrar-agent <bcp14>MAY</bcp14> be provided with the product-serial-number in different ways:
  <list style="symbols">
      <t>configured, e.g., as a list of pledges to be bootstrapped via QR code scanning</t>
      <t>discovered by using standard approaches like mDNS as described in <xref target="discovery_uc2_ppa"/></t>
      <t>discovered by using a vendor specific approach, e.g., RF beacons
The registrar-agent <bcp14>SHOULD</bcp14> have a synchronized time.</t>
    </list></t>
  <t>Registrar: possesses/trusts IDevID CA certificate and an own LDevID(Reg) credential.</t>
</list></t>

<figure title="Request collection (registrar-agent - pledge)" anchor="exchangesfig_uc2_1"><artwork align="left"><![CDATA[
+--------+                             +-----------+
| Pledge |                             | Registrar |
|        |                             | Agent     |
|        |                             | (RegAgt)  |
+--------+                             +-----------+
    |                                        |-create
    |                                        | agent-signed-data
    |<--- trigger pledge-voucher-request ----|
    |-agent-provided-proximity-registrar-cert|
    |-agent-signed-data                      |
    |-agent-sign-cert (optional)             |
    |                                        |
    |----- pledge-voucher-request ---------->|-store PVR
    |                                        |  
    |<----- trigger enrollment request ------|
    |       (empty)                          |
    |                                        |
    |------ pledge-enrollment-request ------>|-store (PER)
    |                                        | 
]]></artwork></figure>

<t>Note that the registrar-agent may trigger the pledge for the PVR or the PER or both. It is expected that this will be aligned with a service technician workflow doing the pledge installation.</t>

<t>Triggering the pledge to create the PVR is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-voucher-request".</t>

<t>The registrar-agent PVR trigger Content-Type header is: <spanx style="verb">application/json</spanx>.
It defines a JSON document to provide three parameter:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: base64-encoded LDevID(Reg) TLS certificate.</t>
  <t>agent-signed-data: base64-encoded JWS-object.</t>
  <t>agent-sign-cert: array of base64-encoded certificate data (optional).</t>
</list></t>

<t>The the trigger for the pledge to create a PVR is depicted in the following figure:</t>

<figure title="Representation of trigger to create PVR" anchor="pavrt"><artwork align="left"><![CDATA[
{
  "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
  "agent-signed-data": "base64encodedvalue==",
  "agent-sign-cert": [
    "base64encodedvalue==", 
    "base64encodedvalue==", 
    "..."]
}
]]></artwork></figure>

<t>The pledge provisionally accepts the agent-provided-proximity-registrar-cert and can verify it once it has received the voucher. 
If the optionally agent-sign-cert data is included the pledge <bcp14>MAY</bcp14> verify at least the signature of the agent-signed-data using the first contained certificate, which is the LDevID(RegAgt) certificate. 
If further certificates are contained in the agent-sign-cert, they enable also the certificate chain validation.
The pledge may not verify the agent-sign-cert itself as the domain trust has not been established at this point of the communication. 
It can be done, after the voucher has been received.</t>

<t>The agent-signed-data is a JOSE object and contains the following information:</t>

<t>The header of the agent-signed-data contains:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>kid: <bcp14>MUST</bcp14> contain the base64-encoded bytes of the SubjectKeyIdentifier (the "KeyIdentifier" OCTET STRING value), excluding the ASN.1 encoding of "OCTET STRING" of the LDevID(RegAgt) certificate.</t>
</list></t>

<t>The body of the agent-signed-data contains an ietf-voucher-request-prm:agent-signed-data element (defined in <xref target="voucher-request-prm-yang"/>):</t>

<t><list style="symbols">
  <t>created-on: <bcp14>MUST</bcp14> contain the creation date and time in yang:date-and-time format.</t>
  <t>serial-number: <bcp14>MUST</bcp14> contain the product-serial-number as type string as defined in <xref target="RFC8995"/>, section 2.3.1.
The serial-number corresponds with the product-serial-number contained in the X520SerialNumber field of the IDevID certificate of the pledge.</t>
</list></t>

<figure title="Representation of agent-signed-data in general JWS serialization syntax" anchor="asd"><artwork align="left"><![CDATA[
# The agent-signed-data in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:agent-signed-data)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:agent-signed-data" representation
in JSON syntax
"ietf-voucher-request-prm:agent-signed-data": {
  "created-on": "2021-04-16T00:00:01.000Z",
  "serial-number": "callee4711"
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "kid": "base64encodedvalue=="
}
]]></artwork></figure>

<t>Upon receiving the voucher-request trigger, the pledge <bcp14>SHALL</bcp14> construct the body of the PVR as defined in <xref target="RFC8995"/>. 
It will contain additional information provided by the registrar-agent as specified in the following.
This PVR becomes a JSON-in-JWS object as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.
If the pledge is unable to construct the PVR it <bcp14>SHOULD</bcp14> respond with a HTTP error status code to the registrar-agent to indicate that it is not able to create the PVR.</t>

<t>The following client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request, e.g. missing field, wrong data types, etc. or it's not valid JSON even though the PVR media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters from the trigger message to create the PVR were not valid, e.g., the LDevID (Reg) certificate.</t>
</list></t>

<t>The header of the PVR <bcp14>SHALL</bcp14> contain the following parameters as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the PVR <bcp14>MUST</bcp14> contain the following parameters as part of the ietf-voucher-request-prm:voucher as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: <bcp14>SHALL</bcp14> contain the current date and time in yang:date-and-time format.
If the pledge does not have synchronized the time, it <bcp14>SHALL</bcp14> use the created-on time from the agent-signed-data, received in the trigger to create a PVR.</t>
  <t>nonce: <bcp14>SHALL</bcp14> contain a cryptographically strong random or pseudo-random number.</t>
  <t>serial-number: <bcp14>SHALL</bcp14> contain the pledge product-serial-number as X520SerialNumber.</t>
  <t>assertion: <bcp14>SHALL</bcp14> contain the requested voucher assertion "agent-proximity".</t>
</list></t>

<t>The ietf-voucher-request:voucher is enhanced with additional parameters:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> be included and contains the base64-encoded LDevID(Reg) certificate (provided as trigger parameter by the registrar-agent).</t>
  <t>agent-signed-data: <bcp14>MUST</bcp14> contain the base64-encoded agent-signed-data (as defined in <xref target="asd"/>) and provided as trigger parameter.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain the certificate or certificate chain of the registrar-agent as array of base64encoded certificate information.
It starts from the base64-encoded LDevID(RegAgt) certificate optionally followed by the issuing CA certificate and potential further certificates. If supported, it <bcp14>MUST</bcp14> at least contain the LDevID(RegAgt) certificate provided as trigger parameter.</t>
</list></t>

<t>The enhancements of the YANG module for the ietf-voucher-request with these new leafs are defined in <xref target="voucher-request-prm-yang"/>.</t>

<t>The PVR is signed using the pledge's IDevID credential contained as x5c parameter of the JOSE header.</t>

<figure title="Representation of PVR" anchor="pvr"><artwork align="left"><![CDATA[
# The PVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2021-04-16T00:00:02.000Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "agent-provided-proximity-registrar-cert": "base64encodedvalue==",
   "agent-signed-data": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
    "alg": "ES256",
    "kid": "base64encodedvalue==", 
    "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The PVR Content-Type is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as <spanx style="verb">application/voucher-jws+json</spanx>.</t>

<t>The pledge <bcp14>SHOULD</bcp14> include this Content-Type header field indicating the included media type for the voucher response.
Note that this is also an indication regarding the acceptable format of the voucher response.
This format is included by the registrar as described in <xref target="exchanges_uc2_2"/>.</t>

<t>Once the registrar-agent has received the PVR it can trigger the pledge to generate a PER.
As in BRSKI the PER contains a PKCS#10, but additionally signed using the pledge's IDevID.
Note, as the initial enrollment aims to request a generic certificate, no certificate attributes are provided to the pledge.</t>

<t>Triggering the pledge to create the enrollment-request is done using HTTP POST on the defined pledge endpoint "/.well-known/brski/pledge-enrollment-request".</t>

<t>The registrar-agent PER trigger Content-Type header is: <spanx style="verb">application/json</spanx> with an empty body by default.
Note that using HTTP POST allows for an empty body, but also to provide additional data, like CSR attributes or information about the enroll type: "enroll-generic-cert" or "reenroll-generic-cert". 
The "enroll-generic-cert" case is shown in <xref target="raer"/>.</t>

<figure title="Example of trigger to create a PER" anchor="raer"><artwork align="left"><![CDATA[
{
  "enroll-type" : "enroll-generic-cert"
}
]]></artwork></figure>

<t>In the following the enrollment is described as initial enrollment with an empty HTTP POST body.</t>

<t>Upon receiving the enrollment-trigger, the pledge <bcp14>SHALL</bcp14> construct the PER as authenticated self-contained object.
The CSR already assures proof of possession of the private key corresponding to the contained public key.
In addition, based on the additional signature using the IDevID, proof of identity is provided.
Here, a JOSE object is being created in which the body utilizes the YANG module ietf-ztp-types with the grouping for csr-grouping for the CSR as defined in <xref target="I-D.ietf-netconf-sztp-csr"/>.</t>

<t>Depending on the capability of the pledge, it constructs the enrollment request (PER) as plain PKCS#10.
Note that the focus in this use case is placed on PKCS#10 as PKCS#10 can be transmitted in different enrollment protocols in the infrastructure like EST, CMP, CMS, and SCEP. 
If the pledge is already implementing an enrollment protocol, it may leverage that functionality for the creation of the CSR.
Note also that <xref target="I-D.ietf-netconf-sztp-csr"/> also allows for inclusion of certification requests in different formats such as CMP or CMC.</t>

<t>The pledge <bcp14>SHOULD</bcp14> construct the PER as PKCS#10.
In BRSKI-PRM it <bcp14>MUST</bcp14> sign it additionally with its IDevID credential to provide proof-of-identity bound to the PKCS#10 as described below.</t>

<t>If the pledge is unable to construct the PER it <bcp14>SHOULD</bcp14> respond with a HTTP 4xx/5xx status code to the registrar-agent to indicate that it is not able to create the PER.</t>

<t>The following 4xx client error status codes <bcp14>MAY</bcp14> be used:</t>

<t><list style="symbols">
  <t>400 Bad Request: if the pledge detected an error in the format of the request or detected invalid JSON even though the PER media type was set to <spanx style="verb">application/json</spanx>.</t>
  <t>403 Forbidden: if the pledge detected that one or more security parameters (if provided) from the trigger message to create the PER are not valid.</t>
  <t>406 Not Acceptable: if the request's Accept header indicates a type that is unknown or unsupported. For example, a type other than <spanx style="verb">application/jose+json</spanx>.</t>
  <t>415 Unsupported Media Type: if the request's Content-Type header indicates a type that is unknown or unsupported. For example, a type other than 'application/json'.</t>
</list></t>

<t>A successful enrollment will result in a generic LDevID certificate for the pledge in the new domain, which can be used to request further (application specific) LDevID certificates if necessary for its operation. 
The registrar-agent <bcp14>SHALL</bcp14> use the endpoints specified in this document.</t>

<t><xref target="I-D.ietf-netconf-sztp-csr"/> considers PKCS#10 but also CMP and CMC as certification request format. Note that the wrapping signature is only necessary for plain PKCS#10 as other request formats like CMP and CMS support the signature wrapping as part of their own certificate request format.</t>

<t>The registrar-agent enrollment-request Content-Type header for a wrapped PKCS#10 is: <spanx style="verb">application/jose+json</spanx></t>

<t>The header of the pledge enrollment-request <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used for creating the object signature.</t>
  <t>x5c: contains the base64-encoded pledge IDevID certificate.
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The body of the pledge enrollment-request <bcp14>SHOULD</bcp14> contain a P10 parameter (for PKCS#10) as defined for ietf-ztp-types:p10-csr in <xref target="I-D.ietf-netconf-sztp-csr"/>:</t>

<t><list style="symbols">
  <t>P10: contains the base64-encoded PKCS#10 of the pledge.</t>
</list></t>

<t>The JOSE object is signed using the pledge's IDevID credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of PER" anchor="per"><artwork align="left"><![CDATA[
# The PER in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-ztp-types)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-ztp-types" representation in JSON syntax
"ietf-ztp-types": {
  "p10-csr": "base64encodedvalue=="
}
 
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==",
  "crit":["created-on"] ,
  "created-on": "2022-09-13T00:00:02.000Z"
  ]
}
]]></artwork></figure>

<t>With the collected PVR and PER, the registrar-agent starts the interaction with the domain registrar.</t>

<t>The new protected header field "created-on" is introduced to reflect freshness of the PER. 
The field is marked critical "crit" to ensure that it must be understood and validated by the receiver (here the domain registrar) according to section 4.1.11 of <xref target="RFC7515"/>.
It allows the registrar to verify the timely correlation between the PER and previously exchanged messages, i.e., created-on of PER &gt;= created-on of PVR &gt;= created-on of PVR trigger.</t>

<t>As the registrar-agent is intended to facilitate communication between the pledge and the domain registrar, a collection of requests from more than one pledge is possible, allowing a bulk bootstrapping of multiple pledges using the same connection between the registrar-agent and the domain registrar.</t>

</section>
<section anchor="exchanges_uc2_2"><name>Request Processing by the Registrar-Agent</name>

<t>The BRSKI-PRM bootstrapping exchanges between registrar-agent and domain registrar resemble the BRSKI exchanges between pledge and domain registrar (pledge-initiator-mode) with some deviations.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses it's own LDevID(RegAgt) credentials of the site domain.
In addition, it may possess the IDevID CA certificate of the pledge vendor/manufacturer to verify the pledge certificate in the received request messages.
It has the address of the domain registrar through configuration or by discovery, e.g., mDNS/DNSSD.
The registrar-agent has acquired one or multiple PVR and PER.</t>
  <t>Registrar: possesses the IDevID CA certificate of the pledge vendor/manufacturer and an it's own LDevID(Reg) credentials of the site domain.</t>
  <t>MASA: possesses it's own vendor/manufacturer credentials (voucher signing key, TLS server certificate) related to pledges IDevID and <bcp14>MAY</bcp14> possess the site-specific domain CA certificate. 
The latter is only a necessary precondition if the MASA needs to verify that the domain of the Registrar is a-priori authorized to enroll a particular pledge, or a particular type of pledge. 
In such case, how the MASA will obtain the domain CA certificate is out of scope of this document. 
In other cases, a MASA may allow the pledge to enroll into an anonymous and/or yet-unknown domain and then the a-priori possession of the domain CA certificate is not needed.</t>
</list></t>

<figure title="Request processing between registrar-agent and infrastructure bootstrapping services" anchor="exchangesfig_uc2_2"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar-|    | Domain    |   | Domain |   | Vendor  |
| agent     |    | Registrar |   | CA     |   | Service |
| (RegAgt)  |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enrollment] |              |            |
[PVR, PER available ]  |              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |          [Reg-Agt authenticated |            |
    |           and authorized?]      |            |
    |                  |              |            |
    |-- Voucher-Req -->|              |            |
    |      (PVR)       |              |            |
    |          [Reg-Agt authorized?]  |            |
    |          [accept device?]       |            |
    |          [contact vendor]                    |
    |                  |----------- mTLS --------->|
    |                  |-- Voucher-Req ----------->|
    |                  |      (RVR)                |
    |                  |                   [extract DomainID]
    |                  |                   [update audit log]
    |                  |<-------- Voucher ---------|  
    |<---- Voucher ----|                           |
    |                  |                           |
    |--- Enroll-Req -->|              |            |
    |      (PER)       |              |            |
    |                  |--- mTLS ---->|            |
    |                  |- Enroll-Req->|            |
    |                  |     (RER)    |            |
    |                  |<-Enroll-Resp-|            |
    |<-- Enroll-Resp---|              |            |
    |                  |              |            |
    |--- caCerts-Req ->|              |            |
    |<-- caCerts-Res --|              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent establishes a TLS connection with the registrar.
As already stated in <xref target="RFC8995"/>, the use of TLS 1.3 (or newer) is encouraged.
TLS 1.2 or newer is <bcp14>REQUIRED</bcp14> on the registrar-agent side.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the registrar, but TLS 1.2 <bcp14>MAY</bcp14> be used.
TLS 1.3 (or newer) <bcp14>SHOULD</bcp14> be available on the MASA, but TLS 1.2 <bcp14>MAY</bcp14> be used.</t>

<t>In contrast to <xref target="RFC8995"/> TLS client authentication to the registrar is achieved by using registrar-agent LDevID(RegAgt) credentials instead of pledge IDevID credentials.
Consequently BRSKI (pledge-initiator-mode) is distinguishable from BRSKI-PRM (pledge-responder-mode) by the registrar. 
The registrar <bcp14>SHOULD</bcp14> verify that the registrar-agent is authorized to establish a connection to the registrar by TLS client authentication using LDevID(RegAgt) credentials. 
If the connection form registrar-agent to registrar is established, the authorization <bcp14>SHALL</bcp14> be verified again based on the agent-signed-data contained in the PVR. 
This ensures that the pledge has been triggered by an authorized registrar-agent.</t>

<t>The registrar can receive request objects in different formats as defined in <xref target="RFC8995"/>. 
Specifically, the registrar will receive JSON-in-JWS objects generated by the pledge for voucher-request and enrollment-request (instead of BRSKI voucher-request as CMS-signed JSON and enrollment-request as PKCS#10).</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PVR by HTTP POST to the registrar endpoint: "/.well-known/brski/requestvoucher"</t>

<t>The Content-Type header field for JSON-in-JWS PVR is: <spanx style="verb">application/voucher-jws+json</spanx> (see <xref target="pvr"/> for the content definition), as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The registrar-agent <bcp14>SHOULD</bcp14> set the Accept field in the request-header indicating the acceptable Content-Type for the voucher-response.
The voucher-response Content-Type header field <bcp14>SHOULD</bcp14> be set to <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>After receiving  the PVR from registrar-agent, the registrar <bcp14>SHALL</bcp14> perform the verification as defined in section 5.3 of <xref target="RFC8995"/>.
In addition, the registrar shall verify the following parameters from the PVR:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: <bcp14>MUST</bcp14> contain registrar's own LDevID(Reg) certificate to ensure the registrar in proximity of the registrar-agent is the destination for this PVR.</t>
  <t>agent-signed-data: The registrar <bcp14>MUST</bcp14> verify that the agent provided data has been signed with the LDevID(RegAgt) credential indicated in the "kid" JOSE header parameter.
If the certificate is not included in the agent-sign-cert properties of the PVR, it must be fetched out-of-band by the registrar if "agent-proximity" assertion is requested.</t>
  <t>agent-sign-cert: <bcp14>MAY</bcp14> contain an array of base64-encoded certificate data starting with the LDevID(RegAgt) certificate.
If contained the registrar <bcp14>MUST</bcp14> verify that the LDevID(ReAgt) certificate, used to sign the data, is still valid. 
If the certificate is already expired, the registrar <bcp14>SHALL</bcp14> reject the request.
Validity of used signing certificates at the time of signing the agent-signed-data is necessary to avoid that a rogue registrar-agent generates agent-signed-data objects to onboard arbitrary pledges at a later point in time, see also <xref target="sec_cons_reg-agt"/>. <br />
If the agent-signed-cert is not provided, the registrar <bcp14>MUST</bcp14> fetch the LDevID(RegAgt) certificate, based on the provided SubjectKeyIdentifier (SKID) contained in the kid header of the agent-signed-data, and perform this verification. 
This requires, that the registrar can fetch the LDevID(RegAgt) certificate data (including intermediate CA certificates if existent) based on the SKID.</t>
</list></t>

<t>If the validation fails the registrar <bcp14>SHOULD</bcp14> respond with HTTP 404 Not Found status code to the registrar-agent.
HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used if the Content-Type indicated by the Accept header is unknown or unsupported.</t>

<t>If the validation succeeds, the registrar <bcp14>SHOULD</bcp14> accept the PVR to join the domain as defined in section 5.3 of <xref target="RFC8995"/>.
The registrar then establishes a TLS connection to MASA as described in section 5.4 of <xref target="RFC8995"/> to obtain a voucher for the pledge.</t>

<t>The registrar <bcp14>SHALL</bcp14> construct the payload of the RVR as defined in <xref target="RFC8995"/>.
The RVR encoding <bcp14>SHALL</bcp14> be JSON-in-JWS as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>The header of the RVR <bcp14>SHALL</bcp14> contain the following parameter as defined in <xref target="RFC7515"/>:</t>

<t><list style="symbols">
  <t>alg: algorithm used to create the object signature.</t>
  <t>x5c: contains the base64-encoded registrar LDevID certificate(s).
It may optionally contain the certificate chain for this certificate.</t>
</list></t>

<t>The payload of the RVR <bcp14>MUST</bcp14> contain the following parameter as part of the voucher request as defined in <xref target="RFC8995"/>:</t>

<t><list style="symbols">
  <t>created-on: contains the current date and time in yang:date-and-time format for the RVR creation time.</t>
  <t>nonce: copied form the PVR</t>
  <t>serial-number: contains the pledge product-serial-number.
The registrar <bcp14>MUST</bcp14> verify that the IDevID certificate subject serialNumber of the pledge (X520SerialNumber) matches the serial-number value in the PVR.
In addition, it <bcp14>MUST</bcp14> be equal to the serial-number value contained in the agent-signed data of PVR.</t>
  <t>assertion: contains the voucher assertion requested by the pledge (agent-proximity).
The registrar provides this information to assure successful verification of agent proximity based on the agent-signed-data.</t>
  <t>prior-signed-voucher-request: contains the PVR provided by the registrar-agent.</t>
</list></t>

<t>The RVR can be enhanced optionally with the following parameter as defined in <xref target="voucher-request-prm-yang"/>:</t>

<t><list style="symbols">
  <t>agent-sign-cert: contains the LDevID(RegAgt) certificate or the LDevID(RegAgt) certificate including the certificate chain.
In the context of this document it is a JSON array of base64encoded certificate information and handled in the same way as x5c header objects.</t>
</list></t>

<t>If only a single object is contained in the x5c it <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.
If multiple certificates are included in the x5c, the first <bcp14>MUST</bcp14> be the base64-encoded LDevID(RegAgt) certificate.</t>

<t>The MASA uses this information for verification that the registrar-agent is in proximity to the registrar to state the corresponding assertion "agent-proximity". Note that the agent-sign-cert may also be contained in the "prior-signed-voucher-request" carrying the PVR if the pledge included it.</t>

<t>The object is signed using the registrar LDevID(Reg) credential, which corresponds to the certificate signaled in the JOSE header.</t>

<figure title="Representation of RVR" anchor="rvr"><artwork align="left"><![CDATA[
# The RVR in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher-request-prm:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher-request-prm:voucher" representation in JSON syntax
"ietf-voucher-request-prm:voucher": {
   "created-on": "2022-01-04T02:37:39.235Z",
   "nonce": "eDs++/FuDHGUnRxN3E14CQ==",
   "serial-number": "callee4711",
   "assertion": "agent-proximity",
   "prior-signed-voucher-request": "base64encodedvalue==",
   "agent-sign-cert": [
     "base64encodedvalue==",
     "base64encodedvalue==",
     "..."
   ]
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The registrar <bcp14>SHALL</bcp14> send the RVR to the MASA endpoint by HTTP POST: "/.well-known/brski/requestvoucher"</t>

<t>The RVR Content-Type header field is defined in <xref target="I-D.ietf-anima-jws-voucher"/> as: <spanx style="verb">application/voucher-jws+json</spanx></t>

<t>The registrar <bcp14>SHOULD</bcp14> set the Accept header of the RVR indicating the desired media type for the voucher-response.
The media type is <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/>.</t>

<t>Once the MASA receives the RVR it <bcp14>SHALL</bcp14> perform the verification as described in section 5.5 in <xref target="RFC8995"/>.</t>

<t>In addition, the following processing <bcp14>SHALL</bcp14> be performed for PVR data contained in RVR "prior-signed-voucher-request" field:</t>

<t><list style="symbols">
  <t>agent-provided-proximity-registrar-cert: The MASA <bcp14>MAY</bcp14> verify that this field contains the LDevID(Reg) certificate.
If so, it <bcp14>MUST</bcp14> correspond to the LDevID(Reg) certificate used to sign the RVR.
Note: Correspond here relates to the case that a single LDevID(Reg) certificate is used or that different LDevID(Reg) certificates are used, which are issued by the same CA.</t>
  <t>agent-signed-data: The MASA <bcp14>MAY</bcp14> verify this field to issue "agent-proximity" assertion.
If so, the agent-signed-data <bcp14>MUST</bcp14> contain the pledge product-serial-number, contained in the "serial-number" field of the PVR (from "prior-signed-voucher-request" field) and also in "serial-number" field of the RVR.
The LDevID(RegAgt) certificate used to generate the signature is identified by the "kid" parameter of the JOSE header (agent-signed-data).
If the assertion "agent-proximity" is requested, the RVR <bcp14>MUST</bcp14> contain the corresponding LDevID(RegAgt) certificate data in the "agent-sign-cert" field of either the LDevID(RegAgt) certificate of RVR or of PVR from "prior-signed-voucher-request" field. 
It <bcp14>MUST</bcp14> be verified by the MASA that it can verified the LDevID(RegAgt) certificate to the same domain CA as the LDevID(Reg) certificate.<br />
If the "agent-sign-cert" field is not provided, the MASA <bcp14>MAY</bcp14> state a lower level assertion value, e.g.: "logged" or "verified"
Note: Sub-CA certificate(s) <bcp14>MUST</bcp14> also be carried by "agent-sign-cert", in case the LDevID(RegAgt) certificate is issued by a sub-CA and not the domain CA known to the MASA. 
As the "agent-sign-cert" field is defined as array (x5c), it can handle multiple certificates.</t>
</list></t>

<t>If validation fails, the MASA <bcp14>SHOULD</bcp14> respond with an HTTP 4xx client error status code to the registrar.
The HTTP error status codes are kept the same as defined in section 5.6 of <xref target="RFC8995"/>, <!-- XXX -->and comprise the codes: 403, 404, 406, and 415.</t>

<t>The expected voucher-response format for the pledge-responder-mode the <spanx style="verb">application/voucher-jws+json</spanx> as defined in <xref target="I-D.ietf-anima-jws-voucher"/> is applied.
If the MASA detects that the Accept header of the PVR does not match the <spanx style="verb">application/voucher-jws+json</spanx> it <bcp14>SHOULD</bcp14> respond with the HTTP status code 406 Not Acceptable as the pledge will not be able to parse the response.
The voucher syntax is described in detail by <xref target="RFC8366"/>. <xref target="MASA-vr"/> shows an example of the contents of a voucher.</t>

<figure title="Representation of MASA issued voucher" anchor="MASA-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher in general JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
  "assertion": "agent-proximity",
  "serial-number": "callee4711",
  "nonce": "base64encodedvalue==",
  "created-on": "2022-01-04T00:00:02.000Z",
  "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}
]]></artwork></figure>

<t>The MASA returns the voucher-response (voucher) to the registrar.</t>

<t>After receiving the voucher the registrar <bcp14>SHOULD</bcp14> evaluate it for transparency and logging purposes as outlined in section 5.6 of <xref target="RFC8995"/>.
The registrar <bcp14>MUST</bcp14> add an additional signature to the MASA provided voucher, by signing it using its registrar credentials (LDevID(Reg)). 
This signature is done over the same content as the MASA signature of the voucher and provides a proof of possession of the private key corresponding to the LDevID(Reg) the pledge received in the trigger for the PVR (see <xref target="pavrt"/>). The registrar <bcp14>MUST</bcp14> use the same LDevID(Reg) credential that is used for authentication in the TLS handshake to authenticate towards the registrar-agent. This ensures that the same LDevID(Reg) certificate can be used to verify the signature as transmitted in the voucher request as is transferred in the PVR in the agent-provided-proximity-registrar-cert component. Figure <xref target="MASA-REG-vr"/> below provides an example of the voucher with two signatures.</t>

<figure title="Representation of MASA issued voucher with additional registrar signature" anchor="MASA-REG-vr"><artwork align="left"><![CDATA[
# The MASA issued voucher with additional registrar signature in general
JWS serialization syntax
{
  "payload": "BASE64URL(ietf-voucher:voucher)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (MASA)))",
      "signature": "base64encodedvalue=="
    },
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header (Reg)))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "ietf-voucher:voucher" representation in JSON syntax
"ietf-voucher:voucher": {
   "assertion": "agent-proximity",
   "serial-number": "callee4711",
   "nonce": "base64encodedvalue==",
   "created-on": "2022-01-04T00:00:02.000Z",
   "pinned-domain-cert": "base64encodedvalue=="
}

# Decoded "JWS Protected Header (MASA)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "voucher-jws+json"
}

# Decoded "JWS Protected Header (Reg)" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>Depending on the security policy of the operator, this signature can also be interpreted by the pledge explicit authorization of the registrar to install the contained trust anchor.
The registrar sends the voucher to the registrar-agent.</t>

<t>After receiving the voucher, the registrar-agent sends the PER to the registrar.
Deviating from BRSKI the PER is not a raw PKCS#10.
As the registrar-agent is involved in the exchange, the PKCS#10 is wrapped in a JWS object by the pledge and signed with pledge's IDevID to ensure proof-of-identity as outlined in <xref target="per"/>.</t>

<t><xref target="RFC7030"/> EST standard endpoints (/simpleenroll, /simplereenroll, /serverkeygen, /cacerts) on the registrar cannot be used for BRSKI-PRM. 
This is caused by the utilization of signature wrapped-objects in BRSKI-PRM. 
As EST requires to sent a raw PKCS#10 request to the /simpleenroll endpoint, this document makes an enhancement by utilizing EST but with the exception to transport a signature wrapped PKCS#10 request. 
Therefore a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/requestenroll"</t>

<t>The Content-Type header of PER is: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
Note, the registrar is already aware that the bootstrapping is performed in a pledge-responder-mode due to the use of the LDevID(RegAgt) certificate in the TLS establishment and the provided PVR as JSON-in-JWS object.</t>

<t><list style="symbols">
  <t>If the registrar receives a PER with Content-Type header: <spanx style="verb">application/jose+json</spanx>, it <bcp14>MUST</bcp14> verify the wrapping signature using the certificate indicated in the JOSE header.</t>
  <t>The registrar verifies that the pledge's certificate (here IDevID), carried in "x5c" header field, is accepted to join the domain after successful validation of the PVR.</t>
  <t>If both succeed, the registrar utilizes the PKCS#10 request contained in the JWS object body as "P10" parameter of "ietf-sztp-csr:csr" for further processing of the enrollment request with the corresponding domain CA.
It creates a registrar-enrollment-request (RER) by utilizing the protocol expected by the domain CA. 
The domain registrar may either directly forward the provided PKCS#10 request to the CA or provide additional information about attributes to be included by the CA into the requested LDevID certificate. 
The approach of sending this information to the CA depends on the utilized certificate management protocol between the RA and the CA and is out of scope for this document.</t>
</list></t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the PER to the registrar by HTTP POST to the endpoint: "/.well-known/brski/requestenroll"</t>

<t>The registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.</t>

<t>A successful interaction with the domain CA will result in a pledge LDevID certificate, which is then forwarded by the registrar to the registrar-agent using the Content-Type header: <spanx style="verb">application/pkcs7-mime</spanx>.</t>

<t>As the pledge will verify it own certificate LDevID certificate when received, it also needs the corresponding CA certificates. 
This is done in EST using the /cacerts endpoint, which provides the CA certificates over a TLS protected connection. 
BRSKI-PRM requires a signature wrapped CA certificate response, to avoid that the pledge can be provided with arbitrary CA certificates in an authorized way. 
The additional signature of the registrar will allow the pledge to verify the authorization to install CA certificates. 
As the CA certificates are provided to the pledge after the voucher, the pledge has the necessary information to validate the provisioning object.</t>

<t>To allow the registrar-agent to request signature wrapped CA certificates, a new endpoint for BRSKI-PRM on the registrar is defined as "/.well-known/brski/wrappedcacerts"</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> requests the EST CA trust anchor database information (in form of CA certificates) with an HTTPS GET message.</t>

<t>The Content-Type header of the response <bcp14>SHALL</bcp14> be: <spanx style="verb">application/jose+json</spanx>.</t>

<t>This is a deviation from the Content-Type header values used in <xref target="RFC7030"/> and results in additional processing at the domain registrar (as EST server).
The additional processing is the signature of the CA certificate information using the LDevID(Reg) credential resulting in a signed JSON object. The CA certificates are provided as base64 encoded x5b.</t>

<figure title="Representation of CA certificates data with additional registrar signature" anchor="PCAC"><artwork align="left"><![CDATA[
# The CA certificates data with additional registrar signaturer in general
JWS serialization syntax
{
  "payload": "BASE64URL(certs)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "certs" representation in JSON syntax
{
  "x5b": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] TODO: check rename "x5b" to more explanatory e.g. "ca-certs-x5b"?
}


# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ]
}
]]></artwork></figure>

<t>The registrar-agent has now finished the exchanges with the domain registrar and can supply the voucher-response (from MASA via Registrar), the CA certificates, and the enrollment-response (LDevID certificate, from CA via Registrar) to the pledge.
It can close the TLS connection to the domain registrar and can provide the responses to the pledge(s).
The content of the responses are defined by the voucher <xref target="RFC8366"/> and the certificate <xref target="RFC5280"/>.</t>

</section>
<section anchor="exchanges_uc2_3"><name>Response Object Supply by Registrar-Agent to Pledge</name>

<t>The following description assumes that the registrar-agent has obtained the responses from the domain registrar.
It will re-start the interaction with the pledge.
To contact the pledge, it may either discover the pledge as described in <xref target="discovery_uc2_ppa"/> or use stored information from the first contact with the pledge.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher and LDevID certificate and optionally CA certificates.</t>
</list></t>

<figure title="Response and status handling between pledge and registrar-agent" anchor="exchangesfig_uc2_3"><artwork align="left"><![CDATA[
+--------+                        +-----------+
| Pledge |                        | Registrar-|
|        |                        | Agent     |
|        |                        | (RegAgt)  |
+--------+                        +-----------+
    |                          [voucher and enrollment]
    |                          [responses available]
    |                                   |
    |<------- supply voucher -----------|
    |                                   |
    |--------- voucher status --------->| - store
    |                                   |   pledge voucher status
    |<----- supply CA certificates  ----|
    |                                   |
    |<--- supply enrollment response ---|
    |                                   |
    |--------- enroll status ---------->| - store
    |                                   |   pledge enroll status
    |<--- supply CAcerts (optional) ----|
    |                                   |

]]></artwork></figure>

<t>The registrar-agent provides the information via distinct pledge endpoints as following.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the voucher-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-voucher".</t>

<t>The registrar-agent voucher-response Content-Type header is <spanx style="verb">application/voucher-jws+json</spanx> and contains the voucher as provided by the MASA. An example if given in <xref target="MASA-vr"/> for a MASA  signed voucher and in <xref target="MASA-REG-vr"/> for the voucher with the additional signature of the registrar.</t>

<t>A nonceless voucher may be accepted as in <xref target="RFC8995"/> and may be allowed by a manufactures pledge implementation.</t>

<t>To perform the validation of multiple signatures in the voucher, the pledge <bcp14>SHALL</bcp14> perform the signature verification in the following order:</t>

<t><list style="numbers">
  <t>Validate MASA signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully.</t>
  <t>Install contained trust anchor provisionally.</t>
  <t>Verify registrar signature as described in section 5.6.1 in <xref target="RFC8995"/> successfully, but take the registrar certificate instead of the MASA certificate for verification.</t>
  <t>Validate the registrar certificate received in the agent-provided-proximity-registrar-cert in the pledge-voucher-request trigger request (in the field "agent-provided-proximity-registrar-cert") successfully, including validity and authorization to bootstrap the particular pledge.</t>
</list></t>

<t>If all verification steps stated above have been performed successfully, the pledge <bcp14>SHALL</bcp14> terminate the "PROVISIONAL accept" state for the domain trust anchor and the LDevID(Reg).</t>

<t>If an error occurs during the verification it <bcp14>SHALL</bcp14> be signaled in the reason field of the pledge voucher status.</t>

<t>After verification the pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.7 of <xref target="RFC8995"/>.<br />
The pledge generates the voucher status and provides it as JOSE object with the wrapping signature in the response message to the registrar-agent.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the IDevID of the pledge as shown in <xref target="vstat"/>.
As the reason field is optional (see <xref target="RFC8995"/>), it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<figure title="Representation of pledge voucher status telemetry" anchor="vstat"><artwork align="left"><![CDATA[
# The "pledge-voucher-status" telemetry in general JWS serialization syntax
{
  "payload": "BASE64URL(pledge-voucher-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-voucher-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Voucher successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>The registrar-agent <bcp14>SHALL</bcp14> provide the set of CA certificates requested from the registrar to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-CAcerts".</t>

<t>As the CA certificate provisioning is crucial from a security perspective, this provisioning <bcp14>SHALL</bcp14> only be done, if the voucher-response has been successfully provided to the pledge.</t>

<t>The supply CA certificates message has the Content-Type <spanx style="verb">application/jose+json</spanx> and is signed using the LDevID(Reg) of the registrar pledge as shown in <xref target="PCAC"/>.</t>

<t>The CA certificates are provided as base64 encoded x5b.
The pledge <bcp14>SHALL</bcp14> install the received CA certificates in its trust anchor database after successful verification of the registrar's signature.</t>

<t>If validation of the wrapping signature or another security check fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is in an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the pledge detects errors in the encoding of the payload.</t>

<t>The registrar-agent <bcp14>SHALL</bcp14> send the enroll-response to the pledge by HTTP POST to the endpoint: "/.well-known/brski/pledge-enrollment".</t>

<t>The registrar-agent enroll-response Content-Type header, when using EST <xref target="RFC7030"/> as enrollment protocol between the registrar-agent and the infrastructure, is <spanx style="verb">application/pkcs7-mime</spanx>. Note that it only contains the LDevID certificate for the pledge, not the certificate chain.</t>

<t>Upon reception, the pledge <bcp14>SHALL</bcp14> verify the received LDevID certificate. 
The pledge <bcp14>SHALL</bcp14> generate the enroll status and provide it in the response message to the registrar-agent. If the verification of the LDevID certificate succeeds, the status <bcp14>SHALL</bcp14> be set to true, otherwise to FALSE.</t>

<t>The pledge <bcp14>MUST</bcp14> reply with a status telemetry message as defined in section 5.9.4 of <xref target="RFC8995"/>.
As for the other objects, the enroll status is provided with an additional signature using JOSE.
If the pledge verified the received LDevID certificate successfully it <bcp14>SHALL</bcp14> sign the response using the LDevID of the pledge as shown in <xref target="estat"/>. 
In the failure case, the pledge <bcp14>SHALL</bcp14> use the available IdevID credentials.
As the reason field is optional, it <bcp14>MAY</bcp14> be omitted in case of success.</t>

<t>The response has the Content-Type <spanx style="verb">application/jose+json</spanx>.</t>

<figure title="Representation of pledge enroll status telemetry" anchor="estat"><artwork align="left"><![CDATA[
# The "pledge-enroll-status" telemetry in general JWS serialization 
  syntax
{
  "payload": "BASE64URL(pledge-enroll-status)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "pledge-enroll-status" representation in JSON syntax
{
  "version": 1,
  "status": true,
  "reason": "Enrollment response  successfully processed",
  "reason-context": {
    "additional": "JSON"
  }
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>Once the registrar-agent has collected the information, it can connect to the registrar-agent to provide the status responses to the registrar.</t>

</section>
<section anchor="exchanges_uc2_4"><name>Telemetry status handling (registrar-agent - domain registrar)</name>

<t>The following description requires that the registrar-agent has collected the status information from the pledge.
It <bcp14>SHALL</bcp14> provide the status information to the registrar for further processing.</t>

<t>Preconditions in addition to <xref target="exchanges_uc2_2"/>:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses voucher status and enroll status from pledge.</t>
</list></t>

<figure title="Bootstrapping status handling" anchor="exchangesfig_uc2_4"><artwork align="left"><![CDATA[
+-----------+    +-----------+   +--------+   +---------+
| Registrar |    | Domain    |   | Domain |   | Vendor  |
| Agent     |    | Registrar |   | CA     |   | Service |
| RegAgt)   |    |  (JRC)    |   |        |   | (MASA)  |
+-----------+    +-----------+   +--------+   +---------+
    |                  |              |   Internet |
[voucher + enroll ]    |              |            |
[status info available]|              |            |
    |                  |              |            |
    |<----- mTLS ----->|              |            |
    |                  |              |            |
    |--Voucher Status->|              |            |
    |                  |-- req- device audit log ->|
    |                  |<---- device audit log ----|
    |           [verify audit log ]
    |                  |              |            |
    |--Enroll Status-->|              |            |
    |                  |              |            |
    |                  |              |            |
]]></artwork></figure>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the collected pledge voucher status to the registrar. 
This status indicates if the pledge could process the voucher successfully or not.</t>

<t>If the TLS connection to the registrar was closed, the registrar-agent establishes a TLS connection with the registrar as stated in <xref target="exchanges_uc2_2"/>.</t>

<t>The registrar-agent sends the pledge voucher status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/voucher_status". The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="vstat"/>.</t>

<t>The registrar <bcp14>SHALL</bcp14> verify the signature of the pledge voucher status and validate that it belongs to an accepted device in his domain based on the contained "serial-number" in the IDevID certificate referenced in the header of the voucher status.</t>

<t>According to <xref target="RFC8995"/> section 5.7, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server logs the server <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

<t>The registrar <bcp14>SHOULD</bcp14> proceed with collecting and logging status information by requesting the MASA audit-log from the MASA service as described in section 5.8 of <xref target="RFC8995"/>.</t>

<t>The registrar-agent <bcp14>MUST</bcp14> provide the pledge's enroll status to the registrar.
The status indicates the pledge could process the enroll-response (certificate) and holds the corresponding private key.</t>

<t>The registrar-agent sends the pledge enroll status without modification to the registrar with an HTTP-over-TLS POST using the registrar endpoint "/.well-known/brski/enrollstatus".
The Content-Type header is kept as <spanx style="verb">application/jose+json</spanx> as described in <xref target="exchangesfig_uc2_3"/> and depicted in the example in <xref target="estat"/>.</t>

<t>The registrar <bcp14>MUST</bcp14> verify the signature of the pledge enroll status.
Also, the registrar <bcp14>SHALL</bcp14> validate that the pledge belongs to an accepted device in his domain based on the contained product-serial-number in the LDevID certificate referenced in the header of the enroll status. 
The registrar <bcp14>SHOULD</bcp14> log this event.
In case the pledge enroll status indicates a failure, the pledge was unable to verify the received LDevID certificate and therefore signed the enroll status with its IDevID credential.
Note that the verification of a signature of the status information is an addition to the described handling in section 5.9.4 of <xref target="RFC8995"/>.</t>

<t>According to <xref target="RFC8995"/> section 5.9.4, the registrar <bcp14>SHOULD</bcp14> respond with an HTTP 200 OK in the success case or fail with HTTP 4xx/5xx status codes as defined by the HTTP standard.
Based on the failure case the registrar <bcp14>MAY</bcp14> decide that for security reasons the pledge is not allowed to reside in the domain. In this case the registrar <bcp14>MUST</bcp14> revoke the certificate.
The registrar-agent may use the response to signal success / failure to the service technician operating the registrar agent.
Within the server log the registrar <bcp14>SHOULD</bcp14> capture this telemetry information.</t>

</section>
<section anchor="exchanges_uc2_5"><name>Request pledge-status</name>

<t>The following assumes that a registrar-agent may need to query the status of a pledge. 
This information may be useful to solve errors, when the pledge was not able to connect to the target domain during the bootstrapping.
The pledge <bcp14>MAY</bcp14> provide a dedicated endpoint to accept status-requests.</t>

<t>Preconditions:</t>

<t><list style="symbols">
  <t>Registrar-agent: possesses LDevID (RegAgt), list of serial numbers of pledges to be queried and a list of corresponding manufacturer trust anchors to be able to verify signatures with the IDevID credential.</t>
  <t>Pledge: may already possess domain credentials and LDevID(Pledge), or may not possess one or both of these.</t>
</list></t>

<figure title="Pledge-status handling between registrar-agent and pledge" anchor="exchangesfig_uc2_5"><artwork align="left"><![CDATA[
+--------+                     +-----------+
| Pledge |                     | Registrar-|
|        |                     | Agent     |
|        |                     | (RegAgt)  |
+--------+                     +-----------+
    |                                |
    |<--- pledge-status request -----|
    |                                |
    |---- pledge-status response --->| 
    |                                |
]]></artwork></figure>

<t>The registrar-agent requests the pledge-status via HTTP POST on the defined pledge endpoint: "/.well-known/brski/pledge-status"</t>

<t>The registrar-agent Content-Type header for the pledge-status request is: <spanx style="verb">application/jose+json</spanx>. 
It contains information on the requested status-type, the time and date the request is created, and the product serial-number of the pledge contacted as shown in <xref target="stat_req_def"/>. 
The pledge-status request is signed by registrar-agent using the LDevID(RegAgt) credential.</t>

<t>The following Concise Data Definition Language (CDDL) <xref target="RFC8610"/> explains the structure of the format for the pledge-status request. It is defined following the status telemetry definitions in BRSKI <xref target="RFC8995"/>.
Consequently, format and semantics of pledge-status requests below are for version 1.<br />
The version field is included to permit significant changes to the pledge-status request and response in the future.<br />
A pledge or a registrar-agent that receives a pledge-status request with a version larger than it knows about <bcp14>SHOULD</bcp14> log the contents and alert a human.</t>

<figure title="CDDL for pledge-status request" anchor="stat_req_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-request = {
      "version": uint,
      "created-on": tdate ttime,
      "serial-number": text,
      "status-type": text
  }
<CODE ENDS>
]]></artwork></figure>

<t>The status-type defined for BRSKI-PRM is "bootstrap".
This indicates the pledge to provide current status information regarding the bootstrapping status (voucher processing and the enrollment of the pledge into the new domain). 
As pledge-status request is defined generic, it may be used by other specifications to request further status information, e.g., for onboarding to get further information about enrollment of application specific LDevIDs or other parameters. 
This is out of scope for this specification.</t>

<t><xref target="stat_req"/> below shows an example for querying pledge-status using status-type bootstrap.</t>

<figure title="Example of registrar-agent request of pledge-status using status-type bootstrap" anchor="stat_req"><artwork align="left"><![CDATA[
# The registrar-agent request of "pledge-status" in general JWS 
  serialization syntax
{
  "payload": "BASE64URL(status-request)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-request" representation in JSON syntax
{
  "version": 1,
  "created-on": "2022-08-12T02:37:39.235Z",
  "serial-number": "pledge-callee4711",
  "status-type": "bootstrap"
}
        
# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ] 
}
]]></artwork></figure>

<t>If the pledge receives the pledge-status request with status-type "bootstrap" it <bcp14>SHALL</bcp14> react with a status response message based on the telemetry information described in section <xref target="exchanges_uc2_3"/>.</t>

<t>The pledge-status response Content-Type header is <spanx style="verb">application/jose+json</spanx>.</t>

<t>The following CDDL explains the structure of the format for the status response, which is :</t>

<figure title="CDDL for pledge-status response" anchor="stat_res_def"><artwork align="left"><![CDATA[
<CODE BEGINS> 
  status-response = {
    "version": uint,
    "status": 
      "factory-default" / 
      "voucher-success" / 
      "voucher-error" / 
      "enroll-success" /
      "enroll-error" /
      "connect-success" /
      "connect-error", 
    ?"reason" : text,
    ?"reason-context" : { $$arbitrary-map }
  }
<CODE ENDS>
]]></artwork></figure>

<t>Different cases for pledge bootstrapping status may occur, which <bcp14>SHOULD</bcp14> be reflected using the status enumeration. 
This document specifies the status values in the context of the bootstrapping process and credential application. 
Other documents may enhance the above enumeration to reflect further status information.</t>

<t>The pledge-status response message is signed with IDevID or LDevID, depending on bootstrapping state of the pledge.</t>

<t><list style="symbols">
  <t>"factory-default": Pledge has not been bootstrapped. 
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-success": Pledge processed the voucher exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"voucher-error": Pledge voucher processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
  <t>"enroll-success": Pledge has processed the enrollment exchange successfully.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"enroll-error": Pledge enrollment response processing terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its IDevID(Pledge).</t>
</list></t>

<t>The reason and the reason-context <bcp14>SHOULD</bcp14> contain the telemetry information as described in section <xref target="exchanges_uc2_3"/>.</t>

<t>As the pledge is assumed to utilize the bootstrapped credential information in communication with other peers, additional status information is provided for the connectivity to other peers, which may be helpful in analyzing potential error cases.</t>

<t><list style="symbols">
  <t>"connect-success": Pledge could successfully establish a connection to another peer.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
  <t>"connect-error": Pledge connection establishment terminated with error.
Additional information may be provided in the reason or reason-context.
The pledge signs the response message using its LDevID(Pledge).</t>
</list></t>

<t><xref target="stat_res"/> provides an example for the bootstrapping-status information.</t>

<figure title="Example of pledge-status response" anchor="stat_res"><artwork align="left"><![CDATA[
# The pledge "status-response" in general JWS serialization syntax
{
  "payload": "BASE64URL(status-response)",
  "signatures": [
    {
      "protected": "BASE64URL(UTF8(JWS Protected Header))",
      "signature": "base64encodedvalue=="
    }
  ]
}

# Decoded payload "status-response" representation in JSON syntax
{
  "version": 1,
  "status": "enroll-success",
  "reason-context": {
    "additional" : "JSON" 
  }
}

# Decoded "JWS Protected Header" representation in JSON syntax
{
  "alg": "ES256",
  "x5c": [ 
    "base64encodedvalue==",
    "base64encodedvalue==" 
  ], 
  "typ": "jose+json
}
]]></artwork></figure>

<t>In case "factory-default" the pledge does not possess the domain certificate resp. the domain trust-anchor. 
It will not be able to verify the signature of the registrar-agent in the bootstrapping-status request.
In cases "vouchered" and "enrolled" the pledge already possesses the domain certificate (has domain trust-anchor) and can therefore validate the signature of the registrar-agent. 
If validation of the JWS signature fails, the pledge <bcp14>SHOULD</bcp14> respond with the HTTP 403 Forbidden status code.
The HTTP 406 Not Acceptable status code <bcp14>SHOULD</bcp14> be used, if the Accept header in the request indicates an unknown or unsupported format. 
The HTTP 415 Unsupported Media Type status code <bcp14>SHOULD</bcp14> be used, if the Content-Type of the request is an unknown or unsupported format. 
The HTTP 400 Bad Request status code <bcp14>SHOULD</bcp14> be used, if the Accept/Content-Type headers are correct but nevertheless the status-request cannot be correctly parsed.</t>

</section>
</section>
</section>
<section anchor="artifacts"><name>Artifacts</name>

<section anchor="voucher-request-prm-yang"><name>Voucher Request Artifact</name>

<t>The following enhancement extends the voucher-request as defined in <xref target="RFC8995"/> to include additional fields necessary for handling bootstrapping in the pledge-responder-mode.</t>

<section anchor="tree-diagram"><name>Tree Diagram</name>

<t>The following tree diagram is mostly a duplicate of the contents of <xref target="RFC8995"/>, with the addition of the fields agent-signed-data, the registrar-proximity-certificate, and agent-signing certificate.
The tree diagram is described in <xref target="RFC8340"/>.
Each node in the diagram is fully described by the YANG module in Section <xref target="voucher-request-prm-yang-module"/>.</t>

<figure><artwork align="left"><![CDATA[
module: ietf-voucher-request-prm

 grouping voucher-request-prm-grouping
  +-- voucher
     +-- created-on?                               yang:date-and-time
     +-- expires-on?                               yang:date-and-time
     +-- assertion?                                enumeration
     +-- serial-number                             string
     +-- idevid-issuer?                            binary
     +-- pinned-domain-cert?                       binary
     +-- domain-cert-revocation-checks?            boolean
     +-- nonce?                                    binary
     +-- last-renewal-date?                        yang:date-and-time
     +-- prior-signed-voucher-request?             binary
     +-- proximity-registrar-cert?                 binary
     +-- agent-signed-data?                        binary
     +-- agent-provided-proximity-registrar-cert?  binary
     +-- agent-sign-cert?                          binary
]]></artwork></figure>

</section>
<section anchor="voucher-request-prm-yang-module"><name>YANG Module</name>

<t>The following YANG module extends the <xref target="RFC8995"/> Voucher Request to include a signed artifact from the registrar-agent (agent-signed-data) as well as the registrar-proximity-certificate and the
agent-signing certificate.</t>

<figure><artwork align="left"><![CDATA[
<CODE BEGINS> file "ietf-voucher-request-prm@2022-07-05.yang"

module ietf-voucher-request-prm {
  yang-version 1.1;

  namespace "urn:ietf:params:xml:ns:yang:ietf-voucher-request-prm";
  prefix vrprm;
  
  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access
       the yang-data extension defined in RFC 8040.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  import ietf-voucher-request {
    prefix vcr;
    description
      "This module defines the format for a voucher request,
          which is produced by a pledge as part of the RFC8995
          onboarding process.";
    reference
      "RFC 8995: Bootstrapping Remote Secure Key Infrastructure";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Steffen Fries
              <mailto:steffen.fries@siemens.com>
    Author:   Eliot Lear
              <mailto: lear@cisco.com>
    Author:   Thomas Werner
              <mailto: thomas-werner@siemens.com>
    Author:   Michael Richardson
              <mailto: mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher-request form the 
    pledge in responder mode. It bases on the voucher-request
    defined in RFC 8995, which is a superset of the voucher itself.
    It provides content to the MASA for consideration
    during a voucher-request.

    The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL
    NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED',
    'MAY', and 'OPTIONAL' in this document are to be interpreted as
    described in BCP 14 (RFC 2119) (RFC 8174) when, and only when,
    they appear in all capitals, as shown here.

    Copyright (c) 2021 IETF Trust and the persons identified as
    authors of the code. All rights reserved.

    Redistribution and use in source and binary forms, with or
    without modification, is permitted pursuant to, and subject
    to the license terms contained in, the Simplified BSD License
    set forth in Section 4.c of the IETF Trust's Legal Provisions
    Relating to IETF Documents
    (https://trustee.ietf.org/license-info).

    This version of this YANG module is part of RFC xxxx; see the
    RFC itself for full legal notices.";


  revision 2022-07-05 {
    description
     "Initial version";
    reference
     "RFC XXXX: BRSKI for Pledge in Responder Mode";
  }
  
  // Top-level statement
  rc:yang-data voucher-request-prm-artifact {
    // YANG data template for a voucher-request.
    uses voucher-request-prm-grouping;
  }
  // Grouping defined for future usage
  grouping voucher-request-prm-grouping {
    description
      "Grouping to allow reuse/extensions in future work.";
    uses vcr:voucher-request-grouping {

      augment voucher {
        description "Base the voucher-request-prm upon the
          regular one";
        leaf agent-signed-data {
          type binary;
          description
            "The agent-signed-data field contains a JOSE [RFC7515]
             object provided by the Registrar-Agent to the Pledge.

             This artifact is signed by the Registrar-Agent
             and contains a copy of the pledge's serial-number.";
        }

        leaf agent-provided-proximity-registrar-cert {
          type binary;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             The first certificate in the registrar TLS server
             certificate_list sequence (the end-entity TLS
             certificate; see RFC 8446) presented by the
             registrar to the registrar-agent and provided to
             the pledge.
             This MUST be populated in a pledge's voucher-request
             when an agent-proximity assertion is requested.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile
             RFC 8446: The Transport Layer Security (TLS)
             Protocol Version 1.3";
        }

        leaf-list agent-sign-cert {
          type binary;
          min-elements 1;
          description
            "An X.509 v3 certificate structure, as specified by
             RFC 5280, Section 4, encoded using the ASN.1
             distinguished encoding rules (DER), as specified
             in ITU X.690.
             This certificate can be used by the pledge,
             the registrar, and the MASA to verify the signature
             of agent-signed-data. It is an optional component
             for the pledge-voucher request.
             This MUST be populated in a registrar's
             voucher-request when an agent-proximity assertion
             is requested.
             It is defined as list to enable inclusion of further
             certificates along the certificate chain if different 
             issuing CAs have been used for the registrar-agent 
             and the registrar.";
          reference
            "ITU X.690: Information Technology - ASN.1 encoding
             rules: Specification of Basic Encoding Rules (BER),
             Canonical Encoding Rules (CER) and Distinguished
             Encoding Rules (DER)
             RFC 5280: Internet X.509 Public Key Infrastructure
             Certificate and Certificate Revocation List (CRL)
             Profile";
        }
      }
    }
  }
}

<CODE ENDS>
]]></artwork></figure>

<t>Examples for the PVR are provided in <xref target="exchanges_uc2_2"/>.</t>

</section>
</section>
</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document requires the following IANA actions.</t>

<section anchor="brski-well-known-registry"><name>BRSKI .well-known Registry</name>

<t>IANA is requested to enhance the Registry entitled: "BRSKI Well-Known URIs" with the following endpoints:</t>

<figure><artwork align="left"><![CDATA[
 URI                        Description                        Reference
 pledge-voucher-request     create pledge-voucher-request      [THISRFC] 
 pledge-enrollment-request  create pledge-enrollment-request   [THISRFC] 
 pledge-voucher             supply voucher response            [THISRFC] 
 pledge-enrollment          supply enrollment response         [THISRFC] 
 pledge-cacerts             supply CA certificates to pledge   [THISRFC] 
 pledge-status              query pledge status                [THISRFC]
 requestenroll              supply PER to registrar            [THISRFC] 
 wrappedcacerts             request wrapped CA certificates    [THISRFC] 
 
]]></artwork></figure>

</section>
</section>
<section anchor="privacy-considerations"><name>Privacy Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further privacy aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>The credential used by the registrar-agent to sign the data for the pledge should not contain any personal information.
Therefore, it is recommended to use an LDevID certificate associated with the device instead of an LDevID certificate associated with a potential service technician operating the device. This avoids revealing personal information to Registrar and MASA.</t>

<t>The communication between the pledge and the registrar-agent is performed over plain HTTP. 
Therefore, it is subject to disclosure by a Dolev-Yao attacker (a "oppressive observer")<xref target="onpath"/>. 
Depending on the requests and responses, the following information is disclosed.</t>

<t><list style="symbols">
  <t>Pledge product-serial-number is contained in the trigger message for the PVR and in all responses from the pledge. 
This information reveals the identity of the devices being bootstrapped and allows deduction of products an operator is using in his environment. 
As the communication between the pledge and the registrar-agent may be realized over wireless link, this information could be easily be eavesdropped, if the wireless interface does not apply security measures.</t>
  <t>Timestamp data could reveal the activation time of the device.</t>
  <t>Status data of the device could reveal information about the current state of the device in the domain network.</t>
</list></t>

</section>
<section anchor="sec_cons"><name>Security Considerations</name>

<t>In general, the security considerations of <xref target="RFC8995"/> apply for BRSKI-PRM also. 
Further security aspects need to be considered for:</t>

<t><list style="symbols">
  <t>the introduction of the additional component registrar-agent</t>
  <t>the reversal of the pledge communication direction (push mode, compared to BRSKI)</t>
  <t>no transport layer security between registrar-agent and pledge</t>
</list></t>

<t>TODO: other threads?</t>

<section anchor="denial-of-service-dos-attack-on-pledge"><name>Denial of Service (DoS) Attack on Pledge</name>

<t>Disrupting the pledge behavior by a DoS attack may prevent the bootstrapping of the pledge to a new domain.</t>

<t>A DoS attack with a faked registrar-agent may block the bootstrapping of the pledge due to state creation on the pledge (only vouchered). Mitigation may be that the pledge does not create a state if the bootstrapping is not finished after certain time.</t>

</section>
<section anchor="misuse-of-acquired-pvr-and-per-by-registrar-agent"><name>Misuse of acquired PVR and PER by Registrar-Agent</name>

<t>A registrar-agent that uses formerly acquired PVR and PER for domain-A in domain-B can be detected by the domain registrar while PVR processing.
This requires the domain registrar to verify the "proximity-registrar-cert" field in the PVR matches its own LDevID(Reg) certificate. 
In addition, the domain registrar has to verify the association of the pledge to its domain based on the product-serial-number contained in the PVR and in the IDevID certificate of the pledge.
Moreover, the domain registrar verifies if the registrar-agent is authorized to interact with the pledge for voucher-requests and enroll-requests, based on the LDevID(RegAgt) certificate data contained in the PVR.</t>

<t>Misbinding of a pledge by a faked domain registrar is countered as described in BRSKI security considerations <xref target="RFC8995"/> (section 11.4).</t>

</section>
<section anchor="sec_cons_reg-agt"><name>Misuse of Registrar-Agent Credentials</name>

<t>Concerns on misusage of an registrar-agent with a valid LDevID(RegAgt), may be addressed by utilizing short-lived certificates (e.g., valid for a day) to authenticate the registrar-agent against the domain registrar.
The LDevID(RegAgt) certificate may be acquired by a prior BRSKI run for the registrar-agent, if an IDevID is available on registrar-agent.
Alternatively, the LDevID may be acquired by a service technician from the domain PKI system in an authenticated way.</t>

<t>In addition it is required that the LDevID(RegAgt) certificate is valid for the complete bootstrapping phase. 
This avoids a registrar-agent could be misused to create arbitrary "agent-signed-data" objects to perform an authorized bootstrapping of a rouge pledge at a later point in time. 
As "agent-signed-data" could be dated after the validity time of the LDevID(RegAgt) certificate, due to missing trusted timestamp in the registrar-agents signature.   <br />
To address this, the registrar <bcp14>SHOULD</bcp14> verify the certificate used to create the signature on "agent-signed-data". 
Furthermore the registrar also verifies the LDevID(RegAgt) certificate used in the TLS handshake with the registrar-agent. If both certificates are verified successfully, the registrar-agents signature can be considered as valid.</t>

</section>
<section anchor="sec_cons_mDNS"><name>Misuse of mDNS to obtain list of pledges</name>

<t>To discover a specific pledge a registrar-agent may request the service name in combination with the product-serial-number of a specific pledge. 
If the registrar-agent performs DNS-based Service Discovery without a specific product-serial-number, all IP addresses of pledges in the domain will be returned.</t>

</section>
<section anchor="yang-module-security-considerations"><name>YANG Module Security Considerations</name>

<t>The enhanced voucher-request described in section <xref target="voucher-request-prm-yang"/> is bases on <xref target="RFC8995"/>, but uses a different encoding based on <xref target="I-D.ietf-anima-jws-voucher"/>.
Therefore similar considerations as described in <xref target="RFC8995"/> section 11.7 (Security Considerations) apply.
The YANG module specified in this document defines the schema for data that is subsequently encapsulated by a JOSE signed-data Content-type as described in <xref target="I-D.ietf-anima-jws-voucher"/>.
As such, all of the YANG-modeled data is protected against modification.
The use of YANG to define data structures via the "yang-data" statement, is relatively
new and distinct from the traditional use of YANG to define an API accessed by network management protocols such as NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
For this reason these guidelines do not follow the template described by <xref target="RFC8407"/> section 3.7 (Security Considerations Section).</t>

</section>
</section>
<section anchor="acknowledgments"><name>Acknowledgments</name>

<t>We would like to thank the various reviewers, in particular Brian E. Carpenter, Oskar Camenzind, and Hendrik Brockhaus for their input and discussion on use cases and call flows. 
Special thanks to Esko Dijk for the in deep review and the improving proposals.</t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC2986' target='https://www.rfc-editor.org/info/rfc2986'>
<front>
<title>PKCS #10: Certification Request Syntax Specification Version 1.7</title>
<author fullname='M. Nystrom' initials='M.' surname='Nystrom'><organization/></author>
<author fullname='B. Kaliski' initials='B.' surname='Kaliski'><organization/></author>
<date month='November' year='2000'/>
<abstract><t>This memo represents a republication of PKCS #10 v1.7 from RSA Laboratories' Public-Key Cryptography Standards (PKCS) series, and change control is retained within the PKCS process.  The body of this document, except for the security considerations section, is taken directly from the PKCS #9 v2.0 or the PKCS #10 v1.7 document.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='2986'/>
<seriesInfo name='DOI' value='10.17487/RFC2986'/>
</reference>



<reference anchor='RFC5280' target='https://www.rfc-editor.org/info/rfc5280'>
<front>
<title>Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile</title>
<author fullname='D. Cooper' initials='D.' surname='Cooper'><organization/></author>
<author fullname='S. Santesson' initials='S.' surname='Santesson'><organization/></author>
<author fullname='S. Farrell' initials='S.' surname='Farrell'><organization/></author>
<author fullname='S. Boeyen' initials='S.' surname='Boeyen'><organization/></author>
<author fullname='R. Housley' initials='R.' surname='Housley'><organization/></author>
<author fullname='W. Polk' initials='W.' surname='Polk'><organization/></author>
<date month='May' year='2008'/>
<abstract><t>This memo profiles the X.509 v3 certificate and X.509 v2 certificate revocation list (CRL) for use in the Internet.  An overview of this approach and model is provided as an introduction.  The X.509 v3 certificate format is described in detail, with additional information regarding the format and semantics of Internet name forms.  Standard certificate extensions are described and two Internet-specific extensions are defined.  A set of required certificate extensions is specified.  The X.509 v2 CRL format is described in detail along with standard and Internet-specific extensions.  An algorithm for X.509 certification path validation is described.  An ASN.1 module and examples are provided in the appendices.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5280'/>
<seriesInfo name='DOI' value='10.17487/RFC5280'/>
</reference>



<reference anchor='RFC6762' target='https://www.rfc-editor.org/info/rfc6762'>
<front>
<title>Multicast DNS</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>As networked devices become smaller, more portable, and more ubiquitous, the ability to operate with less configured infrastructure is increasingly important.  In particular, the ability to look up DNS resource record data types (including, but not limited to, host names) in the absence of a conventional managed DNS server is useful.</t><t>Multicast DNS (mDNS) provides the ability to perform DNS-like operations on the local link in the absence of any conventional Unicast DNS server.  In addition, Multicast DNS designates a portion of the DNS namespace to be free for local use, without the need to pay any annual fee, and without the need to set up delegations or otherwise configure a conventional DNS server to answer for those names.</t><t>The primary benefits of Multicast DNS names are that (i) they require little or no administration or configuration to set them up, (ii) they work when no infrastructure is present, and (iii) they work during infrastructure failures.</t></abstract>
</front>
<seriesInfo name='RFC' value='6762'/>
<seriesInfo name='DOI' value='10.17487/RFC6762'/>
</reference>



<reference anchor='RFC6763' target='https://www.rfc-editor.org/info/rfc6763'>
<front>
<title>DNS-Based Service Discovery</title>
<author fullname='S. Cheshire' initials='S.' surname='Cheshire'><organization/></author>
<author fullname='M. Krochmal' initials='M.' surname='Krochmal'><organization/></author>
<date month='February' year='2013'/>
<abstract><t>This document specifies how DNS resource records are named and structured to facilitate service discovery.  Given a type of service that a client is looking for, and a domain in which the client is looking for that service, this mechanism allows clients to discover a list of named instances of that desired service, using standard DNS queries. This mechanism is referred to as DNS-based Service Discovery, or DNS-SD.</t></abstract>
</front>
<seriesInfo name='RFC' value='6763'/>
<seriesInfo name='DOI' value='10.17487/RFC6763'/>
</reference>



<reference anchor='RFC7030' target='https://www.rfc-editor.org/info/rfc7030'>
<front>
<title>Enrollment over Secure Transport</title>
<author fullname='M. Pritikin' initials='M.' role='editor' surname='Pritikin'><organization/></author>
<author fullname='P. Yee' initials='P.' role='editor' surname='Yee'><organization/></author>
<author fullname='D. Harkins' initials='D.' role='editor' surname='Harkins'><organization/></author>
<date month='October' year='2013'/>
<abstract><t>This document profiles certificate enrollment for clients using Certificate Management over CMS (CMC) messages over a secure transport.  This profile, called Enrollment over Secure Transport (EST), describes a simple, yet functional, certificate management protocol targeting Public Key Infrastructure (PKI) clients that need to acquire client certificates and associated Certification Authority (CA) certificates.  It also supports client-generated public/private key pairs as well as key pairs generated by the CA.</t></abstract>
</front>
<seriesInfo name='RFC' value='7030'/>
<seriesInfo name='DOI' value='10.17487/RFC7030'/>
</reference>



<reference anchor='RFC7515' target='https://www.rfc-editor.org/info/rfc7515'>
<front>
<title>JSON Web Signature (JWS)</title>
<author fullname='M. Jones' initials='M.' surname='Jones'><organization/></author>
<author fullname='J. Bradley' initials='J.' surname='Bradley'><organization/></author>
<author fullname='N. Sakimura' initials='N.' surname='Sakimura'><organization/></author>
<date month='May' year='2015'/>
<abstract><t>JSON Web Signature (JWS) represents content secured with digital signatures or Message Authentication Codes (MACs) using JSON-based data structures.  Cryptographic algorithms and identifiers for use with this specification are described in the separate JSON Web Algorithms (JWA) specification and an IANA registry defined by that specification.  Related encryption capabilities are described in the separate JSON Web Encryption (JWE) specification.</t></abstract>
</front>
<seriesInfo name='RFC' value='7515'/>
<seriesInfo name='DOI' value='10.17487/RFC7515'/>
</reference>



<reference anchor='RFC8040' target='https://www.rfc-editor.org/info/rfc8040'>
<front>
<title>RESTCONF Protocol</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='January' year='2017'/>
<abstract><t>This document describes an HTTP-based protocol that provides a programmatic interface for accessing data defined in YANG, using the datastore concepts defined in the Network Configuration Protocol (NETCONF).</t></abstract>
</front>
<seriesInfo name='RFC' value='8040'/>
<seriesInfo name='DOI' value='10.17487/RFC8040'/>
</reference>



<reference anchor='RFC8366' target='https://www.rfc-editor.org/info/rfc8366'>
<front>
<title>A Voucher Artifact for Bootstrapping Protocols</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<date month='May' year='2018'/>
<abstract><t>This document defines a strategy to securely assign a pledge to an owner using an artifact signed, directly or indirectly, by the pledge's manufacturer.  This artifact is known as a &quot;voucher&quot;.</t><t>This document defines an artifact format as a YANG-defined JSON document that has been signed using a Cryptographic Message Syntax (CMS) structure.  Other YANG-derived formats are possible.  The voucher artifact is normally generated by the pledge's manufacturer (i.e., the Manufacturer Authorized Signing Authority (MASA)).</t><t>This document only defines the voucher artifact, leaving it to other documents to describe specialized protocols for accessing it.</t></abstract>
</front>
<seriesInfo name='RFC' value='8366'/>
<seriesInfo name='DOI' value='10.17487/RFC8366'/>
</reference>



<reference anchor='RFC8610' target='https://www.rfc-editor.org/info/rfc8610'>
<front>
<title>Concise Data Definition Language (CDDL): A Notational Convention to Express Concise Binary Object Representation (CBOR) and JSON Data Structures</title>
<author fullname='H. Birkholz' initials='H.' surname='Birkholz'><organization/></author>
<author fullname='C. Vigano' initials='C.' surname='Vigano'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2019'/>
<abstract><t>This document proposes a notational convention to express Concise Binary Object Representation (CBOR) data structures (RFC 7049).  Its main goal is to provide an easy and unambiguous way to express structures for protocol messages and data formats that use CBOR or JSON.</t></abstract>
</front>
<seriesInfo name='RFC' value='8610'/>
<seriesInfo name='DOI' value='10.17487/RFC8610'/>
</reference>



<reference anchor='RFC8792' target='https://www.rfc-editor.org/info/rfc8792'>
<front>
<title>Handling Long Lines in Content of Internet-Drafts and RFCs</title>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<author fullname='E. Auerswald' initials='E.' surname='Auerswald'><organization/></author>
<author fullname='A. Farrel' initials='A.' surname='Farrel'><organization/></author>
<author fullname='Q. Wu' initials='Q.' surname='Wu'><organization/></author>
<date month='June' year='2020'/>
<abstract><t>This document defines two strategies for handling long lines in width-bounded text content.  One strategy, called the &quot;single backslash&quot; strategy, is based on the historical use of a single backslash ('\') character to indicate where line-folding has occurred, with the continuation occurring with the first character that is not a space character (' ') on the next line.  The second strategy, called the &quot;double backslash&quot; strategy, extends the first strategy by adding a second backslash character to identify where the continuation begins and is thereby able to handle cases not supported by the first strategy.  Both strategies use a self-describing header enabling automated reconstitution of the original content.</t></abstract>
</front>
<seriesInfo name='RFC' value='8792'/>
<seriesInfo name='DOI' value='10.17487/RFC8792'/>
</reference>



<reference anchor='RFC8995' target='https://www.rfc-editor.org/info/rfc8995'>
<front>
<title>Bootstrapping Remote Secure Key Infrastructure (BRSKI)</title>
<author fullname='M. Pritikin' initials='M.' surname='Pritikin'><organization/></author>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='T. Eckert' initials='T.' surname='Eckert'><organization/></author>
<author fullname='M. Behringer' initials='M.' surname='Behringer'><organization/></author>
<author fullname='K. Watsen' initials='K.' surname='Watsen'><organization/></author>
<date month='May' year='2021'/>
<abstract><t>This document specifies automated bootstrapping of an Autonomic Control Plane.  To do this, a Secure Key Infrastructure is bootstrapped.  This is done using manufacturer-installed X.509 certificates, in combination with a manufacturer's authorizing service, both online and offline.  We call this process the Bootstrapping Remote Secure Key Infrastructure (BRSKI) protocol. Bootstrapping a new device can occur when using a routable address and a cloud service, only link-local connectivity, or limited/disconnected networks. Support for deployment models with less stringent security requirements is included. Bootstrapping is complete when the cryptographic identity of the new key infrastructure is successfully deployed to the device.  The established secure connection can be used to deploy a locally issued certificate to the device as well.</t></abstract>
</front>
<seriesInfo name='RFC' value='8995'/>
<seriesInfo name='DOI' value='10.17487/RFC8995'/>
</reference>


<reference anchor='I-D.ietf-anima-jws-voucher'>
   <front>
      <title>JWS signed Voucher Artifacts for Bootstrapping Protocols</title>
      <author fullname='Thomas Werner'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Michael Richardson'>
	 <organization>Sandelman Software Works</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   [RFC8366] defines a digital artifact called voucher as a YANG-defined
   JSON document that has been signed using a Cryptographic Message
   Syntax (CMS) structure.  This memo introduces a variant of the
   voucher structure in which CMS is replaced by the JSON Object Signing
   and Encryption (JOSE) mechanism described in RFC7515 to better
   support use-cases in which JOSE is preferred over CMS.

   In addition to explaining how the format is created, MIME types are
   registered and examples are provided.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-jws-voucher-04'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-jws-voucher-04.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-netconf-sztp-csr'>
   <front>
      <title>Conveying a Certificate Signing Request (CSR) in a Secure Zero Touch Provisioning (SZTP) Bootstrapping Request</title>
      <author fullname='Kent Watsen'>
	 <organization>Watsen Networks</organization>
      </author>
      <author fullname='Russ Housley'>
	 <organization>Vigil Security, LLC</organization>
      </author>
      <author fullname='Sean Turner'>
	 <organization>sn3rd</organization>
      </author>
      <date day='2' month='March' year='2022'/>
      <abstract>
	 <t>   This draft extends the input to the &quot;get-bootstrapping-data&quot; RPC
   defined in RFC 8572 to include an optional certificate signing
   request (CSR), enabling a bootstrapping device to additionally obtain
   an identity certificate (e.g., an LDevID from IEEE 802.1AR) as part
   of the &quot;onboarding information&quot; response provided in the RPC-reply.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-netconf-sztp-csr-14'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-netconf-sztp-csr-14.txt' type='TXT'/>
</reference>


<reference anchor='I-D.ietf-anima-rfc8366bis'>
   <front>
      <title>A Voucher Artifact for Bootstrapping Protocols</title>
      <author fullname='Kent Watsen'>
	 <organization>Juniper Networks</organization>
      </author>
      <author fullname='Michael C. Richardson'>
	 <organization>Sandelman Software</organization>
      </author>
      <author fullname='Max Pritikin'>
	 <organization>Cisco Systems</organization>
      </author>
      <author fullname='Toerless Eckert'>
	 <organization>Futurewei Technologies Inc.</organization>
      </author>
      <author fullname='Qiufang Ma'>
	 <organization>Huawei</organization>
      </author>
      <date day='31' month='January' year='2022'/>
      <abstract>
	 <t>   This document defines a strategy to securely assign a pledge to an
   owner using an artifact signed, directly or indirectly, by the
   pledge&#39;s manufacturer.  This artifact is known as a &quot;voucher&quot;.

   This document defines an artifact format as a YANG-defined JSON
   document that has been signed using a Cryptographic Message Syntax
   (CMS) structure.  Other YANG-derived formats are possible.  The
   voucher artifact is normally generated by the pledge&#39;s manufacturer
   (i.e., the Manufacturer Authorized Signing Authority (MASA)).

   This document only defines the voucher artifact, leaving it to other
   documents to describe specialized protocols for accessing it.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-rfc8366bis-00'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-rfc8366bis-00.txt' type='TXT'/>
</reference>



<reference anchor='RFC2119' target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author fullname='S. Bradner' initials='S.' surname='Bradner'><organization/></author>
<date month='March' year='1997'/>
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference anchor='RFC8174' target='https://www.rfc-editor.org/info/rfc8174'>
<front>
<title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
<author fullname='B. Leiba' initials='B.' surname='Leiba'><organization/></author>
<date month='May' year='2017'/>
<abstract><t>RFC 2119 specifies common key words that may be used in protocol  specifications.  This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the  defined special meanings.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='8174'/>
<seriesInfo name='DOI' value='10.17487/RFC8174'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor='RFC6241' target='https://www.rfc-editor.org/info/rfc6241'>
<front>
<title>Network Configuration Protocol (NETCONF)</title>
<author fullname='R. Enns' initials='R.' role='editor' surname='Enns'><organization/></author>
<author fullname='M. Bjorklund' initials='M.' role='editor' surname='Bjorklund'><organization/></author>
<author fullname='J. Schoenwaelder' initials='J.' role='editor' surname='Schoenwaelder'><organization/></author>
<author fullname='A. Bierman' initials='A.' role='editor' surname='Bierman'><organization/></author>
<date month='June' year='2011'/>
<abstract><t>The Network Configuration Protocol (NETCONF) defined in this document provides mechanisms to install, manipulate, and delete the configuration of network devices.  It uses an Extensible Markup Language (XML)-based data encoding for the configuration data as well as the protocol messages.  The NETCONF protocol operations are realized as remote procedure calls (RPCs).  This document obsoletes RFC 4741.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6241'/>
<seriesInfo name='DOI' value='10.17487/RFC6241'/>
</reference>



<reference anchor='RFC7252' target='https://www.rfc-editor.org/info/rfc7252'>
<front>
<title>The Constrained Application Protocol (CoAP)</title>
<author fullname='Z. Shelby' initials='Z.' surname='Shelby'><organization/></author>
<author fullname='K. Hartke' initials='K.' surname='Hartke'><organization/></author>
<author fullname='C. Bormann' initials='C.' surname='Bormann'><organization/></author>
<date month='June' year='2014'/>
<abstract><t>The Constrained Application Protocol (CoAP) is a specialized web transfer protocol for use with constrained nodes and constrained (e.g., low-power, lossy) networks.  The nodes often have 8-bit microcontrollers with small amounts of ROM and RAM, while constrained networks such as IPv6 over Low-Power Wireless Personal Area Networks (6LoWPANs) often have high packet error rates and a typical throughput of 10s of kbit/s.  The protocol is designed for machine- to-machine (M2M) applications such as smart energy and building automation.</t><t>CoAP provides a request/response interaction model between application endpoints, supports built-in discovery of services and resources, and includes key concepts of the Web such as URIs and Internet media types.  CoAP is designed to easily interface with HTTP for integration with the Web while meeting specialized requirements such as multicast support, very low overhead, and simplicity for constrained environments.</t></abstract>
</front>
<seriesInfo name='RFC' value='7252'/>
<seriesInfo name='DOI' value='10.17487/RFC7252'/>
</reference>



<reference anchor='RFC8152' target='https://www.rfc-editor.org/info/rfc8152'>
<front>
<title>CBOR Object Signing and Encryption (COSE)</title>
<author fullname='J. Schaad' initials='J.' surname='Schaad'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>Concise Binary Object Representation (CBOR) is a data format designed for small code size and small message size.  There is a need for the ability to have basic security services defined for this data format. This document defines the CBOR Object Signing and Encryption (COSE) protocol.  This specification describes how to create and process signatures, message authentication codes, and encryption using CBOR for serialization.  This specification additionally describes how to represent cryptographic keys using CBOR.</t></abstract>
</front>
<seriesInfo name='RFC' value='8152'/>
<seriesInfo name='DOI' value='10.17487/RFC8152'/>
</reference>



<reference anchor='RFC8340' target='https://www.rfc-editor.org/info/rfc8340'>
<front>
<title>YANG Tree Diagrams</title>
<author fullname='M. Bjorklund' initials='M.' surname='Bjorklund'><organization/></author>
<author fullname='L. Berger' initials='L.' role='editor' surname='Berger'><organization/></author>
<date month='March' year='2018'/>
<abstract><t>This document captures the current syntax used in YANG module tree diagrams.  The purpose of this document is to provide a single location for this definition.  This syntax may be updated from time to time based on the evolution of the YANG language.</t></abstract>
</front>
<seriesInfo name='BCP' value='215'/>
<seriesInfo name='RFC' value='8340'/>
<seriesInfo name='DOI' value='10.17487/RFC8340'/>
</reference>



<reference anchor='RFC8407' target='https://www.rfc-editor.org/info/rfc8407'>
<front>
<title>Guidelines for Authors and Reviewers of Documents Containing YANG Data Models</title>
<author fullname='A. Bierman' initials='A.' surname='Bierman'><organization/></author>
<date month='October' year='2018'/>
<abstract><t>This memo provides guidelines for authors and reviewers of specifications containing YANG modules.  Recommendations and procedures are defined, which are intended to increase interoperability and usability of Network Configuration Protocol (NETCONF) and RESTCONF protocol implementations that utilize YANG modules.  This document obsoletes RFC 6087.</t></abstract>
</front>
<seriesInfo name='BCP' value='216'/>
<seriesInfo name='RFC' value='8407'/>
<seriesInfo name='DOI' value='10.17487/RFC8407'/>
</reference>



<reference anchor='RFC9110' target='https://www.rfc-editor.org/info/rfc9110'>
<front>
<title>HTTP Semantics</title>
<author fullname='R. Fielding' initials='R.' role='editor' surname='Fielding'><organization/></author>
<author fullname='M. Nottingham' initials='M.' role='editor' surname='Nottingham'><organization/></author>
<author fullname='J. Reschke' initials='J.' role='editor' surname='Reschke'><organization/></author>
<date month='June' year='2022'/>
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems. This document describes the overall architecture of HTTP, establishes common terminology, and defines aspects of the protocol that are shared by all versions. In this definition are core protocol elements, extensibility mechanisms, and the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes. </t><t>This document updates RFC 3864 and obsoletes RFCs 2818, 7231, 7232, 7233, 7235, 7538, 7615, 7694, and portions of 7230.</t></abstract>
</front>
<seriesInfo name='STD' value='97'/>
<seriesInfo name='RFC' value='9110'/>
<seriesInfo name='DOI' value='10.17487/RFC9110'/>
</reference>



<reference anchor='RFC9238' target='https://www.rfc-editor.org/info/rfc9238'>
<front>
<title>Loading Manufacturer Usage Description (MUD) URLs from QR Codes</title>
<author fullname='M. Richardson' initials='M.' surname='Richardson'><organization/></author>
<author fullname='J. Latour' initials='J.' surname='Latour'><organization/></author>
<author fullname='H. Habibi Gharakheili' initials='H.' surname='Habibi Gharakheili'><organization/></author>
<date month='May' year='2022'/>
<abstract><t>This informational document details a protocol to load Manufacturer Usage Description (MUD) definitions from RFC 8520 for devices that do not have them integrated.</t><t>This document is published to inform the Internet community of this mechanism to allow interoperability and to serve as a basis of other standards work if there is interest.</t></abstract>
</front>
<seriesInfo name='RFC' value='9238'/>
<seriesInfo name='DOI' value='10.17487/RFC9238'/>
</reference>


<reference anchor='I-D.ietf-anima-brski-ae'>
   <front>
      <title>BRSKI-AE: Alternative Enrollment Protocols in BRSKI</title>
      <author fullname='David von Oheimb'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Steffen Fries'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Hendrik Brockhaus'>
	 <organization>Siemens AG</organization>
      </author>
      <author fullname='Eliot Lear'>
	 <organization>Cisco Systems</organization>
      </author>
      <date day='3' month='June' year='2022'/>
      <abstract>
	 <t>   This document enhances Bootstrapping Remote Secure Key Infrastructure
   (BRSKI, RFC 8995) to allow employing alternative enrollment
   protocols, such as CMP.

   Using self-contained signed objects, the origin of enrollment
   requests and responses can be authenticated independently of message
   transfer.  This supports end-to-end security and asynchronous
   operation of certificate enrollment and provides flexibility where to
   authenticate and authorize certification requests.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-ietf-anima-brski-ae-02'/>
   <format target='https://www.ietf.org/archive/id/draft-ietf-anima-brski-ae-02.txt' type='TXT'/>
</reference>


<reference anchor="IEEE-802.1AR" >
  <front>
    <title>IEEE 802.1AR Secure Device Identifier</title>
    <author >
      <organization>Institute of Electrical and Electronics Engineers</organization>
    </author>
    <date year="2018" month="June"/>
  </front>
  <seriesInfo name="IEEE" value="802.1AR "/>
</reference>
<reference anchor="BRSKI-PRM-abstract" >
  <front>
    <title>Abstract BRSKI-PRM Protocol Overview</title>
    <author >
      <organization></organization>
    </author>
    <date year="2022" month="April"/>
  </front>
  <format type="PNG" target="https://raw.githubusercontent.com/anima-wg/anima-brski-prm/main/pics/brski_prm_overview.png"/>
</reference>
<reference anchor="onpath" target="https://mailarchive.ietf.org/arch/msg/saag/m1r9uo4xYznOcf85Eyk0Rhut598/">
  <front>
    <title>can an on-path attacker drop traffic?</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="examples"><name>Examples</name>

<t>These examples are folded according to <xref target="RFC8792"/> Single Backslash rule.</t>

<section anchor="example-pledge-voucher-request-pvr-from-pledge-to-registrar-agent"><name>Example Pledge Voucher Request - PVR (from Pledge to Registrar-agent)</name>

<t>The following is an example request sent from a Pledge to the Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Pledge Voucher Request - PVR" anchor="ExamplePledgeVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload":
    "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3NlcnRpb24\
iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5\
vbmNlIjoiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjI\
tMDctMTJUMDQ6NDg6NTYuNTYzWiIsImFnZW50LXByb3ZpZGVkLXByb3hpbWl0eS1yZWd\
pc3RyYXItY2VydCI6Ik1JSUI0akNDQVlpZ0F3SUJBZ0lHQVhZNzJiYlpNQW9HQ0NxR1N\
NNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01\
CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MHlNREV5TURjd05qRTRNVEp\
hRncwek1ERXlNRGN3TmpFNE1USmFNRDR4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzN\
NeERUQUxCZ05WQkFjTUJGTnBkR1V4R0RBV0JnTlZCQU1NRDBSdmJXRnBibEpsWjJsemR\
ISmhjakJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQmsxNksvaTc5b1J\
rSzVZYmVQZzhVU1I4L3VzMWRQVWlaSE10b2tTZHFLVzVmbldzQmQrcVJMN1dSZmZlV2t\
5Z2Vib0pmSWxsdXJjaTI1d25oaU9WQ0dqZXpCNU1CMEdBMVVkSlFRV01CUUdDQ3NHQVF\
VRkJ3TUJCZ2dyQmdFRkJRY0RIREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdTQVlEVlIwUkJ\
FRXdQNElkY21WbmFYTjBjbUZ5TFhSbGMzUXVjMmxsYldWdWN5MWlkQzV1WlhTQ0huSmx\
aMmx6ZEhKaGNpMTBaWE4wTmk1emFXVnRaVzV6TFdKMExtNWxkREFLQmdncWhrak9QUVF\
EQWdOSUFEQkZBaUJ4bGRCaFpxMEV2NUpMMlByV0N0eVM2aERZVzF5Q08vUmF1YnBDN01\
hSURnSWhBTFNKYmdMbmdoYmJBZzBkY1dGVVZvL2dHTjAvand6SlowU2wyaDR4SVhrMSI\
sImFnZW50LXNpZ25lZC1kYXRhIjoiZXlKd1lYbHNiMkZrSWpvaVpYbEtjRnBZVW0xTVd\
GcDJaRmRPYjFwWVNYUmpiVlo0WkZkV2VtUkRNWGRqYlRBMldWZGtiR0p1VVhSak1teHV\
ZbTFXYTB4WFVtaGtSMFZwVDI1emFWa3pTbXhaV0ZKc1drTXhkbUpwU1RaSmFrbDNUV3B\
KZEUxRVVYUk5hbHBWVFVSVk5rMUVZelpPUkVWMVRrUlJORmRwU1hOSmJrNXNZMjFzYUd\
KRE1YVmtWekZwV2xoSmFVOXBTWGROVkVsNlRrUlZNazU2WnpWSmJqRTVJaXdpYzJsbmJ\
tRjBkWEpsY3lJNlczc2ljSEp2ZEdWamRHVmtJam9pWlhsS2NtRlhVV2xQYVVwWlkwaHd\
jMVJWZERSaVNFSkNUbXBvYWxaVVZrZFZWVEZaVmxoYWRWTldVVEpWV0dNNVNXbDNhVmx\
YZUc1SmFtOXBVbFpOZVU1VVdXbG1VU0lzSW5OcFoyNWhkSFZ5WlNJNklrY3pWM2hHU0d\
WMFdGQTRiR3hTVmkwNWRXSnlURmxxU25aUllUWmZlUzFRYWxGWk5FNWhkMW81Y0ZKaGI\
yeE9TbTlFTm1SbFpXdHVTVjlGV0daemVWWlRZbmM0VTBONlRWcE1iakJoUVhWb2FVZFp\
UakJSSW4xZGZRPT0iLCJhZ2VudC1zaWduLWNlcnQiOlsiTUlJQjFEQ0NBWHFnQXdJQkF\
nSUVZbWQ0T1RBS0JnZ3Foa2pPUFFRREFqQStNUk13RVFZRFZRUUtEQXBOZVVKMWMybHV\
aWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWlhOMFVIVnphRTF\
2WkdWc1EwRXdIaGNOTWpJd05ESTJNRFEwTWpNeldoY05Nekl3TkRJMk1EUTBNak16V2p\
BOU1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1\
SY3dGUVlEVlFRRERBNVNaV2RwYzNSeVlYSkJaMlZ1ZERCWk1CTUdCeXFHU000OUFnRUd\
DQ3FHU000OUF3RUhBMElBQkd4bHJOZmozaVJiNy9CUW9kVys1WWlvT3poK2pJdHlxdVJ\
JTy9XejdZb1czaXdEYzNGeGV3TFZmekNyNU52RDEzWmFGYjdmcmFuK3Q5b3RZNVdMaEo\
2alp6QmxNQTRHQTFVZER3RUIvd1FFQXdJSGdEQWZCZ05WSFNNRUdEQVdnQlJ2b1QxdWR\
lMmY2TEVRaFU3SEhqK3ZKL2Q3SXpBZEJnTlZIUTRFRmdRVVhwemxNS3hscEE2OGNVNUZ\
RTVhVdm5JVDZRd3dFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3Q2dZSUtvWkl6ajB\
FQXdJRFNBQXdSUUlnYzJ5NnhvT3RvUUJsSnNnbE9MMVZ4SEdvc1R5cEVxUmZ6MFF2NFp\
FUHY0d0NJUUNWeWIyRjl6VjNuOTUrb2xnZkZKZ1pUV0V6NGRTYUYzaHpSUWIzWnVCMjl\
RPT0iLCJNSUlCekRDQ0FYR2dBd0lCQWdJRVhYakhwREFLQmdncWhrak9QUVFEQWpBMU1\
STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1ROHd\
EUVlEVlFRRERBWlVaWE4wUTBFd0hoY05NVGt3T1RFeE1UQXdPRE0yV2hjTk1qa3dPVEV\
4TVRBd09ETTJXakErTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek1RMHdDd1lEVlF\
RSERBUlRhWFJsTVJnd0ZnWURWUVFEREE5VVpYTjBVSFZ6YUUxdlpHVnNRMEV3V1RBVEJ\
nY3Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVRsRzBmd1QzM29leloxdmtIUWJldGV\
ibWorQm9WK1pGc2pjZlF3MlRPa0pQaE9rT2ZBYnU5YlMxcVppOHlhRVY4b2VyS2wvNlp\
YYmZ4T21CanJScmNYbzJZd1pEQVNCZ05WSFJNQkFmOEVDREFHQVFIL0FnRUFNQTRHQTF\
VZER3RUIvd1FFQXdJQ0JEQWZCZ05WSFNNRUdEQVdnQlRvWklNelFkc0Qvai8rZ1gvN2N\
CSnVjSC9YbWpBZEJnTlZIUTRFRmdRVWI2RTliblh0bitpeEVJVk94eDQvcnlmM2V5TXd\
DZ1lJS29aSXpqMEVBd0lEU1FBd1JnSWhBUG5CMHcxTkN1cmhNeEp3d2ZqejdnRGlpeGt\
VWUxQU1o5ZU45a29oTlFVakFpRUF3NFk3bHR4V2lQd0t0MUo5bmp5ZkRObDVNdUVEQml\
teFIzQ1hvWktHUXJVPSJdfX0",
  "signatures": 
    [{ "protected":
         "eyJ4NWMiOlsiTUlJQitUQ0NBYUNnQXdJQkFnSUdBWG5WanNVNU1Bb0dDQ3\
FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeEthVzVuU2\
1sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQ0FYRFRJeE\
1EWXdOREExTkRZeE5Gb1lEems1T1RreE1qTXhNak0xT1RVNVdqQlNNUXN3Q1FZRFZRUU\
dFd0pCVVRFVk1CTUdBMVVFQ2d3TVNtbHVaMHBwYm1kRGIzSndNUk13RVFZRFZRUUZFd2\
93TVRJek5EVTJOemc1TVJjd0ZRWURWUVFEREE1S2FXNW5TbWx1WjBSbGRtbGpaVEJaTU\
JNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCQzc5bGlhUmNCalpjRUVYdzdyVW\
VhdnRHSkF1SDRwazRJNDJ2YUJNc1UxMWlMRENDTGtWaHRVVjIxbXZhS0N2TXgyWStTTW\
dROGZmd0wyM3ozVElWQldqZFRCek1Dc0dDQ3NHQVFVRkJ3RWdCQjhXSFcxaGMyRXRkR1\
Z6ZEM1emFXVnRaVzV6TFdKMExtNWxkRG81TkRRek1COEdBMVVkSXdRWU1CYUFGRlFMak\
56UFwvU1wva291alF3amc1RTVmdndjWWJNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd0\
1DTUE0R0ExVWREd0VCXC93UUVBd0lIZ0RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCdT\
N3UkJMc0pNUDVzTTA3MEgrVUZyeU5VNmdLekxPUmNGeVJST2xxcUhpZ0lnWENtSkxUek\
VsdkQycG9LNmR4NmwxXC91eW1UbmJRRERmSmxhdHVYMlJvT0U9Il0sInR5cCI6InZvdW\
NoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
      "signature":
        "n1rKu3odtbq-rIPHlE08BU-gSf0vKFDtiUL5Q2j8y1BmDXvj4SPUYscjdiu\
BxYF7SzsdECCfpPiL_jLbwQiG1Q"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-parboiled-registrar-voucher-request-rvr-from-registrar-to-masa"><name>Example Parboiled Registrar Voucher Request - RVR (from Registrar to MASA)</name>

<t>The term parboiled refers to food which is partially cooked.  In [BRSKI], the term refers to a Pledge voucher-request (PVR) which has
been received by the Registrar, and then has been processed by the Registrar ("cooked"), and is now being forwarded to the MASA.</t>

<t>The following is an example Registrar voucher-request (RVR) sent from the Registrar to the MASA, in "General JWS JSON Serialization".
Note that the previous PVR can be seen in the payload as "prior-signed-voucher-request".</t>

<figure title="Example Registrar Voucher Request - RVR" anchor="ExampleRegistrarVoucherRequestfigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXItcmVxdWVzdC1wcm06dm91Y2hlciI6eyJhc3\
NlcnRpb24iOiJhZ2VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Nj\
c4OSIsImlkZXZpZC1pc3N1ZXIiOiJCQmd3Rm9BVVZBdU0zTS85TCtTaTZORENPRGtUbC\
svQnhocz0iLCJub25jZSI6IjVvQm91L1J3ajQrZE1KN0JRK1VqdGc9PSIsInByaW9yLX\
NpZ25lZC12b3VjaGVyLXJlcXVlc3QiOiJleUp3WVhsc2IyRmtJam9pWlhsS2NGcFlVbT\
FNV0ZwMlpGZE9iMXBZU1hSamJWWjRaRmRXZW1SRE1YZGpiVEEyWkcwNU1Wa3lhR3hqYV\
VrMlpYbEthR016VG14amJsSndZakkwYVU5cFNtaGFNbFoxWkVNeGQyTnRPVFJoVnpGd1\
pFaHJhVXhEU25wYVdFcHdXVmQzZEdKdVZuUlpiVlo1U1dwdmFVMUVSWGxOZWxFeFRtcG\
pORTlUU1hOSmJUVjJZbTFPYkVscWIybE9WemxEWWpOVmRsVnVaSEZPUTNSclZGVnZNMU\
ZzUlhKV1YzQXdXbm93T1VscGQybFpNMHBzV1ZoU2JGcERNWFppYVVrMlNXcEpkMDFxU1\
hSTlJHTjBUVlJLVlUxRVVUWk9SR2MyVGxSWmRVNVVXWHBYYVVselNXMUdibHBYTlRCTV\
dFSjVZak5hY0ZwSFZtdE1XRUo1WWpOb2NHSlhiREJsVXpGNVdsZGtjR016VW5sWldFbD\
BXVEpXZVdSRFNUWkphekZLVTFWSk1HRnJUa1JSVm14d1dqQkdNMU5WU2tKYU1HeElVVl\
pvV2s1NlNtbFpiSEJPVVZjNVNGRXdUbmhTTVU1T1RrUnNRMUZWTVVSVVZWSldaVVZXTm\
xGV1NrTmFNRFZYVVd0R2RsUlZUbkpOVkZaU1lteGFObGxXWXpGaVIwMTZWRmhvUlZaRl\
JrMVJiV1JQVm10S1Fsa3dNVU5TYXpWM1drVmtWbVZGVWpaUlZUVkRXakExVjFGclJrNV\
VWVXB6VlcxNGFrMHhTa1ZWVmxKQ1dsVmFNMDFJYkU1U1JWWTFWRlZTYW1Rd05YRlNWRk\
pPVmtWd2FGSnVZM2RsYXpGRlVsaHNUbEpIVGpOVWJYQkdUa1V4VlZOdFJrNVNSRkkwVW\
xod1FsVnJTbTVVYkZwRFVWYzVUbEV5YzNoT1ZrWjFWbTV3YUZaNlZuTlplazVPWlVWU1\
ZWRlZlRU5hTURWWFVXdEdhbFJWU2tkVWJrSnJVakZXTkZJd1VrSldNRXB1Vkd4YVExRl\
ZNVTVTUkVKVFpHMUtXRkp1UW1saVJYQnpWMnBLYzJWdFVrbFRiV2hxWVd0S1lWUlZTaz\
VTTUVvMVkxVmtWRlJVVVRWUlYyUkdVakJPUkdOVlpGUlVWRkUxVVZoa1JsTkZSWGRUVl\
VaRFVXMXplRTVyYzNaaFZHTTFZakZLY2xONlZscFpiVlpSV25wb1ZsVXhTVFJNTTFaNl\
RWZFNVVlpYYkdGVFJURXdZakowVkZwSVJreFdlbFp0WW14a2VsRnRVWEpqVmtwTlRqRm\
tVMXB0V214V01uUTFXakpXYVdJd2NHMVRWM2h6WkZoS2FtRlVTVEZrTWpWdllWVTVWMU\
V3WkhGYVdIQkRUbFV4UTAxRlpFSk5WbFpyVTJ4R1VsWXdNVU5WVldSRVVUTk9TRkZXUm\
xaU2Ewb3pWRlZLUTFveVpIbFJiV1JHVW10S1Vsa3dVa2xTUlVaUVVXMWtUMVpyYUZKUF\
JVcENXbXBvUmxGclJrNVJNRWt3VVZoa1ZGRldiRVZXYkVsM1ZXdEtSbEpZWkZGT1JXeH\
JXVEl4VjJKdFJsbFVha0pxWWxWYU5WUkdhRk5pUjAxNlZWaFdhazF0ZUhOWmJHUlhaRm\
RPTlUxWGJHdFJlbFl4VjJ4b1ZGRXdhSFZUYlhoaFRXMTRObHBGYUV0aFIwNXdUVlJDWV\
ZkRk5IZFViV3N4WlcxR1dGWnVVbUZXZWxZMlZFWmtTMDFGZUhST1YzaHJVa1ZHVEZGdF\
pHNWpWMmh5WVdzNVVWVldSa1ZSVjJSUFUxVkdSVkZyV2tKaFZVbzBZa2RTUTJGR2NIaE\
5SVll5VGxWd1RVMXNRbmxXTUU0d1pWWk5NbUZGVWxwV2VrWTFVVEE0ZGxWdFJqRlpia0\
pFVGpBeGFGTlZVbTVUVjJoQ1ZFWk9TMWx0WkUxaWJXUnZXVzFLUWxwNlFtdFpNV1JIVm\
xaYWRrd3laRWhVYWtGMllXNWtObE5zYjNkVk1uZDVZVVJTTkZOV2FISk5VMGx6U1cxR2\
JscFhOVEJNV0U1d1dqSTFiRnBETVd0WldGSm9TV3B2YVZwWWJFdGtNV3haWWtoT2FVMX\
JXbkpUVjNCMllWWndXV0pGZEdwU2JrSmFWbGN3ZUZSV1pFZGpSRXBoVW0xU1VGbHFSbm\
RYVms1WlZXMXdhVlpzYnpCWGExcHJWakpXZEZWclVrNVhSMUp4V1d4U1FrMXNaRmRhUj\
NScFVqQndNVlpXYUZOaGF6RjBaVWhXV21KVVJsaFpWRUkwVjBaV2RHRkhkRk5OUmxwM1\
ZrUkpNV1Z0UmxkaE0zQlVZbGhvWVZZd1drdGpNV1J5VkZob2EySlZjSGRWTVZKaFUyMU\
djbUpFVGxWV00wSkxXa1ZWZUZKV1ZsbFZhelZvWWtoQ1YxWkdWbE5XYXpWeVRWVldXbV\
ZzY0ZCVmExWlhUVlpTY2xWc1NrOVNiVkozVlRGb1QxTnRTbkpPV0U1YVRXcEdlbGxWWk\
V0U1JURlpWbTEwVjJWclduZFdNbmh2VTIxR1ZrOVlRbFJYUjFKUFZtdFdjMDVzVW5KVm\
JGcE9ZWHBWTWxkdWNGZFRiVXB4VWxSV1NtRllaSEJaZWtwelltMUtkRkpxUW10WFJYQn\
pXVE5zU2s1c1kzcGpNbXhxVTBWd01scEZaRmRoYlZKSVZtMTBTbUZ0T1hCWGJHaHpVek\
pPZEZKc2FGWldNbmhSV1ZaV2QxZHNhM2RoU0dScVRWWktWMXBGVWxOaFZrNUdVMnRPVl\
dKWVFuWlpWM2hoVmxaYWNscEdXbGRXUlZwaFZtMTRiMWxYVWxkVWJHUldWa1Z3VjFZd1\
pFNU9WazVZWWtST2FGWnRlRmxhVldNeFUyMUdkRTlZUWxaaVJuQlBXbFpWTVZaV1pGaG\
lSekZXVlRCc2VsTlhOVTlqUm05NVRsZG9hMU5HV2pWWGJFNUtUbXRzY2xremNGZE5NbW\
hJVlRCa1YwMUdaRWRSVkZKcFVqTm9WRlp0YTNkT1YxSllVMjVzVlZKdGVIaFZNalZoVl\
d4c1ZWZHRXbXhWZWtaU1dWZDRSMWRyTlVaT1YyaHJUVmM0TVZrd1drdGhSMGw1WlVVNV\
ZHSlViRVpVYlRGVFlrWndXR1JJVmxSV2FteEhWakJrWVdWdFZsZFhiRkphWW0xTk1GWl\
VRazlPYkZKWFkwVXhhV0ZyU205VlZtaFhZakpHVmxwR2NGVmhhMHBUVTFjMGVGcEhXbE\
pRVkRCcFRFTkthRm95Vm5Wa1F6RjZZVmRrZFV4WFRteGpibEZwVDJ4emFWUlZiRXBSYW\
taRlVUQk9RbGRJUm01UldHUktVV3RHYmxOVlZscGlWMUV3VkRGU1FsTXdTbTVhTTBadl\
lUSndVRlZHUmxKU1JVWnhVVk4wVGxWck1UTlNWa1phVWtaYVVsVlZkRVZSV0VKUFdsWl\
dTMDFYVFhsaVNGWmhWMFUxTmxSV1JYZGtNRTR6VjFWU1YxVldSa2xTUlVaVFZrZEdXVl\
Z0ZUU1VmJXUXpVbTFrV2xKR1dsSlZWVkpGVVZSc1ZsZHNhRTlOUmxaSlZtNXdhRkpVUm\
pKWGEyUlhZekZGZDFKWVpFbGhSMDVQVkZkd1NtUXdOVVZUVkVwT1VrWkZkMVJYY0U1bG\
JHUnZXVEExVG1WcmJETlVhMUpLVFdzeFJWVlVRazVoYXpFMlZqSndRazlWTVZOVVdHUk\
dWVlpzUlZac1JsSlRNRkpDWTBVMWJGWlZiM2haZWtwelpGWndXVlJ1Y0U1VlZFSXpVVE\
5rV2xKR1dsSlZWV2hGVVZaS1ZWbFdhRk5pUlRGVFdUTmtSMVZXYkVWV2JFWlNVa1ZTUW\
s1V1RtRldNbEozV1hwT1UyVldiRmxUYTBwaFRXeGFNVnBGVWtOWGF6RkRWRlZrUTJWWV\
JraFZNREF3VDFWR2JsSlZaRVJSTTBaSVZUQXdNRTlWUmpOU1ZXaENUVVZzUWxGclpEUm\
lTRXBQV20xdmVtRldTbWxPZVRsRFZWYzVhMVo1Y3pGWFYyeDJWRE53YjBzeWNFcGtTR3\
g0WkZaS1NsUjVPVmhsYW1SYVlqRmplbUZZWkVWWmVrNUhaVWRXTTFSR1dtMWxhMDU1VG\
xVMU1sSkVSWHBYYlVaSFdXcGtiV050Um5WTE0xRTFZak5TV2s1V1pFMWhSVzh5WVd4d0\
5sRnRlRTVSVkZKSVVWUkdWbHBGVWpOU1ZVbDJaREZHUmxGWVpFcFRSMlJGVVZkYVExb3\
dOVmRUUms1T1VsVmtSVkZXWkc1UmJFb3lZakZSZUdSWFVteE5iVmt5VkVWV1VtRkdWVE\
5UUldoeFN6TmFTMHd5VVROVFdIQkNXa1ZLYmxSc1drbFZWRkpHVW0xa1VsWldhSGRsYl\
hoT1V6Tm9jMk5GUlRKUFIwNVdUbFZhVWxSV2FGWmtiVFZLVmtSYVVtUXpaRVprTVd4Rl\
ZteEpkMkpGU2tKa00yUkVXakZzU2xNelpGcFJhMHBTVmxWb1FtUXdiRE5STW1SYVUxVj\
BkbGRyYkRaaGFrSkdVVmhrU2xKR1RrSlJXR1JUVlZWc2JsbDZTalZPYm1oMlZETlNkbF\
ZWU25OVGJrNXVZa1U1VFUxV1dqUlRSV1IyWXpGU05XTkZWbmhWYlZvMlRVWkdNazVHY0\
VaVlNGa3daREJPU2xWVlRsZGxWMGw1VW1wc05sWnFUblZQVkZWeVlqSjRibHByV2t0YU\
1YQlZWakJXTms1SFVsUlpWVmw2WVVod1UxVlhTWHBYYmxaRFRXcHNVbEJVTUdsTVEwcE\
9VMVZzUTJWclVrUlJNRVpaVWpKa1FtUXdiRU5SVjJSS1VsWm9XV0ZyYUhkU1JVWk1VVz\
FrYm1OWGFISmhhemxSVlZaR1JWRlhjRUpOVlRGVFZGaGtSbFZXYkVWV2JFWlNVekJTUW\
1ORk5XeFdWVzk0V1hwS2MyUldjRmxVYm5CT1ZWUkNNMUV6WkZwU1JscFNWVlZvUlZGV1\
NsVlpWbWhUWWtVeFVrOUlaRVZWVm14RlZteEdVbEpGVWtKWGJGWmhWMFUwZDFWVVFrWm\
tNR2h2V1RBMVRsWkhkRE5VTVZKR1pVVXhWVkZZWkZCU1JUQjVWakpvYWxSck1YRmhNMl\
JRVmtWV05GUldVa0prTURsRlZGUktXR0ZyUlhKVVZrcE9aREJXVWxkVlVsZFZWa1pNVW\
tWR2QxUnRWbFpUYWtacVRXMTRNVmRzYUU5bGF6RlNUVWhrUkdReGJFVldiRVpTVTBWU1\
FsVnNVbWhYUmtwelZGWktibVF3V201WFZWSlhWVlpHUlZKRlJUVldWbkJaVkdwQ1ZsTk\
dXalpaVlZWNFpHeHdTRlp1VGxKTlJWWXpWakZTUWxaRlNtNVpNMFp2WVRKd1VGVkdSa3\
BSYTBwdVdqTkdiMkV5Y0ZCVlJrWk9VV3RLTTFSclRrSlJWbEp6VW5wQ2JXUXhVWHBOTW\
psc1pXeHZlR1J0ZEVsVlYwcHNaRWRXYVdKWGIzSlJiVGxYU3pGd1IyTXljR3BhYkVZel\
RXeFNVR0V3Y0ZGaFJUbHlWREphUWxsdVZUVlpiRTE0WTFad2NFOUliR2hTVmxrMFlqSl\
dlVk15ZDNaT2JIQlpXVzFhTkZReU1VTmhia3BUWTIxT1dXSjZTbHBrTVhCRlVWWk9RMW\
93TlZkVFJrcE9VV3RHYlU5RlZrUlNSVVpJVVZaR1NVd3dSbTVTVlVaT1VWUlNTRkZVUm\
xaYVJWSXpVbFZKZG1ReFJrWlJXR1JLVVRCS1JWRlhXa05hTURWWFUwWk9UbEpWWkVWUl\
ZtUnVVV3hTZGxkcmJFNWxiRVpyWXpCUmRtRnBPSEphTVdkMlRqSk9RMU51Vm1wVFF6bF\
pZbGR3UWxwRlNtNVViRnBKVlZSU1JsSnRaRkpXVjBreVVsUnNhV0pzYURCaWFYUndaVV\
ZXU2xack9UUmxSRkYyWTI1c2JVMHlWalZVV0dSRVdqRnNTbE15T1dGVFdIQnhUVVZXUW\
1Rd2JFVlZNVVpDWkRGS2JsTlhhRUpWUnpWRFRVaGplRlJyVGpGamJXaE9aVVZ3TTJReV\
duRmxhbVJ1VWtkc2NHVkhkRlpYVlhoUlZURnZOVnBWTkRWaE1qbHZWR3hHVm1GclJuQl\
NWVVl6VGtack0ySklValJXTW14UlpEQjBNRTFWYnpWaWJYQTFXbXRTVDJKRVZrNWtWVl\
pGVVcxc2RHVkdTWHBSTVdoMlYydDBTRlZZU2xaUVUwcGtabGd3SWl3aWMybG5ibUYwZF\
hKbGN5STZXM3NpY0hKdmRHVmpkR1ZrSWpvaVpYbEtORTVYVFdsUGJITnBWRlZzU2xGcG\
RGVlJNRTVDV1ZWT2JsRllaRXBSYTBadVUxVmtRbGRITlZkaGJrNVdUbFV4UW1Jd1pFUl\
JNMFpJVlRBd01FOVZTa0pVVlU1T1VrUkNORkV6Y0VKVGEwcHVWR3hhUTFGV2JGVlJWM1\
JIVldzeFUxWllaRVprTVd4RlZteEdVbE13VWtKbFJYUm9WbnBXZFZVeU1YTmtWbTkzVk\
c1YWFtSnJSalJTYm5CQ1ZtdEtibFJzV2tOUlZURk9Va2QwZDJOSFNuUmFSWFJvVm5wV2\
RWWnJaRmRsYlZKR1ZHdEtUbEV3UmxsU1JsSktaVVV4UlZkWVpFOVNSVVY0Vkd0U1dtVk\
ZOVWRpTVd4RlpXMXpNVlF4VW5KbFJURnhWRmhvVG1Gck1IaFVNVkpXVGxaa2NWRnNUaz\
VWV0U0elVURkdXbEpHV2xKVlZXUkdaREJ3UTFaV1VrWldhekZEVkZWa1FrMVdWa1pSTW\
1RelZGWk9kR0pJVm1GTlNFSjNXVzB4YTFKSFNYcFRibVJPVldzeE0xSldSbHBTUmxwU1\
ZWVmFSbVF5T1ROVVZsSktaV3MxUlZaVVNrOWxiV014VkZaS2FtUXdXbEpYVlZKWFZWWk\
dSVkpGUlRGVE1rWllUbGMxVkdKWGVERlhha0pUWWtkU2RHSkhjR0ZXUlVwaFZGVktUbE\
l3U2pWalZXUlVWRlJSTlZGWFpFWlNNRTVFWTFWa1ZGUlVVVFZSV0dSR1UwVkZkMU5WUm\
tOUmVtTTFZa2RzYUZWdFRrTmhiSEJxVWxWV1dXUjZaSGxXVjFab1pHNVNTRk5yUmpGVF\
JGSjNZWHBTU2s1RVNqSlpWVXBPWXpGVmVFMVhiRTFTUlU1RVZFZDBWMkZJVWxaV2FrbD\
RZbGhhYUZNd1RqSlVXR2Q1VjFOMFZGUlhaRkpQUjFwdFpEQjNlVTB6YjNwV1JXeFhVV3\
hrY1ZwR1VrTmxhekZFWXpCa1JGRXpUa2hSVmtaV1VtdEtNMUpYWkVOUmFtaFlVMFpqZU\
dGSFRYbFNXRkpyVWpGYU5scEZUVEZsYlVaWVZtNVNZVlo2VmpaVVJtUkxUVVY0ZEU1WG\
VHdFNSemd4Vkd0U1VtVnJNVU5QUldSQ1RWWldhMU5ZWkZKWFZURkRXVlZHUjFKc1JrMW\
hhelUyVlVaM2RsVXhkM1poTWpreFlXeEdNMkZ0WXpGU1ZGWnRaRzVrYWxkWFNrNVJhek\
ZJVVZSR1ZscEZjRkpWVlRGT1VWYzVTRkV3VG5wU01FWlNWbFZhUTJRd01VUlVWVVV3VW\
pCRmVGWlhVa1ZrTUZaRFdFTTVNMVZWVmtKa01HeEpXakJTUWxNd1NtNWFNMFp2WVRKd1\
VGVkdSbEpTUlVadVZHdG9RbEpGU2taUlYyeERaRlJPTTFWclNrMWpNSEJPVlVSV2VsUl\
VRVE5OUldkeVZsVmFlV1ZWTlZaT2JXUk1aV3Q0VUZWdFRrZGxWa3BUVkRKNGVHTlZhSE\
JhTUd4dVYwVk9kRk5yZUZWbGExWnpaR3RSZVdOSE9VeE9iVkkwVG0xM2VGaERPVEZsVn\
pGVlltMUtVbEpGVW0xVGJYaG9aRWhXV1Uxc1NuWlVNRlU1U1d3d2MwbHVValZqUTBrMl\
NXNWFkbVJYVG05YVdFbDBZVzVrZWtzeWNIcGlNalJwVEVOS2FHSkhZMmxQYVVwR1ZYcE\
pNVTVwU2praUxDSnphV2R1WVhSMWNtVWlPaUp1TVhKTGRUTnZaSFJpY1MxeVNWQkliRV\
V3T0VKVkxXZFRaakIyUzBaRWRHbFZURFZSTW1vNGVURkNiVVJZZG1vMFUxQlZXWE5qYW\
1ScGRVSjRXVVkzVTNwelpFVkRRMlp3VUdsTVgycE1ZbmRSYVVjeFVTSjlYWDA9IiwiY3\
JlYXRlZC1vbiI6IjIwMjItMDctMTJUMDQ6NDk6MDcuMTM0WiIsImFnZW50LXNpZ24tY2\
VydCI6WyJNSUlCMURDQ0FYcWdBd0lCQWdJRVltZDRPVEFLQmdncWhrak9QUVFEQWpBK0\
1STXdFUVlEVlFRS0RBcE5lVUoxYzJsdVpYTnpNUTB3Q3dZRFZRUUhEQVJUYVhSbE1SZ3\
dGZ1lEVlFRRERBOVVaWE4wVUhWemFFMXZaR1ZzUTBFd0hoY05Nakl3TkRJMk1EUTBNak\
16V2hjTk16SXdOREkyTURRME1qTXpXakE5TVJNd0VRWURWUVFLREFwTmVVSjFjMmx1Wl\
hOek1RMHdDd1lEVlFRSERBUlRhWFJsTVJjd0ZRWURWUVFEREE1U1pXZHBjM1J5WVhKQl\
oyVnVkREJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCR3hsck5majNpUm\
I3L0JRb2RXKzVZaW9Pemgrakl0eXF1UklPL1d6N1lvVzNpd0RjM0Z4ZXdMVmZ6Q3I1Tn\
ZEMTNaYUZiN2ZyYW4rdDlvdFk1V0xoSjZqWnpCbE1BNEdBMVVkRHdFQi93UUVBd0lIZ0\
RBZkJnTlZIU01FR0RBV2dCUnZvVDF1ZGUyZjZMRVFoVTdISGordkovZDdJekFkQmdOVk\
hRNEVGZ1FVWHB6bE1LeGxwQTY4Y1U1RlFNWFV2bklUNlF3d0V3WURWUjBsQkF3d0NnWU\
lLd1lCQlFVSEF3SXdDZ1lJS29aSXpqMEVBd0lEU0FBd1JRSWdjMnk2eG9PdG9RQmxKc2\
dsT0wxVnhIR29zVHlwRXFSZnowUXY0WkVQdjR3Q0lRQ1Z5YjJGOXpWM245NStvbGdmRk\
pnWlRXRXo0ZFNhRjNoelJRYjNadUIyOVE9PSIsIk1JSUJ6RENDQVhHZ0F3SUJBZ0lFWF\
hqSHBEQUtCZ2dxaGtqT1BRUURBakExTVJNd0VRWURWUVFLREFwTmVVSjFjMmx1WlhOek\
1RMHdDd1lEVlFRSERBUlRhWFJsTVE4d0RRWURWUVFEREFaVVpYTjBRMEV3SGhjTk1Ua3\
dPVEV4TVRBd09ETTJXaGNOTWprd09URXhNVEF3T0RNMldqQStNUk13RVFZRFZRUUtEQX\
BOZVVKMWMybHVaWE56TVEwd0N3WURWUVFIREFSVGFYUmxNUmd3RmdZRFZRUUREQTlVWl\
hOMFVIVnphRTF2WkdWc1EwRXdXVEFUQmdjcWhrak9QUUlCQmdncWhrak9QUU1CQndOQ0\
FBVGxHMGZ3VDMzb2V6WjF2a0hRYmV0ZWJtaitCb1YrWkZzamNmUXcyVE9rSlBoT2tPZk\
FidTliUzFxWmk4eWFFVjhvZXJLbC82WlhiZnhPbUJqclJyY1hvMll3WkRBU0JnTlZIUk\
1CQWY4RUNEQUdBUUgvQWdFQU1BNEdBMVVkRHdFQi93UUVBd0lDQkRBZkJnTlZIU01FR0\
RBV2dCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFkQmdOVkhRNEVGZ1FVYjZFOW\
JuWHRuK2l4RUlWT3h4NC9yeWYzZXlNd0NnWUlLb1pJemowRUF3SURTUUF3UmdJaEFQbk\
IwdzFOQ3VyaE14Snd3Zmp6N2dEaWl4a1VZTFBTWjllTjlrb2hOUVVqQWlFQXc0WTdsdH\
hXaVB3S3QxSjluanlmRE5sNU11RURCaW14UjNDWG9aS0dRclU9Il19fQ",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQm96Q0NBVXFnQXdJQkFnSUdBVzBlTHVJRk\
1Bb0dDQ3FHU000OUJBTUNNRFV4RXpBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQU\
xCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweE9UQTVNVE\
V3TWpNM016SmFGdzB5T1RBNU1URXdNak0zTXpKYU1GUXhFekFSQmdOVkJBb01DazE1UW\
5WemFXNWxjM014RFRBTEJnTlZCQWNNQkZOcGRHVXhMakFzQmdOVkJBTU1KVkpsWjJsem\
RISmhjaUJXYjNWamFHVnlJRkpsY1hWbGMzUWdVMmxuYm1sdVp5QkxaWGt3V1RBVEJnY3\
Foa2pPUFFJQkJnZ3Foa2pPUFFNQkJ3TkNBQVQ2eFZ2QXZxVHoxWlVpdU5XaFhwUXNrYV\
B5N0FISFFMd1hpSjBpRUx0NnVOUGFuQU4wUW5XTVlPXC8wQ0RFaklrQlFvYnc4WUtxan\
R4SkhWU0dUajlLT295Y3dKVEFUQmdOVkhTVUVEREFLQmdnckJnRUZCUWNESERBT0JnTl\
ZIUThCQWY4RUJBTUNCNEF3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnWXIyTGZxb2FDS0\
RGNFJBY01tSmkrTkNacWRTaXVWdWdJU0E3T2hLUnEzWUNJRHhuUE1NbnBYQU1UclBKdV\
BXeWNlRVIxMVB4SE9uKzBDcFNIaTJxZ3BXWCIsIk1JSUJwRENDQVVtZ0F3SUJBZ0lHQV\
cwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMTVRblZ6YVc1bG\
MzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1JEUVRBZUZ3MH\
hPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RXpBUkJnTlZCQW\
9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTkJnTlZCQU1NQm\
xSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSUFCT2t2a1RIdT\
hRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDZcL1NjWTVQSmlidm\
dIVEIrRlwvUVRqZ2VsSEd5MVlLcHdjTk1jc1N5YWpSVEJETUJJR0ExVWRFd0VCXC93UU\
lNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSFwvQkFRREFnSUVNQjBHQTFVZERnUVdCQlRvWk\
lNelFkc0RcL2pcLytnWFwvN2NCSnVjSFwvWG1qQUtCZ2dxaGtqT1BRUURBZ05KQURCR0\
FpRUF0eFEzK0lMR0JQSXRTaDRiOVdYaFhOdWhxU1A2SCtiXC9MQ1wvZlZZRGpRNm9DSV\
FERzJ1UkNIbFZxM3loQjU4VFhNVWJ6SDgrT2xoV1V2T2xSRDNWRXFEZGNRdz09Il0sIn\
R5cCI6InZvdWNoZXItandzK2pzb24iLCJhbGciOiJFUzI1NiJ9",
    "signature": "ZUUUwtjvbYfIteRb_9OUuh4WibxwpZLAHAlVAXNMSY1De6ub2U\
aOJrCam-OIrZ7-QguUJwm5VEHJ14NEdAWGOQ"
    }]
}
]]></artwork></figure>

</section>
<section anchor="example-voucher-response-from-masa-to-pledge-via-registrar-and-registrar-agent"><name>Example Voucher Response (from MASA to Pledge, via Registrar and Registrar-agent)</name>

<t>The following is an example voucher response from MASA to Pledge via Registrar and Registrar-agent, in "General JWS JSON Serialization".</t>

<figure title="Example Voucher Response" anchor="ExampleVoucherResponsefigure"><artwork align="left"><![CDATA[
=============== NOTE: '\' line wrapping per RFC 8792 ================

{
  "payload": "eyJpZXRmLXZvdWNoZXI6dm91Y2hlciI6eyJhc3NlcnRpb24iOiJhZ2\
VudC1wcm94aW1pdHkiLCJzZXJpYWwtbnVtYmVyIjoiMDEyMzQ1Njc4OSIsIm5vbmNlIj\
oiNW9Cb3UvUndqNCtkTUo3QlErVWp0Zz09IiwiY3JlYXRlZC1vbiI6IjIwMjItMDctMT\
JUMDQ6NDk6MDcuNjAyWiIsInBpbm5lZC1kb21haW4tY2VydCI6Ik1JSUJwRENDQVVtZ0\
F3SUJBZ0lHQVcwZUx1SCtNQW9HQ0NxR1NNNDlCQU1DTURVeEV6QVJCZ05WQkFvTUNrMT\
VRblZ6YVc1bGMzTXhEVEFMQmdOVkJBY01CRk5wZEdVeER6QU5CZ05WQkFNTUJsUmxjM1\
JEUVRBZUZ3MHhPVEE1TVRFd01qTTNNekphRncweU9UQTVNVEV3TWpNM016SmFNRFV4RX\
pBUkJnTlZCQW9NQ2sxNVFuVnphVzVsYzNNeERUQUxCZ05WQkFjTUJGTnBkR1V4RHpBTk\
JnTlZCQU1NQmxSbGMzUkRRVEJaTUJNR0J5cUdTTTQ5QWdFR0NDcUdTTTQ5QXdFSEEwSU\
FCT2t2a1RIdThRbFQzRkhKMVVhSTcrV3NIT2IwVVMzU0FMdEc1d3VLUURqaWV4MDYvU2\
NZNVBKaWJ2Z0hUQitGL1FUamdlbEhHeTFZS3B3Y05NY3NTeWFqUlRCRE1CSUdBMVVkRX\
dFQi93UUlNQVlCQWY4Q0FRRXdEZ1lEVlIwUEFRSC9CQVFEQWdJRU1CMEdBMVVkRGdRV0\
JCVG9aSU16UWRzRC9qLytnWC83Y0JKdWNIL1htakFLQmdncWhrak9QUVFEQWdOSkFEQk\
dBaUVBdHhRMytJTEdCUEl0U2g0YjlXWGhYTnVocVNQNkgrYi9MQy9mVllEalE2b0NJUU\
RHMnVSQ0hsVnEzeWhCNThUWE1VYnpIOCtPbGhXVXZPbFJEM1ZFcURkY1F3PT0ifX0",
  "signatures": [{
    "protected": "eyJ4NWMiOlsiTUlJQmt6Q0NBVGlnQXdJQkFnSUdBV0ZCakNrWU\
1Bb0dDQ3FHU000OUJBTUNNRDB4Q3pBSkJnTlZCQVlUQWtGUk1SVXdFd1lEVlFRS0RBeE\
thVzVuU21sdVowTnZjbkF4RnpBVkJnTlZCQU1NRGtwcGJtZEthVzVuVkdWemRFTkJNQj\
RYRFRFNE1ERXlPVEV3TlRJME1Gb1hEVEk0TURFeU9URXdOVEkwTUZvd1R6RUxNQWtHQT\
FVRUJoTUNRVkV4RlRBVEJnTlZCQW9NREVwcGJtZEthVzVuUTI5eWNERXBNQ2NHQTFVRU\
F3d2dTbWx1WjBwcGJtZERiM0p3SUZadmRXTm9aWElnVTJsbmJtbHVaeUJMWlhrd1dUQV\
RCZ2NxaGtqT1BRSUJCZ2dxaGtqT1BRTUJCd05DQUFTQzZiZUxBbWVxMVZ3NmlRclJzOF\
IwWlcrNGIxR1d5ZG1XczJHQU1GV3diaXRmMm5JWEgzT3FIS1Z1OHMyUnZpQkdOaXZPS0\
dCSEh0QmRpRkVaWnZiN294SXdFREFPQmdOVkhROEJBZjhFQkFNQ0I0QXdDZ1lJS29aSX\
pqMEVBd0lEU1FBd1JnSWhBSTRQWWJ4dHNzSFAyVkh4XC90elVvUVwvU3N5ZEwzMERRSU\
5FdGNOOW1DVFhQQWlFQXZJYjNvK0ZPM0JUbmNMRnNhSlpSQWtkN3pPdXNuXC9cL1pLT2\
FFS2JzVkRpVT0iXSwidHlwIjoidm91Y2hlci1qd3MranNvbiIsImFsZyI6IkVTMjU2In\
0",
    "signature": "HFqpWjVKYn_cSLleTohzSygHbv_dYxz6opknJK5w_ZaLGroGym\
zBs2Ofk8DrX9zYiWZrVR7Y6HDcxY-aErEbiA"
    }]
}
]]></artwork></figure>

</section>
</section>
<section anchor="app_history"><name>History of Changes [RFC Editor: please delete]</name>

<t>Proof of Concept Code available</t>

<t>From IETF draft 04 -&gt; IETF draft 05:</t>

<t><list style="symbols">
  <t>Added new protected header parameter (created-on) in PER to support freshness validation, issue #63</t>
  <t>Added explanation of MASA requiring domain CA cert in section 5.5.1 and section 5.5.2, issue #36</t>
  <t>Removed reference to CAB Forum as not needed for BRSKI-PRM specifically, issue #65</t>
  <t>Enhanced error codes in section 5.5.1, issue #39, #64</t>
  <t>Enhanced security considerations and privacy considerations, issue #59</t>
  <t>Reworked terminology of "enrollment object", "certification object", "enrollment request object", etc., issue #27</t>
  <t>Reworked all message representations to align with encoding</t>
  <t>Included examples for several objects in section <xref target="examples"/></t>
  <t>Defined new endpoint for pledge bootstrapping status inquiry, issue #35 in section <xref target="exchanges_uc2_5"/>, IANA considerations and section <xref target="pledge_ep"/></t>
  <t>PoP for private key to registrar certificate included as mandatory, issues #32 and #49</t>
  <t>Issue #50 addressed by referring to the utilized enrollment protocol</t>
  <t>Issue #47 MASA verification of LDevID(RegAgt) to the same LDevID(Reg) domain CA</t>
  <t>Issue #31, clarified that combined pledge may act as client/server for further (re)enrollment</t>
  <t>Issue #42, clarified that Registrar needs to verify the status responses with and ensure that they match the audit log response from the MASA, otherwise it needs drop the pledge and revoke the certificate</t>
  <t>Issue #43, clarified that the pledge shall use the create time from the trigger message if the time has not been synchronized, yet.</t>
</list></t>

<t>From IETF draft 03 -&gt; IETF draft 04:</t>

<t><list style="symbols">
  <t>In deep Review by Esko Dijk lead to issues #22-#61, which are bein stepwise integrated</t>
  <t>Simplified YANG definition by augmenting the voucher request from RFC 8995 instead of redefining it.</t>
  <t>Added explanation for terminology "endpoint" used in this document, issue #16</t>
  <t>Added clarification that registrar-agent may collect PVR or PER or both in one run, issue #17</t>
  <t>Added a statement that nonceless voucher may be accepted, issue #18</t>
  <t>Simplified structure in section <xref target="sup-env"/>, issue #19</t>
  <t>Removed join proxy in <xref target="uc2figure"/> and added explanatory text, issue #20</t>
  <t>Added description of pledge-CAcerts endpoint plus further handling of providing a wrapped CA certs response to the pledge in section <xref target="exchanges_uc2_3"/>; also added new required registrar endpoint (section <xref target="exchanges_uc2_2"/> and IANA considerations) for the registrar to provide a wrapped CA certs response, issue #21</t>
  <t>utilized defined abbreviations in the document consistently, issue #22</t>
  <t>Reworked text on discovery according to issue #23 to clarify scope and handling</t>
  <t>Added several clarifications based on review comments</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Updated examples to state "base64encodedvalue==" for x5c occurrences</t>
  <t>Include link to SVG graphic as general overview</t>
  <t>Restructuring of section 5 to flatten hierarchy</t>
  <t>Enhanced requirements and motivation in <xref target="req-sol"/></t>
  <t>Several editorial improvements based on review comments</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Issue #15 included additional signature on voucher from registrar in section <xref target="exchanges_uc2_2"/> and section <xref target="agt_prx"/>
The verification of multiple signatures is described in section <xref target="exchanges_uc2_3"/></t>
  <t>Included representation for General JWS JSON Serialization for examples</t>
  <t>Included error responses from pledge if it is not able to create a pledge-voucher request or an enrollment request in section <xref target="exchanges_uc2_1"/></t>
  <t>Removed open issue regarding handling of multiple CSRs and enrollment responses during the bootstrapping as the initial target it the provisioning of a generic LDevID certificate. The defined endpoint on the pledge may also be used for management of further certificates.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Issue #15 lead to the inclusion of an option for an additional signature of the registrar on the voucher received from the MASA before forwarding to the registrar-agent to support verification of POP of the registrars private key in section <xref target="exchanges_uc2_2"/> and <xref target="exchanges_uc2_3"/>.</t>
  <t>Based on issue #11, a new endpoint was defined for the registrar to enable delivery of the wrapped enrollment request from the pledge (in contrast to plain PKCS#10 in simple enroll).</t>
  <t>Decision on issue #8 to not provide an additional signature on the enrollment-response object by the registrar. As the enrollment response will only contain the generic LDevID certificate. This credential builds the base for further configuration outside the initial enrollment.</t>
  <t>Decision on issue #7 to not support multiple CSRs during the bootstrapping, as based on the generic LDevID certificate the pledge may enroll for further certificates.</t>
  <t>Closed open issue #5 regarding verification of ietf-ztp-types usage as verified 
via a proof-of-concept in section {#exchanges_uc2_1}.</t>
  <t>Housekeeping: Removed already addressed open issues stated in the draft directly.</t>
  <t>Reworked text in from introduction to section pledge-responder-mode</t>
  <t>Fixed "serial-number" encoding in PVR/RVR</t>
  <t>Added prior-signed-voucher-request in the parameter description of the 
registrar-voucher-request in <xref target="exchanges_uc2_2"/>.</t>
  <t>Note added in <xref target="exchanges_uc2_2"/> if sub-CAs are used, that the 
corresponding information is to be provided to the MASA.</t>
  <t>Inclusion of limitation section (pledge sleeps and needs to be waked 
up. Pledge is awake but registrar-agent is not available) (Issue #10).</t>
  <t>Assertion-type aligned with voucher in RFC8366bis, deleted related 
open issues. (Issue #4)</t>
  <t>Included table for endpoints in <xref target="pledge_ep"/> for better readability.</t>
  <t>Included registrar authorization check for registrar-agent during 
TLS handshake  in section <xref target="exchanges_uc2_2"/>. Also enhanced figure 
<xref target="exchangesfig_uc2_2"/> with the authorization step on TLS level.</t>
  <t>Enhanced description of registrar authorization check for registrar-agent 
based on the agent-signed-data in section <xref target="exchanges_uc2_2"/>. Also 
enhanced figure <xref target="exchangesfig_uc2_2"/> with the authorization step 
on pledge-voucher-request level.</t>
  <t>Changed agent-signed-cert to an array to allow for providing further 
certificate information like the issuing CA cert for the LDevID(RegAgt) 
certificate in case the registrar and the registrar-agent have different 
issuing CAs in <xref target="exchangesfig_uc2_2"/> (issue #12). 
This also required changes in the YANG module in <xref target="voucher-request-prm-yang-module"/></t>
  <t>Addressed YANG warning (issue #1)</t>
  <t>Inclusion of examples for a trigger to create a pledge-voucher-request 
and an enrollment-request.</t>
</list></t>

<t>From IETF draft-ietf-anima-brski-async-enroll-03 -&gt; IETF anima-brski-prm-00:</t>

<t><list style="symbols">
  <t>Moved UC2 related parts defining the pledge in responder mode from
draft-ietf-anima-brski-async-enroll-03 to this document
This required changes and adaptations in several sections to remove
the description and references to UC1.</t>
  <t>Addressed feedback for voucher-request enhancements from YANG doctor
early review in <xref target="voucher-request-prm-yang"/> as well as in the
security considerations (formerly named ietf-async-voucher-request).</t>
  <t>Renamed ietf-async-voucher-request to IETF-voucher-request-prm to
to allow better listing of voucher related extensions; aligned with
constraint voucher (#20)</t>
  <t>Utilized ietf-voucher-request-async instead of ietf-voucher-request
in voucher exchanges to utilize the enhanced voucher-request.</t>
  <t>Included changes from draft-ietf-netconf-sztp-csr-06 regarding the
YANG definition of csr-types into the enrollment request exchange.</t>
</list></t>

<t>From IETF draft 02 -&gt; IETF draft 03:</t>

<t><list style="symbols">
  <t>Housekeeping, deleted open issue regarding YANG voucher-request
in <xref target="exchanges_uc2_1"/> as voucher-request was
enhanced with additional leaf.</t>
  <t>Included open issues in YANG model in <xref target="uc2"/> regarding assertion
value agent-proximity and csr encapsulation using SZTP sub module).</t>
</list></t>

<t>From IETF draft 01 -&gt; IETF draft 02:</t>

<t><list style="symbols">
  <t>Defined call flow and objects for interactions in UC2. Object format
based on draft for JOSE signed voucher artifacts and aligned the
remaining objects with this approach in <xref target="exchanges_uc2"/> .</t>
  <t>Terminology change: issue #2 pledge-agent -&gt; registrar-agent to
better underline agent relation.</t>
  <t>Terminology change: issue #3 PULL/PUSH -&gt; pledge-initiator-mode
and pledge-responder-mode to better address the pledge operation.</t>
  <t>Communication approach between pledge and registrar-agent
changed by removing TLS-PSK (former section TLS establishment)
and associated references to other drafts in favor of relying on
higher layer exchange of signed data objects. These data objects
are included also in the pledge-voucher-request and lead to an
extension of the YANG module for the voucher-request (issue #12).</t>
  <t>Details on trust relationship between registrar-agent and
registrar (issue #4, #5, #9) included in <xref target="uc2"/>.</t>
  <t>Recommendation regarding short-lived certificates for
registrar-agent authentication towards registrar (issue #7) in
the security considerations.</t>
  <t>Introduction of reference to agent signing certificate using SKID
in agent signed data (issue #37).</t>
  <t>Enhanced objects in exchanges between pledge and registrar-agent
to allow the registrar to verify agent-proximity to the pledge
(issue #1) in <xref target="exchanges_uc2"/>.</t>
  <t>Details on trust relationship between registrar-agent and
pledge (issue #5) included in <xref target="uc2"/>.</t>
  <t>Split of use case 2 call flow into sub sections in <xref target="exchanges_uc2"/>.</t>
</list></t>

<t>From IETF draft 00 -&gt; IETF draft 01:</t>

<t><list style="symbols">
  <t>Update of scope in <xref target="sup-env"/> to include in
which the pledge acts as a server. This is one main motivation
for use case 2.</t>
  <t>Rework of use case 2 in <xref target="uc2"/> to consider the
transport between the pledge and the pledge-agent. Addressed is
the TLS channel establishment between the pledge-agent and the
pledge as well as the endpoint definition on the pledge.</t>
  <t>First description of exchanged object types (needs more work)</t>
  <t>Clarification in discovery options for enrollment endpoints at
the domain registrar based on well-known endpoints do not
result in additional /.well-known URIs. Update of the illustrative example.
Note that the change to /brski for the voucher related endpoints
has been taken over in the BRSKI main document.</t>
  <t>Updated references.</t>
  <t>Included Thomas Werner as additional author for the document.</t>
</list></t>

<t>From individual version 03 -&gt; IETF draft 00:</t>

<t><list style="symbols">
  <t>Inclusion of discovery options of enrollment endpoints at
the domain registrar based on well-known endpoints in
new section as replacement of section 5.1.3
in the individual draft. This is intended to support both use
cases in the document. An illustrative example is provided.</t>
  <t>Missing details provided for the description and call flow in
pledge-agent use case <xref target="uc2"/>, e.g. to
accommodate distribution of CA certificates.</t>
  <t>Updated CMP example in to use lightweight CMP instead of CMP, as the draft already provides
the necessary /.well-known endpoints.</t>
  <t>Requirements discussion moved to separate section in
<xref target="req-sol"/>. Shortened description of proof
of identity binding and mapping to existing protocols.</t>
  <t>Removal of copied call flows for voucher exchange and registrar
discovery flow from <xref target="RFC8995"/> in UC1 to avoid doubling or text or
inconsistencies.</t>
  <t>Reworked abstract and introduction to be more crisp regarding
the targeted solution. Several structural changes in the document
to have a better distinction between requirements, use case
description, and solution description as separate sections.
History moved to appendix.</t>
</list></t>

<t>From individual version 02 -&gt; 03:</t>

<t><list style="symbols">
  <t>Update of terminology from self-contained to authenticated
self-contained object to be consistent in the wording and to
underline the protection of the object with an existing
credential. Note that the naming of this object may be discussed.
An alternative name may be attestation object.</t>
  <t>Simplification of the architecture approach for the initial use
case having an offsite PKI.</t>
  <t>Introduction of a new use case utilizing authenticated
self-contain objects to onboard a pledge using a commissioning
tool containing a pledge-agent. This requires additional changes
in the BRSKI call flow sequence and led to changes in the
introduction, the application example,and also in the
related BRSKI-PRM call flow.</t>
</list></t>

<t>From individual version 01 -&gt; 02:</t>

<t><list style="symbols">
  <t>Update of introduction text to clearly relate to the usage of
IDevID and LDevID.</t>
  <t>Update of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Enhanced consideration of existing enrollment protocols in the
context of mapping the requirements to existing solutions in
<xref target="req-sol"/>.</t>
</list></t>

<t>From individual version 00 -&gt; 01:</t>

<t><list style="symbols">
  <t>Update of examples, specifically for building automation as
well as two new application use cases in <xref target="sup-env"/>.</t>
  <t>Deletion of asynchronous interaction with MASA to not
complicate the use case. Note that the voucher exchange can
already be handled in an asynchronous manner and is therefore
not considered further. This resulted in removal of the
alternative path the MASA in Figure 1 and the associated
description in <xref target="architecture"/>.</t>
  <t>Enhancement of description of architecture elements and
changes to BRSKI in <xref target="architecture"/>.</t>
  <t>Consideration of existing enrollment protocols in the context
of mapping the requirements to existing solutions in <xref target="req-sol"/>.</t>
  <t>New section starting with the
mapping to existing enrollment protocols by collecting
boundary conditions.</t>
</list></t>

</section>

    <section anchor="contributors" numbered="false" toc="include" removeInRFC="false">
        <name>Contributors</name>
    <contact initials="E." surname="Dijk" fullname="Esko Dijk">
      <organization></organization>
      <address>
        <email>esko.dijk@iotconsultancy.nl</email>
      </address>
    </contact>
    </section>

  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+y9+1obR9Yv/L+uojfZz2NIkAw+JebNHDDICR4bY4Fx4mR2
3kZqoIOk1nS3wMT2ey3ftXxXttepqlZVVwvheN7J7L15ZmKQuutc67x+q9vt
duq8HmdbyZPB4d/2kqu8Pk8OxtnoLEvyaTLIqlkxHWVl8qIYZckqPdQ9GLxY
66QnJ2V2Ke/hR51RMZymE2hqVKandTfP6tNuOs0nafekrC7y7qycdDcedtIy
S7eSl7OsTOu8mFZJOh0lL9JpepZNsmnduTrbSrb3915sJ2++64zSGhq8t3Hv
Xqeq4cFf0nExhU/qcp518llJv1X1vY2Nxxv3OsO03kqqetSZ5VudJKmL4VZy
5zqr7sAfw2IyS4e1+6C6npTZaaU+KMra/wQ6mBZ1fppnI/hwWtBTdZm7ZtJ5
fV6UW50urBa8eNhLnpZ5VsFzvBSHdXZ6mk3tp0UJszvMcaZVsv0dfGLWUT7k
HrIMenhZ10X3+/R82h3k07PkEU4ir6+3khfzaT48pzmNoI8732x+ff8xz3E+
rUt44rusnKTTa/gom6T5GBeFxtE7xXH8teK+erAm8Mi8zLeS87qeVVt3715d
XfXU13fNzI56yZusnGalndrReTFJK/fpv2pqNY2je0Xj+JSp9XvJ8yx1E+uP
86I2H9GsdvJqWCSH17CKEz2NAYy1zuGvtKqy5Gs7izfpeJxX2XicTe1Udr7v
fnN/44GeyiHctt+ycgznGj6endPJXvnqwWby4EHyzdffJI/hXK+4mY5hSH8d
4lhoejL8Fz0aR1qOqmJqJ/ECP8rGyU7wLe8S9JiNYRmTw+K0voIbmbwpyovK
dTUZll/hBf5rZR7tDVO9oGY91dd3O8MCJpafzGu8EnY5q4si2c1/vXCtZ/BR
bwQf/RVWGl6q5mO43MPr3nTcucymc3gLHj4ri/mMfiMqkvC77+mPv+LgejCZ
j/ggEK35yRY/1r06uxtQnc60gDNT55cZjmrwdOfe428eya8P732zIb8++vrR
Pffrffn164375oGvH24+lF+/2XhgPv3m/iPT2DePNu2nXz82jX3z+DG9ttfd
7Smi+OtV1b0s5sPzrPS+nWa4JKfd6rd61h1WZeTV8nSIvZ7k1VYnn54Gs3t0
78GmGfG9h3YUm+7X+27wDza+ll8fb9rBP753/5tIt7ygKfWz1+/3u99s3Ott
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
TySYVZeawHXU7QrYaN88q1RBbIdawH6/lA0znA9RCa4na5YG1sUjzTYFIkh8
SJ7DLvSnWXl2naw+ed5f40yILC2BiYxDaJrV/ac7a72OD9AYA8FxMvKy4r5S
yklAsgvm0HKPCHMyXEqcFy80vckIrSkBUplx1fIN9lNg+nQjD+XGgNMeQxCj
ALO+JDwEPr+VtAe4c9loRKtymsHtY+1byKxOKWiUQPXrt7VEGawFCRiBhg8X
hb92UUhETVw4kuvPD+YYZ+mpcpjLcWKXciRryiBJKmkFnxEkW9+W45WVtqns
3voExaBCwaQlDrawgtZpVnOxh7heYzku1dcytgYXZOqH4rZapnpa44sLVS7S
pWEqCtDk4sqJnLiTYnRty4zZ8TSzLm/eIjqbQLhuAP1sQfsUvq1rdcrxeDmz
SGpt5NekEDUTRv2jTrTWNcdR0Oc66e7mG6AV+RW39nTGVYKtPuHJ3qlDrVuP
mXgaZsUTNlaf5iW6sXXtAkG5K8v0mk19Amsj57OAqye4JG0IQ5iChiHGJ7Ac
V/mIAhyWxcftYTqpqsdr5uPOAw2fbslNE/XUywXWUzPn8yyV3CxagaaF1KMp
Xii9iWm6YURaMrYEbnA8MBG40LTFahQYPhuzCb03AjKFOFMIYy41uyVqqxnB
51eo0JTW9I1iA9AUM+lAFV8LTuUtKTLuM3kmaEZByF2yYoLNVpAWrsA1P8Pf
VVCtisIzhaQXFAtbirUlTSpokXHNlfc3IYbE66wSdHhvcwQqd8xvceXhwASD
VeGkzUKmbeTb9blo12lOVNUqjAqs5lQ/g0piBOORPY4EEPuBlpxHe5WjI85U
ipJXo+cBdmyXZC7Bkrad8tMmU08qg+S1rgyhUo+xdnhek0r14N077OAh/CNu
vyHBCwYRrM4i9gjXVfs2Ew7mMgfZ1reRFHSSvhoRz60JzZ1IVBzwEtDVHT+e
NrDYXC7piCKlFG6UtZhV8xMzDaolQn5t6+j+KgK9EX7wVfQPDlew8CQNYJIA
lcT9zX8IVA85+51zvwFUEjb7AXmpa9JYQcJW7BU0rSSrzwY7a+5FFU/wgbMQ
1rywgd+1LrFQhUjkQuQJW/TmQ+ful84mIZTsy7umaVT7k39QlMWyTbs/pJFv
u/rnExvx2vjzJzay8I2bG4GVMqUHdKCsini1C/dtN7k04W+fPmeBnO4Osn/8
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
z536xe6wfnH07PWL3VeP9nfPHu0f/TiH///2Jsd+nk7fvnm48fyHJ9cn99/O
3n53fMG/n89O3ow3ssPN67dvRj93ZsP7g+sfYR1+vHd8PdqB9i82nx2+3ttI
L/Z3Xx2PZ283nt4/fP3syduN8fevjs/f7v/2LP9xPNt/9ebx96829t8NNvd/
7uzv7453Xr3e3D16PTjO+sePXh0/23m78fDNq4unl0ev98sXR8eDk/HbRz8e
DzdPvnvx29EP5/3j/tMXryajl8cXz578uLH5c2dncPHw6m1/BC0MHr16/dC0
sH/0+ln1evLu1xebz/qvjwdP3r5+e//F9+P9Qf/4IfT462jj4T8GR4P94/7s
5875YDq8yi42+4Mf4Inv9u8fTWZP9/ubrw8nT/cHu4MHgx9mT15fPJsewZrC
LPZf3ave7R8/nR9PZ+fHvx1XP/6GM4IxvH71+p0Zw68whu+Opk8uBpvHDwYb
gyfHG9LC601o9cnhaPLsh8H0SX7Sn1Vvfn1WZZPBz529w8n5r+nFsxTe3h9s
PHs4fD06Ojp69fDVm9HTwcb+rv37h9HTw37/6vD1051XExjPRXWZHg0fnmw+
+7lTHv52/BZO1Ku3v50fv97ce/D8/vFvL94MXh2/GaeH/c2Nk3v10dvvnz6H
0U9OxqPfXk1elcPjZy/2N0eHbydvx8f36p87D+Hc5icbs8nhm3fV6Idnv6ZH
e5ujew+L9PXjN682Rv94+8NsZ//15s6L/ujJi+Pji8Px08HxxubO69ej3Vf3
92H3n/7cOR5cPLsPs9l5e290Dbv3FP4e/Lgx2Bv0nx7wbp4PXvbhvPx6/hT3
7tXG3gbM7gjOUv94vHcFK/9z5+ngh9Gr/f744sd7m29OJk9/PPrfxX1rc6NY
tuX3/BUZVV+qJiqzAUmu8p2YiSjJgIwNsg6ccwS3bnSAUCYSIJGSbD1u9H+f
tQ+gh9OZXdU9ExPR3dm2JTiPvddea5/HXvQXCY96gZX5ZB98IhZuud+ERSrh
qT1XFvn4KHRZZMFYy579cv/HuxifuInM7CG2vcoN+rE0u7ugzPVZaU3EksUY
j5vASh9cc7/15D5HGx/RxuVUZus4vx1z6pGJuRhh3M1xHvVj7nQTmw1iq9q7
pjA8Xrlu0T8IzdNmwjVik0XiaPXG2m8vvLT0cNm/88h2M5+zpS+zfmB5D2GZ
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
IIf5EHhYzJmZeIopJ+kIroLhZ9HM7NkJ3jcrNzpceA0X/gIyiPAHMqozAbj/
Mi48j0+8zlhvQ/Yf79BKrRoIwSxRByuSHBYgtRMIb4sgHrvD/i4s9ZzZ90d/
mb4K+pGVoke3+DRalfdMETijWTnV4dKQgxG7cGndN6yJJ3tBIgEKiz4EBtsm
dhXDlSHMEM/+vDQ7QpLZRcZLb4DwtWBchOkxPQgJe8tgfEM/t3T/ju3iI3O8
O8cIIfymOt9DwLjM9O4CeyvjISLR4n6fTKLM1zwjmHw+SH8bBHhKykZ2VKba
7uB2VkdhFnJcQJpZDCCu3021kxRTQozJdDBeZBPfmu5j2z2wCYNABXeHLHK/
LYPs33TMHcMTB6NW7E1SDJg+CLlls8Jy4xyK8YZbuxeu717gPnoMcIoxwoiV
CBfpQkqCFb0J3fAq2FCTFDgyDdKRR4NUg73cBdzUmGbuhWQmAHswGdx2OFdu
fR9pb9K8ZZBnfWY61lgWgzSAHu9AOLpTDeHmThyD4PeOa35e4x2HGe8Jr0wf
Z/n+CfNiz4TjB8Z+P+VZFWnFUpre1s/3fIYeiU2ajw9T+/bRK1nXK3d7tEWf
SZ1DIFB4KiEsM9Df0C2cl0Djt/eFtrlfIkxTamRJaSO0RSWOIOKOoEXHxOgq
qpvYU0oPWfx4r3tz5/bNO0RPePDDUl8/PHdW6Tb58mF9/zQsTO23Pv/w2f+k
vTxYd9s5f+yNjcVvB71f3k1eFl3/iYeb6SKdP4NT7kPrV/+4Sc3B4FP1NH/8
++Ix2Y3ntj5u7iP9r8vrMpusYJ2ja3KCTUrw0/yzKtF4fY/m99KH37xK8zL9
GK+T1Zzy9+fdr18/jJ1ykexyKw1tkT3lIOmGAsoMN49T521UYvbTapVeXEZD
ueOYboCbrla52k96v3z/n2oB/7+aAmT0pPP341dXk5/Wkn5CH39unpzFm3dJ
vTOtKef6+rjy6VTYUu2/UR8+3wv++tPvf/qhbt8PP9dfVDupds1m0k+r9S5e
N/uf24NmH7+fiz0/+qt+MOrHOUd73ZCLN/zJ7Ox1yVnaFqdy+JRQbpZVN9T5
9irD5vZbjMkP37ut7P9t2vdfTfnCx9uk77+R8v3jXZv0LfJoElXRQK+mHU9H
G+ipg7ESobd9IaJ+yrVj4P/WCwbbIA4ixFfvCRGZJ4M/3m1exstsNT0qQv+c
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
1QRt4LCqxQmVgGJXKMX1wXiZjsawXasPHj107agj7txjYogbubCMWMtYWAot
ks42nm8HiR7SGsAxLr2ST6YHTN3aL/qrwNg+RRhda54GxZwfrb0s8+5MWpZY
ZC/RxHlMBr8ZmIN5tMyeEu58gUY8hHr24hZFByq1z7XGc2iOgK1hl3EPs532
Of/8Qogw5t/0vrtx/tr3yBvJ+wQiKmT4DZfsyAa3Xx4P26Uc/NYJNechRXx8
1LNtfPK+s++Fi8gaIR45z3LInh+MAu0pZNDJut7g9jADB4omhVd7W/EIjuvM
ytWODkT4nAUc/2K+nNi0xgl6dL9Lj9Zo3BEHaOWuv0w7UVndeEZqxrLoxjok
oNUP5KIogkWxToxsBFr4ZSwLazyZajJIN+kQMz2JRb/jd8Z7xLvneFmUzOxt
PK7rTOUSoKsX3p2kHmspmxa051q//TR+44TFf9YlLy4PWLxxrqK8vaFzFWJi
XZ2rgAIqgqFwyLfbkxWvzlVA8f6Jw+HN0fA/3n3jcPiw6gcX5yqASvWRZrAB
2Hahjqebt3wMNkkZfTAQsD5XQ3QrLTs99kl19TE+tNuIzlEcEeVoT53NJ5kF
zPXbQ/OJpt/FR8QpzHiPIip41R6RQu8yi/UDs+2F543zaASGMgSrdmE3x/YJ
AdfBfdoD67C++sA6dybAORmX1lAsAXr4BKxeql7IVACZnsOSTpNUvXG+j6W9
bY9GLYnH/JmjUWNjZkXGeBLtxXC1B2OsUt6bxFYGjPbWtEe03/M0694HTUj1
rPIX/YrxPSwXKsa2nse8u+OyNwlE8TQZ/LYba8xC/FwjdryEy2lX8u0+Roxk
XXBHybWUx4viMTBue2EnfWgwhnyHdsaYp0NwaC/j0YBLzySUDZR/I9Le8yBr
/FvZysADUr46ANgc/3M6dPwP0mcpJ/eHwI72iWHd+eTbtmepqw62fpmvMQ7x
VLIgngiZgpVxzewERvbIl+ZRcs9hw+yZm7qXLPsh7IhPi/5DSuMyAUMumLjf
u6LfBWN/fjj276aWdx8Hzj7q9CdycIpLuzouie31NQ5/vJvuIr7X/cH28iKH
v3iNwx/v3rzI4S9e4wCEQFwywdShsTRwugAellf1NQ689ZMrL3nDU/949z1f
/bOeCp++8NW/xvEQTYxYZ/d0WiVjiTU+sjx7cOlMfTBdi453Hxj3OyHwdA02
bU6hjsQjYuIXiOyuexdNH3VvIQMx9stinqIt6b0w79es2L1gtL5E0IO+mfZc
UTxOhylF9QXUVi+UlY+2mmir05yysc6nbMCpvLEolO1CBzBgihk1h1u5CS5h
7V4wLurMjc+FN17028O4Sy7SQX3cj55SH/hj00ejmqp4hG96hlcf+cP/l7b+
5S2eg5F/GAPpKbqpw3fazDKPD1rhYmTH/gQecMfmI5GG8P5RKrM91383YJlz
9MAd67uXqIgiZlfMK2/vfNguWM7RAUv27qHR9m6nWI0XvCss8Bfp3Ph3n9eB
sV8JXRj412d3dCjeMiPbYyldqqJO9MAbL870/KUTPZfned7/EHHOd9vFSxJ+
ut/OWPL32xF/zrpynux3VfT4+/D3Qvw+8Vw/1O9mN8+JgSmJR856EJcfRvfr
6NcP48/PcNSyJ8yho3dBFn6X9uh753hOpzj+zFGef3IA55uneS6P85y/2ZSt
qE/ttHWQ6oM0v6ibta5vu/+rNwt9VWzjjff889f8/79u6M1zJ9+7Wqg5ZQI2
8O9cLdRcLASV+u9cLdRkHMAir3IO3uL3g8o5LPtVUtZXkySGnsWy++ryoMuo
A2+9iDv/atShLNg/uT7oT0Qd9Ogi7vyrUQfK8E8yxO9FHbTlGwzxr0QdjO5F
3PlXok74QieDvcgT/YdYOkakZXw839qPusXjMi0SMxvOAivyO/0O5WfCjhdA
IdGuigEz9YHPG20zoXMntbr5JxFncDsYq0wT2NLFdUPMTpmAvTh/Vv28kbtK
R35OF/mgLf2YVNYwY+5h6wRmOuBmoXHjsxYuiom0szBYitUUAc/LP6/DOSLN
4bYURWHGhWkk6voFxIihuxT+WMs2AqxsJrOBF2RcmroIl9X9aLB9SuxsIibR
U2I5pqtH1pSzPNStDl2/8PYx8T8pYra1iLGLaxGjRYM499aULPmGiPlLh8P/
eNceD/83DocvaFs1JAfdskW3bj0pxymY45q6nejkqrkG57bIsRhtzjPzXcAB
jDq7AakHGGxBOmDMAvR6hV4wkcNRilpStI7GTHHVBh7c90CF8cY+nNBTtIWR
S3RSI20PezffYHNXqwBEUZyWbBKUt7E0i6UI1M1A6rj5jDsupD5tMOVEkBmI
jHciMn5949XpZ7oBK9V6d2NuBeNjNAes9RMpQMmjjlcWkLHOcWSRhJbFdO3Z
tPE57UW2PpkenSFG1BaddB4jQLhlz5Hm52PQgdjRI300dA98GVXjPB3FMCwS
DunANzNtXLKK5SKWS0r43XZ9zOY/uXXrIn0G2HrzLgU/YGMpnW469I6+9fsB
T+qCeNFSJGgnqGfH60Xm7uiajBHg9KzU9kYjqd+BcI1rsR85kIsvD1r05GoO
RxBy2dLL/KLyMbO516me0on3jKeC4lYQYZgjyzecI5y+EnCUib+bp8NiR2Ht
HCT1L2nHXcdLj4ITpbo30YFCjAjcBTeIwmlvMrKh9aWSC/EQLv8+9R+LWbDK
jv7h8zB5+Xsa7o83qypfOg+93d+j+NFer+wDqPaxvzFGn/Lf7taT22M4l9Fa
sF/Dm+HddB9+iM21mcx//w4jOxGxmra8zcRes6hvUC/iSOpGzSE4zWqtCs8M
6pJzqj7zezOdb6nWB55JNafpntTt7L/e//ePYCp/z+ovgcA9rVf4Jn2ZLnav
tvg3nZ3vJ3/3ziJupQqwp+v40/a91n3/4X9f/aL3H1RO5PeUjiTTTajnS1iz
WUyFyat4HZczuhT7p/pK6fTDavkz0a+mHhhVB6OCH5+AfdmSLq1Wty2f6tZv
nmfvf7zpnN4y21dFvDxVLFDMr76rXBUSr68RbgqDXd712/vY+6jX1e4vfmOc
XtG5wSvYrFy9tIfIVe1htHDwe/+9tVo/l3RUmS5KpeoqTXnIc0mW9g7kWN0y
3ba7h4ea7Z3Es/V6Rbf8pvW1x1ctO7fj9hd8r3v5vW9d9V8XJ67LiV3/6fS0
3q3qFdkQHRqfrct5U14SY/fDRb25+ur0H355/8P5Im01xKffXxWnq/XB6Y+z
7fTj6Z3Gr5fvpMtT29pL61lTjrnpgKrJTvXC1OXVp0KX/+P9PZX+rGf7ouTi
hirOUBmX5pr3q5ucTxem/gPfv2uKipJJtvUK1SPa2gtX98A3xe3mS7Ki8+R1
eq/fcFnXUV0FrUotvjEr5y/VL/z7rFLtelo91c2gWdvO3uezw3VNvOvK2c0g
wOxKPJWKQrWt26B5hnrVj12a4vtmurXrqgrKjtfNBbF06L4uszBLL0sNtvcL
nx/T/bX2q/oK9XNx0VdXtzfP3NBt5JdlSU5OeH5iBwY+LeLmRnZ1R0B9efns
VL+HLjunYh3o7bSYo2F/q8uKqQFryr++/2k9+/nc9IsWG189/ywAyV9fFz5p
5vxc9quuWKFqgKjiZ+09Boe6AktdLeUZwPoe7vNKfp7vSVC1h3Zz/GG+bd5L
lbFel+Naz15W+eyry/fp9v5zlzpfdemqkh45Fl1UvM1mp9v6qdTAxf3T15XP
mrIp6kNZA2XqNorNYTnN1qslGcYv7w+z7cc3oL/zGvq7Cvrvm7uOWX3XMWzu
fB9yQYX2qA5LY7GG8eHHGxhCfXMG3WNMt1pgKmZVPWTL7ezzmmIE1fGaw53r
vqtbs9WV2XWBCrpl/FldIt2WaXpV97geA6XFb297lzX/qMQJPYfyCltVL+zr
qKKucb5Ayh9aBPnhokDBxZ3pJ8DQb07PayaucR01eW9d7g+vK6juHl2RgbdS
SKQiU1TPYE43Uc+otMj5+b+enh+fLySvn76kEK4KrrVjcaoXQqFdVWZrnvLb
9eieLj6/RjvE5Q+z5QuhXPvF24sICR6mrjHZH+pL3AGJNadpriKPr4aVSMp2
tj8PlaGdunJRZ/xcF+DD4Pe6/OcJvauCru5uYIAKQxRNCY+6+C79EL8uDHr2
7xarGu/5Dq53/vGP/1lXrYhPrOZUC+UM1Kd2/fStBxnNSLwRI37+ulqMqllS
lxH+Xj/OA6hjAE9ofiqinSR060oTiU6lFZq7/VUjqEbr9oKiGMY1Q9hv36u6
bW2Vh6s7xtvvdFSJEGXjh/f4ZFXDWjstp7ltI/aVO2zONRKaG9Lrsp7o5hu4
Y7zGnY7CHV7VBVdOBOFU8uwHevpNtykoDzL5PPtf/+sHNeL73vT9aloX+ZvO
Nmeioaod0iN8Yb8HBFVAKApETb0+VRqRWqqGqnWYxv5ONE7dOVTE2y3d9DPH
99bT7HDJ4xozqrtK41WuTtUMlRPhAx82q0JRBb8Zupni8nTlfH1/fPP1bw3h
O0iQrwdRfz2IRg3ejWP3LrjGuQLgVd2XFlUUsl4Uqvq2I7X2f/57/Hn792q9
/8c/VEXN2Vf0onwutnPSQedsSF0h/s3SHV+57bs6erY9uSabav6/n/BVH2nt
6d0VC1XE/VWJ0BZKPjUFk1RlSyrrdFGt6HX16BNxXquc9teM+js91NHDCwCG
zy0bf8R0xLWLXuLiaTQHPrusbnZVXhqjWxvy1yX84qa6KQVdKngQrz/PttTX
psjMy5zKJZzqKClXgdd8XVL3o5rsFqJOwHldkVCxP0LdpCkDRJNxUQQD72jB
/7LSz8d3b2GG9trc9Vfm3jKTuoOY5U1jgqr+6skY4uU3/OFV1Zy2L+dpbu4C
u2KH6Joq99Jc4nXByt8qo9zI4tc+8jR6+ur1mys98Sdc8g3n+UgD1G9BpY34
IGvxtYjaqfot9VS+GcRmS+UEVFtExY+msW1Ee8PmXxXcff+Tqmy0xAM327pw
eV3GbOD/qGuqe3OVLakf9bNq+R3Ed1u9o2n8b/RdcspTWP3WbNaTd1UJvmEN
tdL8qtr1x7b27lsF21UJI1Vfsy1xTZ/8vntQvb9zhe3keV6k9QsI5q8EEJ6p
eFZjEM9bohVXjnpu08f33xiaX9uhaa3sGiu+BQm/ECZcVUT8dq9e+3ZTGP6q
K1d+jJYOVKHnS2T7sXcBbq9dQdUMOm4rVVeIaiWTyKFqXW3hLwQEWgmkWn2r
1acP+M+0SXRd+siPr2FWFVdGc4YrAFEOcYOX/8cJd+OC6soeLnT2ub2bmoKc
apjV6FPXwKU6TF8xrXlTru+qFi95f9O4JnzUtgX6qIoe0WOs+R7P+OGqztYP
5yJU5C+C/Y2uTzzn5753yd75Ur42XfeKltMfMSxnpHrjAW/ATW2C6mLAmk6/
/TGKopvnBKy/rm9DEeCXs+bFi0FCm1F4o0h4Xem48fPXdyM2cbxF+ILqrtbf
bEf5p1ZTF5jsOlSeUgZ47k7V6EQbnquP7QozLUrT71UxsDcKkSoy0CZSf37/
Uxt6NMCVMq7fYTprentTFatQ01JnIdowgrGikj6dm5uEyvjVady0Lj5Vt+jC
9D6eXtL9+Yq8bBUeK27TgPimnoWL1JT6czLbblXwitM4gbDYHj6+uyZUpxX1
pqJiUxI8m03r4kevB6IBEqJ7V9X8/kmMArwSEzjVcmuS5XjMxYfxy5P1nGrf
XTeMEguEVPTyAnS6UP050fFXFv7Xu4cGXaHhV6UR/1w/8ZjXXf0X+knWsHzF
N0/O2fSeDK9eKEivG6uS5ZSNRYhcr+NDnZmlamB1trJV2C10k0NeZSrP7ljX
8qJ4BGuk77S5+JYtvEoifvUoVXnrdRXJb5Swz+KX2UURPjzr/NbNK6y5HMif
WoJj/KzQvq5HSpNxkvrNt1pgvCyfN/9e5cAP9YdaOfL7KUyoJ4D4Kcp8asDP
F6qlhairpHd8yuN9W1ec5hkPU8mX5TWbUX/8+IYy/HBRdy9Zb/L5h5iSgR+a
OsgXSb/Lz1BXNU1RalfFRD4wTqhE9+w2FPFVEXVVc7cJZKoQvIp9aNWfbIqC
9Yu8WztvX01ZnX+Kq+05D9ImIhpv3NRZd4roeIoK1RdgUGdomxUg9VE+0D++
u5rNTwgQVLXtrVrSrTvXSl0F+DqFuZpCypO7x1SivFHu37UmIuyb93SDFf1b
2yIe8K0VoZ9O9c+pRGhaU6R6HF+94eeGjfyzz1HvyQBe/55aiL/R6LVQ0cSP
QhVCVKrwrIeKJlmznS3Jyjf/8yriqfi+JMcmidF+66cfDU2FMt6muVQzXzdE
Nfsyx/vWp96pmNM++YQJ1Pgmidbw+bfLh14HwvbLamYvjHc52xI9/7AhUjrd
rD9oNxf0tZ6517lstJc+WVNY9H71ta5obKpp81u5+W/kyC4J7Jk+vJk4UM16
c8zeSEMokv3KTKALL+NYvZpyVlsQ3J+uB/GSNeM1Lb7OilM+GS86NzBu+RKR
esrpNQGMUtDE6A51qcbN+qIg6VyVcqRv+1HwRASzQfCf3xrEb+TI2qXEUxVI
9aJ2CZK8vy0z32IN0PDj+1GtHOu4eEkU6ofT9y7qpJ4sky4p/xRPm/xg6yO1
6QCv4hpU27c3fIBiV4WBiKfZGzOGYVQjH1wsadR//o9TPreNJ3VUxTh8nZGg
PtQO/kwArrY+1n+ri6FSidXvv6Xz/ok/Pv7tiftDekXzylq2AhdrbVMHsDd1
T03HVRPO9a1P0QX2tD43Y7Aqy+dlKxZPo4Ov79T965dLcVc9JShqGJJaPy3r
ip2gkB+e/IcWYE+sjqglledOgHoZ+evPbQjebFbTebydvQ4laoWwtgJlLZ/i
l9W65p/FQU0umXg2/0wfK+LDBVypbHNtEYpdNmag8mub2dXvqBXryyVk4jbz
y4zbV0BPrW7zYjG14YTWl2V3Ww7Usrmv7pS/YFa1+2yhglQRZVXR/GQtm2xe
nebjtbmhLZdi8/TU7i/vf+zhv7c/n7t2hosmpNWp8HoHyQWCbMCYtx8KlZe7
Khb+ScXkr5rwTFf2b09LeCvK2W3eaNOv1JaGRXwjLjfId6Hx1Xxf7DGp30mT
S029romuAOzh/q7G4/MnWzNoG9L59edrgXOxT+Ic8f6UC5xi+lfpvWYJ/TX4
Xi2v4QFnfvsmIv3bpnFKFTZpom/bg19BydJ4t0V93xsXWK4iLgWGEzH8RnP/
dJK5XphSrqrWxeZXi6lqEa1Zc1JWU6+FX24PUOBPxcXr7Q9NenC+UcvBamPF
edkIDyBHPHftIsf0qs8XUZWERGOfTWjB+C43KhPYDvurDQsXuKGm4eMFFZ5v
GusnMKRxWyKIX4HiG089z2bThPZlZ7ZbE6Em73xJmS6f87HOhq1PJd5Per6d
w9YP3tcc66c6tVNSJp6G6ec683i5XD+/XP+slwM2TQLlRMvOuRQV3i9K2J/d
5RTzqUcfqPj18uJ7ddVthTxgKyqBdkGY/vbx4kuc3QPlz5al5HUBwbhdqzLk
rWIkiXddhKMJHJjxvylR9Rq3z9S8bRcFn7ZMyTbO8b80Dm3sUPvdaitsZdjH
y+XYc6y7ZntBhsHZvJez9ZLC9+ayq3Uy49Syi+fWTjdfpvOXefqMj6IlKiB9
vRtF+4+vMn1fzyFZxf/NKVQeTMsjLR2IKUBURTw9LVqdN/npHzs1gtfJ+lOf
VAfOXk5sctlkMdv0vNoQAl8mcqLKkr9a2Yc3Lt80CFX4pkmLqglxAZhqn2SD
vaec6Wn0X+ngS6g8eWnjvCd0aYDll/ezj58/1lyRtg2U4AqqiDwN5jx5bj2z
yQhd5f5bAxq4T+fGq1w4vQU8OAOC0P+qT1yoPfz4S4sWtS20Gfqmby06LWdU
cieGOVz51mk2G+i8WKK/KApf5/5VZp5S5NvZaWLVsFws3X987xPRmC3f2NpC
yxCUp4NGVWs9CJzJvM5oq+0AzcorraLtGxXdbs5rm4eG0H4EqMZVNb+UJZvL
TMSZMl7Fd8q1nJxCTaqSsHXl+NvbHiXiSb/oigC8rObowuo5qVeU183mkLWy
4tNekul8trle2YgTetm0BvfXKxvJrIZejMumOrOzZo7qRWbaOLIqlLl8PO2D
aHdd0G6S69TcRT4IL1ApwbgVCqkaxvrtZ0ZxnuNfTkZMY3Oerrr2UtuKa6/Y
fGUEtAx92ox9MhVa8MTk7r8LZEq6X+1pUQB/oaLUFG1mhVq9ovXE5ulnfjpL
VUro6hNtzFMjft74047ZrtnTo+Iv+etZ1DXL+9vZianSb5rnNbskT/ZJiHRa
uPz4Kvgs47JJBCmN2jyi2ZfWOBfh0nuCr7hAp5c1elFS6rR/DfO42V5uRq5p
XbOB7bwcqPLi62k2p5ZTEv2k+lpsa1dIz0hK1lIPA57waYOvvn96uH+Trtfr
4CfIq7NG6rvfmYgTBSfht0xWMPZT8rZh9rHaujPfNJsplBGvinbtuP7ENfO6
THpeBdLGL85Rpo7WZwjfkEgjxVFrPWVH186kvnvueF0XDQNZtAPdYPMvdXri
JCoVjamZxHlL/OnFH7/jACrt0uRazg5wDRuEO2rDWZs4LdQKc7OlWa37KmC9
r5ehqW31KsPH66e+wuMra5kV541ZpySAmrh6FBV/vvxGoy9OautK8tUEtMHw
N/ZaX4w3zbQC1k/nAKBU10UkuowILShtvg493wMaJVe+0ijtUsMvV+cX6uVA
2oXQGPiqWdxRSb4TP9+tlE9cmkfrH5tXuqcRfMXsNPbtpuPV8+Yyg1YjTHue
tybIcJD6DbNmwut3vIabr2LfVKUxWjqQzOrtUbVEpJWuyyaUJFvWbcU9ytGo
zTrE71bb09wSUaqXwE5uSNy9fuT6HJzrmb2EtCpulu5U1/Bpq17p00/y6pwx
ug5F/8zyWqb5/8K4B/+KTbcWXTOdv2zTryz6f7z3Lgg2IsFafaNdCsVL3qJN
bzYvOW24roE2WSHqESGc0raCJpD/H6NLYkDEVQIA

-->

</rfc>

